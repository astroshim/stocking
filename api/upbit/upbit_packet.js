try {
  let e =
      "undefined" != typeof window
        ? window
        : "undefined" != typeof global
        ? global
        : "undefined" != typeof globalThis
        ? globalThis
        : "undefined" != typeof self
        ? self
        : {},
    t = new e.Error().stack;
  t &&
    ((e._sentryDebugIds = e._sentryDebugIds || {}),
    (e._sentryDebugIds[t] = "d108938f-86fc-4ae0-a886-024a900e5d93"),
    (e._sentryDebugIdIdentifier =
      "sentry-dbid-d108938f-86fc-4ae0-a886-024a900e5d93"));
} catch (e) {}
("undefined" != typeof window
  ? window
  : "undefined" != typeof global
  ? global
  : "undefined" != typeof globalThis
  ? globalThis
  : "undefined" != typeof self
  ? self
  : {}
).SENTRY_RELEASE = { id: "2850969050309f428efd57704dbb28e823da4555" };
(self.webpackChunkupbit_web = self.webpackChunkupbit_web || []).push([
  [1081],
  {
    20502: function () {},
    98625: function () {},
    43589: function () {},
    8348: function () {},
    34125: function (e, t, a) {
      "use strict";
      var r = a(49145);
      t.A = "undefined" != typeof window ? (0, r.zR)() : (0, r.sC)();
    },
    96562: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474),
        i = a(62205),
        o = a(76061),
        l = a(90733),
        s = a(14047),
        c = a(67922),
        d = Object.defineProperty,
        u = Object.getOwnPropertySymbols,
        m = Object.prototype.hasOwnProperty,
        h = Object.prototype.propertyIsEnumerable,
        p = (e, t, a) =>
          t in e
            ? d(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        g = (e, t) => {
          for (var a in t || (t = {})) m.call(t, a) && p(e, a, t[a]);
          if (u) for (var a of u(t)) h.call(t, a) && p(e, a, t[a]);
          return e;
        },
        C = (e, t) => {
          var a = {};
          for (var r in e) m.call(e, r) && t.indexOf(r) < 0 && (a[r] = e[r]);
          if (null != e && u)
            for (var r of u(e))
              t.indexOf(r) < 0 && h.call(e, r) && (a[r] = e[r]);
          return a;
        };
      const T = (0, n.forwardRef)((e, t) => {
          var a = e,
            { hide: d, sitekey: u, size: m = "invisible" } = a,
            h = C(a, ["hide", "sitekey", "size"]);
          const { invisibleRecaptchaSiteKey: p } = (0, n.useContext)(l.c),
            T = (0, s.G)(c.f) || "";
          return (0, r.FD)(r.FK, {
            children: [
              d && (0, r.Y)(i.mL, { styles: y.hideRecaptcha }),
              (0, r.Y)(o.A, g({ ref: t, sitekey: u || T || p, size: m }, h)),
            ],
          });
        }),
        b = (0, n.forwardRef)((e, t) => {
          var a = e,
            { sitekey: i } = a,
            d = C(a, ["sitekey"]);
          const { recaptchaSiteKey: u } = (0, n.useContext)(l.c),
            m = (0, s.G)(c.$) || "";
          return (0, r.Y)(o.A, g({ ref: t, sitekey: i || m || u }, d));
        }),
        f = (0, n.forwardRef)((e, t) => {
          const a = e,
            { visible: i, setToken: o } = a,
            l = C(a, ["visible", "setToken"]),
            s = (0, n.useMemo)(() => {
              if (o)
                return {
                  onChange: (e) => {
                    o(null != e ? e : "");
                  },
                  onExpired: () => o(""),
                };
            }, [o]);
          return i
            ? (0, r.Y)(b, g(g({ ref: t }, l), s))
            : (0, r.Y)(T, g(g({ ref: t }, l), s));
        }),
        y = {
          hideRecaptcha: (0, i.AH)({
            ".grecaptcha-badge": { visibility: "hidden" },
          }),
        };
      t.A = (0, n.memo)(f);
    },
    27540: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474),
        i = a(62205),
        o = a(8013),
        l = a(8175);
      t.A = () => {
        const e = (0, o.DP)(),
          t = (0, n.useMemo)(() => (0, l.Tf)(e), [e]);
        return (0, r.Y)(i.mL, { styles: (0, i.AH)({ ":root": t }) });
      };
    },
    18379: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474);
      t.A = ({ text: e, transforms: t }) => {
        if (!e || 0 === t.length) return (0, r.Y)(r.FK, { children: e });
        const a = new RegExp(`(${t.map((e) => e.word).join("|")})`, "g"),
          i = e.split(a);
        return (0, r.Y)(r.FK, {
          children: i.map((e, a) => {
            const i = t.find((t) => t.word === e);
            return i
              ? (0, r.Y)(i.component, { children: e }, a)
              : (0, r.Y)(n.Fragment, { children: e }, a);
          }),
        });
      };
    },
    63893: function (e, t, a) {
      "use strict";
      a.d(t, {
        dn: function () {
          return n;
        },
      });
      a(79474), a(39699);
      var r = a(62205);
      a(2481),
        a(38148),
        Object.defineProperty,
        Object.getOwnPropertySymbols,
        Object.prototype.hasOwnProperty,
        Object.prototype.propertyIsEnumerable;
      (0, r.AH)({
        "> a": {
          userSelect: "none",
          boxShadow: "0 0 0.25em rgba(0, 0, 0, 0.5)",
        },
      });
      a(14047), a(71358);
      const n = [100, 200, 500, 1e3, 2e3, 2e4];
    },
    19778: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return g;
        },
      });
      var r = a(65613),
        n = a(62205),
        i = a(2481),
        o = a(76320),
        l = a.n(o),
        s = a(4633),
        c = a.n(s),
        d = a(93312),
        u = a.n(d);
      var m = (e) => {
          const { highlight: t, link: a, text: r } = e || {},
            n = new RegExp(
              `(${c()(t) ? "" : `${l()(t)}|`}${
                c()(null == a ? void 0 : a.title)
                  ? ""
                  : `${l()(null == a ? void 0 : a.title)}|`
              }\r?\n)`,
              "g"
            );
          return u()(r, n).map((e) =>
            e === t
              ? { type: "highlight", text: e }
              : e === (null == a ? void 0 : a.title)
              ? { type: "link", title: a.title, url: a.url }
              : "\n" === e || "\r\n" === e
              ? { type: "newline" }
              : { type: "text", text: e }
          );
        },
        h = a(92459);
      const p = { link: (0, n.AH)({ textDecoration: "underline" }) };
      var g = ({
        content: e,
        HighlightComponent: t,
        LinkComponent: a,
        TextComponent: n,
      }) => {
        const o = m(e);
        return (0, r.Y)(r.FK, {
          children: o.map((e, o) => {
            if ("highlight" === e.type) {
              const { text: a } = e;
              return t
                ? (0, r.Y)(t, { text: a }, o)
                : (0, r.Y)(i.Z3, { weight: "bold", children: a }, o);
            }
            if ("link" === e.type) {
              const { title: t, url: n } = e;
              return a
                ? (0, r.Y)(a, { title: t, url: n }, o)
                : (0, r.Y)(h.Z, { href: n, css: p.link, children: t }, o);
            }
            if ("newline" === e.type) return (0, r.Y)("br", {}, o);
            if ("text" === e.type) {
              const { text: t } = e;
              return n
                ? (0, r.Y)(n, { text: t }, o)
                : (0, r.Y)(i.Z3, { children: t }, o);
            }
            return null;
          }),
        });
      };
    },
    34022: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(41168),
        i = a(74365),
        o = a(59891);
      t.A = ({ payload: e }) => {
        const { basicPayload: t, confirmPayload: a } = (0, n.x)(e);
        if (!e) return null;
        const { variant: l = "basic" } = e;
        return "basic" === l
          ? (0, r.Y)(i.A, { payload: t })
          : (0, r.Y)(o.A, { payload: a });
      };
    },
    29289: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(38148),
        i = a(13409),
        o = a(5878),
        l = a(88113);
      const s = { none: "none", default: "default", textClose: "textClose" };
      t.A = ({ payload: e }) => {
        const {
            handleConfirm: t,
            handleCancel: a,
            bodyComponent: c,
          } = (0, l.K)(e),
          { t: d } = (0, i.B)("", { keyPrefix: "popup" });
        if (!e) return null;
        const { title: u, confirmBtn: m, variant: h, titleVariant: p } = e,
          g = p ? s[p] || p : void 0;
        return (0, r.FD)(o.b, {
          onPressEscape: "confirm" === h ? a : t,
          onPressEnter: t,
          children: [
            "none" === g
              ? (0, r.Y)(n.q_.Title, { variant: "none" })
              : (0, r.Y)(n.q_.Title, {
                  variant: g || "default",
                  children: u || d("noticeTitle"),
                }),
            (0, r.Y)(n.q_.Body, { children: c }),
            (0, r.FD)(n.q_.Footer, {
              children: [
                "confirm" === h &&
                  (0, r.Y)(n.GP, {
                    variant: "primary",
                    size: "large",
                    onClick: a,
                    children: e.cancelBtn || d("cancel"),
                  }),
                (0, r.Y)(n.fV, {
                  variant: "secondary",
                  size: "large",
                  onClick: t,
                  children: m || d("confirm"),
                }),
              ],
            }),
          ],
        });
      };
    },
    22933: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474),
        i = a(2481),
        o = a(38148),
        l = a(13409),
        s = a(5878);
      t.A = ({ payload: e }) => {
        const { closePopup: t, body: a, title: c } = e || {},
          d = "string" == typeof a ? (0, r.Y)(i.m2, { text: a }) : a,
          u = (0, n.useCallback)(
            (e) => {
              null == e || e.stopPropagation(),
                null == e || e.preventDefault(),
                null == t || t();
            },
            [t]
          ),
          { t: m } = (0, l.B)("", { keyPrefix: "popup" });
        return e
          ? (0, r.FD)(s.b, {
              onPressEscape: u,
              children: [
                (0, r.Y)(o.q_.Title, {
                  variant: "textClose",
                  closePopup: u,
                  children: c || m("noticeTitle"),
                }),
                (0, r.Y)(o.q_.Body, { children: d }),
                (0, r.Y)(o.q_.Footer, { variant: "none" }),
              ],
            })
          : null;
      };
    },
    5878: function (e, t, a) {
      "use strict";
      a.d(t, {
        b: function () {
          return s;
        },
      });
      var r = a(65613),
        n = a(2481),
        i = a(38148),
        o = a(7042),
        l = a(72448);
      const s = ({
        children: e,
        payload: t,
        zIndexLevel: a = 1,
        onPressEnter: s,
        onPressEscape: c,
      }) => {
        const { zIndex: d } = (0, o.d)({
            onPressEnter: s,
            onPressEscape: c,
            payload: t,
          }),
          u = d * a;
        return (0, r.FD)(l.A, {
          children: [
            (0, r.Y)(n.p6, { style: { zIndex: u } }),
            (0, r.Y)(i.q_, { zIndexVariant: u, children: e }),
          ],
        });
      };
    },
    8175: function (e, t, a) {
      "use strict";
      a.d(t, {
        Tf: function () {
          return d;
        },
      });
      var r = Object.defineProperty,
        n = Object.getOwnPropertySymbols,
        i = Object.prototype.hasOwnProperty,
        o = Object.prototype.propertyIsEnumerable,
        l = (e, t, a) =>
          t in e
            ? r(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        s = (e, t) => {
          for (var a in t || (t = {})) i.call(t, a) && l(e, a, t[a]);
          if (n) for (var a of n(t)) o.call(t, a) && l(e, a, t[a]);
          return e;
        };
      const c = {
          light: {
            colors: {
              pie_buy_medium: "#62A7FF",
              pie_buy_small: "#93C2FF",
              pie_sell_medium: "#EC7871",
              pie_sell_small: "#FCB3B0",
              pie_shadow: "rgba(190, 193, 198, 0.25)",
              usdt_premium: "#48B888",
              graph_second_area_color: "#62A7FF",
              graph_second_area_start: "rgba(98, 167, 255, 0.15)",
              graph_second_area_end: "rgba(98, 167, 255, 0.05)",
              gnb_shadow: "rgba(0, 0, 0, 0.2)",
              gnb_text_sub: "rgba(255, 255, 255, 0.6)",
              recurring_buy_slot_border: "rgba(0, 0, 0, 0.1)",
              recurring_buy_coinlist_skeleton_boxshadow: "rgba(0, 0, 0, 0.05)",
              gnb_icon_detail_background: "#1A2434",
              lending_gradient_start: "#E7F2FF",
              lending_main_skeleton_pc_bg: "#E7F0F8",
              lending_main_skeleton_mobile_bg: "#EDEEF1",
            },
          },
          dark: {
            colors: {
              pie_buy_medium: "#62A7FF",
              pie_buy_small: "#93C2FF",
              pie_sell_medium: "#EC7871",
              pie_sell_small: "#FCB3B0",
              pie_shadow: "rgba(0, 0, 0, 0.25)",
              usdt_premium: "#F6931B",
              graph_second_area_color: "#62A7FF",
              graph_second_area_start: "rgba(98, 167, 255, 0.15)",
              graph_second_area_end: "rgba(98, 167, 255, 0.05)",
              gnb_shadow: "rgba(0, 0, 0, 0.2)",
              gnb_text_sub: "rgba(255, 255, 255, 0.6)",
              recurring_buy_slot_border: "rgba(0, 0, 0, 0.1)",
              recurring_buy_coinlist_skeleton_boxshadow: "rgba(0, 0, 0, 0.05)",
              gnb_icon_detail_background: "#1A2434",
              lending_gradient_start: "#0B1D37",
              lending_main_skeleton_pc_bg: "#071423",
              lending_main_skeleton_mobile_bg: "#04111E",
            },
          },
        },
        d = (e) =>
          Object.entries(c[e.mode])
            .flatMap(([e, t]) =>
              Object.entries(t).map(([t, a]) => ({ [`--unsafe-${e}-${t}`]: a }))
            )
            .reduce((e, t) => s(s({}, e), t), {});
      t.Ay = {
        colors: {
          pie_buy_medium: "var(--unsafe-colors-pie_buy_medium)",
          pie_buy_small: "var(--unsafe-colors-pie_buy_small)",
          pie_sell_medium: "var(--unsafe-colors-pie_sell_medium)",
          pie_sell_small: "var(--unsafe-colors-pie_sell_small)",
          pie_shadow: "var(--unsafe-colors-pie_shadow)",
          usdt_premium: "var(--unsafe-colors-usdt_premium)",
          graph_second_area_color:
            "var(--unsafe-colors-graph_second_area_color)",
          graph_second_area_start:
            "var(--unsafe-colors-graph_second_area_start)",
          graph_second_area_end: "var(--unsafe-colors-graph_second_area_end)",
          gnb_shadow: "var(--unsafe-colors-gnb_shadow)",
          gnb_text_sub: "var(--unsafe-colors-gnb_text_sub)",
          recurring_buy_slot_border:
            "var(--unsafe-colors-recurring_buy_slot_border)",
          recurring_buy_coinlist_skeleton_boxshadow:
            "var(--unsafe-colors-recurring_buy_coinlist_skeleton_boxshadow)",
          gnb_icon_detail_background:
            "var(--unsafe-colors-gnb_icon_detail_background)",
          lending_gradient_start: "var(--unsafe-colors-lending_gradient_start)",
          lending_main_skeleton_pc_bg:
            "var(--unsafe-colors-lending_main_skeleton_pc_bg)",
          lending_main_skeleton_mobile_bg:
            "var(--unsafe-colors-lending_main_skeleton_mobile_bg)",
        },
      };
    },
    45938: function (e, t, a) {
      "use strict";
      a.d(t, {
        YE: function () {
          return d;
        },
        c_: function () {
          return l;
        },
        eG: function () {
          return s;
        },
        et: function () {
          return c;
        },
      });
      var r = a(34885),
        n = a(12290),
        i = a(82078),
        o = a(23123);
      const l = ({ utm_content: e, path: t = "" }) =>
          i.stringifyUrl({
            url: o.HF + t,
            query: { utm_source: "upbit", utm_medium: "web", utm_content: e },
          }),
        s = (e) => {
          const t = (0, r.A)(e.candleDateTime);
          return {
            todayDate: t.toISOString().slice(0, 10),
            prevDate: (0, n.A)(t, 1).toISOString().slice(0, 10),
          };
        },
        c = (e) => {
          switch (e) {
            case "RISE":
              return "market_contents_up";
            case "FALL":
              return "market_contents_down";
            default:
              return "contents_1";
          }
        },
        d = (e) => {
          switch (e) {
            case "RISE":
              return "N_triangle_up_12";
            case "FALL":
              return "N_triangle_down_12";
            default:
              return null;
          }
        };
    },
    62486: function (e, t, a) {
      "use strict";
      function r(e) {
        return null != e && void 0 !== e;
      }
      a.d(t, {
        P: function () {
          return r;
        },
      });
    },
    92186: function (e, t, a) {
      "use strict";
      var r = a(14047),
        n = a(5980),
        i = a(56177),
        o = a(79150);
      t.A = ({ market: e } = {}) => {
        var t, a;
        const l = (0, r.G)(o.BQ),
          s = (0, r.G)(i.KY),
          { data: c } = (0, n.$2)(void 0, {
            skip: !l || "kr" !== s,
            refetchOnMountOrArgChange: 3600,
          }),
          d =
            (null == (t = null == c ? void 0 : c.payload)
              ? void 0
              : t.baseTradeFeeConditions) || [];
        return {
          isBadgeVisible:
            null == (a = null == c ? void 0 : c.payload)
              ? void 0
              : a.isBadgeVisible,
          baseTradeFeeConditions: d,
        };
      };
    },
    88113: function (e, t, a) {
      "use strict";
      a.d(t, {
        K: function () {
          return u;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(2481),
        o = Object.defineProperty,
        l = Object.getOwnPropertySymbols,
        s = Object.prototype.hasOwnProperty,
        c = Object.prototype.propertyIsEnumerable,
        d = (e, t, a) =>
          t in e
            ? o(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a);
      const u = (e) => {
        const { closePopup: t, onConfirm: a, body: o } = e || {},
          u = "string" == typeof o ? (0, r.Y)(i.m2, { text: o }) : o,
          m = (0, n.useCallback)(
            (e) => {
              null == e || e.stopPropagation(),
                null == e || e.preventDefault(),
                null == a || a(),
                null == t || t();
            },
            [a, t]
          ),
          h = (0, n.useCallback)(
            (a) => {
              var r;
              "confirm" === (null == e ? void 0 : e.variant) &&
                (null == a || a.stopPropagation(),
                null == a || a.preventDefault(),
                null == (r = e.onCancel) || r.call(e),
                null == t || t());
            },
            [e, t]
          );
        return ((e, t) => {
          for (var a in t || (t = {})) s.call(t, a) && d(e, a, t[a]);
          if (l) for (var a of l(t)) c.call(t, a) && d(e, a, t[a]);
          return e;
        })(
          { bodyComponent: u, handleConfirm: m },
          "confirm" === (null == e ? void 0 : e.variant)
            ? { handleCancel: h }
            : {}
        );
      };
    },
    41168: function (e, t, a) {
      "use strict";
      a.d(t, {
        x: function () {
          return n;
        },
      });
      var r = a(79474);
      const n = (e) => {
        const [t, a] = (0, r.useState)(),
          [n, i] = (0, r.useState)(),
          {
            closePopup: o,
            onConfirm: l,
            body: s,
            title: c,
            confirmBtn: d,
            variant: u,
          } = e || {};
        return (
          (0, r.useEffect)(() => {
            if ("basic" === (null == e ? void 0 : e.variant))
              a({
                setPayload: () => {
                  null == o || o();
                },
                title: c,
                body: s,
                closeBtn: d,
                onClose: () => {
                  null == l || l(), null == o || o();
                },
              });
            else if ("confirm" === (null == e ? void 0 : e.variant)) {
              const { onCancel: t, cancelBtn: a } = e;
              i({
                setPayload: () => {
                  null == o || o();
                },
                title: c,
                body: s,
                cancelBtn: a,
                onConfirm: () => {
                  null == l || l(), null == o || o();
                },
                onCancel: () => {
                  null == t || t(), null == o || o();
                },
              });
            }
          }, [s, o, d, l, e, c, u]),
          { basicPayload: t, confirmPayload: n }
        );
      };
    },
    7042: function (e, t, a) {
      "use strict";
      a.d(t, {
        d: function () {
          return l;
        },
      });
      var r = a(79474),
        n = a(64093),
        i = a(93674),
        o = a(95536);
      const l = ({ onPressEnter: e, onPressEscape: t, payload: a }) => {
        const [l, s] = (0, r.useState)(o.M);
        (0, n.A)({
          pushCondition: !0,
          callback: () => {
            null == t || t(void 0);
          },
        }),
          (0, r.useEffect)(() => {
            s((0, o.L)());
          }, [a]);
        const c = (0, r.useCallback)(
            (a) => {
              "Enter" === a.key
                ? null == e || e(a)
                : "Escape" === a.key && (null == t || t(a));
            },
            [e, t]
          ),
          d = (0, r.useMemo)(() => ["Escape", "Enter"], []);
        return (0, i.x)(!0, c, l, d), { zIndex: l };
      };
    },
    44796: function (e, t, a) {
      "use strict";
      var r = a(79474),
        n = (a(2361), a(48110));
      t.A = () => {
        const e = !0,
          [t, a] = (0, r.useState)(e);
        return (
          (0, n.n)({
            targets: ["sandbox"],
            src: "https://cdn.upbit.com/js/vconsole@3.15.1.min.js",
            integrity:
              "sha384-XBaXkO24GFHDdwfHdBF1YzWHG0GTdozumNQq/LXxfFP5Lgzhdx0INxn9BH+UyaR2",
            onLoadEnd: () => {
              (null == window ? void 0 : window.VConsole) &&
                new window.VConsole(),
                a(!0);
            },
            skip: e,
          }),
          { isLoaded: t }
        );
      };
    },
    80747: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return g;
        },
      });
      var r = a(86284),
        n = a.n(r),
        i = a(86264);
      var o = (0, i.unflatten)({
        "unsupportedCountriesPopup.title": "Unsupported Countries",
        "unsupportedCountriesPopup.desc1":
          "In order to be compliant with the international regulatory standards, there are a number of countries whose residents cannot register with us.",
        "unsupportedCountriesPopup.desc2":
          "The details of the Sanctions & Warning listings can be found on the below links.",
        "unsupportedCountriesPopup.dotList1":
          "Treasury Department’s Office of Foreign Asset Control (OFAC)",
        "unsupportedCountriesPopup.dotList2":
          "The Financial Action Task Force (FATF)",
        "unsupportedCountriesPopup.desc3":
          "In addition to the above listings, we are unable to provide any services to residing customers from the United States of America. This is due to the complexity of the country’s regulatory environment.",
      });
      var l = (0, i.unflatten)({
        "unsupportedCountriesPopup.title": "Negara yang Tidak Didukung",
        "unsupportedCountriesPopup.desc1":
          "Agar sesuai dengan standar peraturan internasional, ada sejumlah negara yang penghuninya tidak dapat mendaftar dengan kami.",
        "unsupportedCountriesPopup.desc2":
          "Rincian daftar sanksi & peringatan dapat ditemukan pada tautan di bawah ini:",
        "unsupportedCountriesPopup.dotList1":
          "Departemen Pengawasan Aset Luar Negeri (OFAC) Departemen Keuangan",
        "unsupportedCountriesPopup.dotList2":
          "The Financial Action Task Force (FATF)",
        "unsupportedCountriesPopup.desc3":
          "Sebagai tambahan untuk daftar di atas, kami tidak dapat menyediakan layanan apa pun untuk pelanggan yang tinggal di Amerika Serikat Ini disebabkan oleh kompleksitas lingkungan peraturan negara tersebut.",
      });
      var s = (0, i.unflatten)({
        "unsupportedCountriesPopup.desc1":
          "In compliance with international regulatory standards, there are a number of countries whose residents are prohibited from registering with Upbit Indonesia.",
        "unsupportedCountriesPopup.desc3":
          "In addition to the above lists, Upbit Indonesia. is unable to provide services to citizens or residents of the U.S. (United States). This is due to the complexity of the country's regulatory environment.",
      });
      var c = (0, i.unflatten)({
        "unsupportedCountriesPopup.desc1":
          "Sesuai dengan standar peraturan internasional, terdapat sejumlah negara yang warganya dilarang mendaftar di Upbit Indonesia.",
        "unsupportedCountriesPopup.desc3":
          "Selain daftar di atas, Upbit Indonesia tidak dapat menyediakan layanan untuk warga negara atau penduduk AS (Amerika Serikat). Hal ini dikarenakan kompleksitas lingkungan regulasi di negara tersebut.",
      });
      var d = (0, i.unflatten)({});
      var u = (0, i.unflatten)({
        "unsupportedCountriesPopup.desc1":
          "In compliance with international regulatory standards, there are a number of countries whose residents are prohibited from registering with Upbit Singapore Pte. Ltd.",
        "unsupportedCountriesPopup.desc3":
          "In addition to the above lists, Upbit Singapore Pte. Ltd. is unable to provide services to citizens or residents of the U.S. (United States). This is due to the complexity of the country's regulatory environment.",
      });
      var m = (0, i.unflatten)({
        "unsupportedCountriesPopup.title": "ประเทศที่ไม่รองรับ",
        "unsupportedCountriesPopup.desc2":
          "สามารถอ่านรายละเอียดของข้อบังคับตามกฎหมายและคำเตือนได้ที่ลิงก์ด้านล่าง",
      });
      var h = (0, i.unflatten)({
        "unsupportedCountriesPopup.desc1":
          "In compliance with international regulatory standards, there are a number of countries whose residents are prohibited from registering with Upbit Exchange (Thailand) Co., Ltd.",
        "unsupportedCountriesPopup.desc3":
          "In addition to the above lists, Upbit Exchange (Thailand) Co., Ltd. is unable to provide services to citizens or residents of the U.S. (United States). This is due to the complexity of the country's regulatory environment.",
      });
      var p = (0, i.unflatten)({
          "unsupportedCountriesPopup.desc1":
            "เพื่อให้เป็นไปตามมาตรฐานการกำกับดูแลระหว่างประเทศ ผู้ที่พำนักอาศัยในบางประเทศจะไม่สามารถลงทะเบียนกับเราได้",
          "unsupportedCountriesPopup.desc3":
            "นอกจากรายการที่กล่าวถึงข้างต้นแล้ว บริษัท อัพบิต เอ็กซ์เชนจ์ (ประเทศไทย) จำกัด ไม่สามารถให้บริการแก่พลเมืองหรือผู้ที่มีถิ่นที่อยู่ในสหรัฐอเมริกา (U.S.) ได้ เนื่องจากความซับซ้อนด้านกฎระเบียบของประเทศนั้น",
        }),
        g = (e) => ({
          en: n()(o, { sg: u, id: s, th: h }[e]),
          id: n()(l, { id: c }[e]),
          ko: d,
          th: n()(m, { th: p }[e]),
        });
    },
    53896: function (e, t, a) {
      "use strict";
      a.d(t, {
        Y8: function () {
          return n;
        },
        ql: function () {
          return i;
        },
      });
      var r = a(71597);
      n();
      function n() {
        return {
          quoteFeed: null,
          quoteFeedBehavior: { refreshInterval: 1, bufferSize: 1440 },
          marketFactory: r.CIQ.Market.Symbology.factory,
          chartConfig: {
            preferences: { labels: !1, currentPriceLine: !0, whitespace: 0 },
            dontRoll: !0,
          },
          header: !0,
          footer: !1,
          breakpoints: [584, 700],
          breakpointSymbolPlaceholders: ["", "Symbol", "Enter Symbol"],
          headerLeft: { symbolLookup: !1, toggles: ["drawing", "crosshair"] },
          defaultSymbol: "CRIX.UPBIT.KRW-BTC",
          symbolLookupTabs: ["ALL"],
          headsUpDisplayTypes: ["static"],
          menus: ["menuPeriodicity", "menuDisplay", "menuStudies"],
          menuPeriodicity: [
            { label: "1 Sec", periodicity: 1, interval: 1, timeUnit: "second" },
            { type: "separator" },
            { label: "1 Min", periodicity: 1, interval: 1, timeUnit: "minute" },
            { label: "3 Min", periodicity: 1, interval: 3, timeUnit: "minute" },
            { label: "5 Min", periodicity: 1, interval: 5, timeUnit: "minute" },
            {
              label: "10 Min",
              periodicity: 1,
              interval: 10,
              timeUnit: "minute",
            },
            {
              label: "15 Min",
              periodicity: 1,
              interval: 15,
              timeUnit: "minute",
            },
            {
              label: "30 Min",
              periodicity: 1,
              interval: 30,
              timeUnit: "minute",
            },
            { type: "seperator" },
            {
              label: "1 Hour",
              periodicity: 1,
              interval: 60,
              timeUnit: "minute",
            },
            {
              label: "4 Hour",
              periodicity: 4,
              interval: 60,
              timeUnit: "minute",
            },
            { type: "seperator" },
            { label: "1 D", periodicity: 1, timeUnit: "day" },
            { label: "1 W", periodicity: 1, timeUnit: "week" },
            { label: "1 Mo", periodicity: 1, timeUnit: "month" },
            { label: "1Y", periodicity: 12, interval: 1, timeUnit: "month" },
          ],
          menuViews: null,
          menuDisplay: [
            { label: "Chart Style", type: "heading" },
            {
              label: "Candle",
              action: "Layout.ChartType('candle')",
              type: "radio",
            },
            { label: "Bar", action: "Layout.ChartType('bar')", type: "radio" },
            {
              label: "Colored Bar",
              action: "Layout.ChartType('colored_bar')",
              type: "radio",
            },
            {
              label: "Line",
              action: "Layout.ChartType('line')",
              type: "radio",
            },
            {
              label: "Hollow Candle",
              action: "Layout.ChartType('hollow_candle')",
              type: "radio",
            },
            {
              label: "Mountain",
              action: "Layout.ChartType('mountain')",
              type: "radio",
            },
            {
              label: "Baseline",
              action: "Layout.ChartType('baseline_delta')",
              type: "radio",
            },
            {
              label: "Volume Candle",
              action: "Layout.ChartType('volume_candle')",
              type: "radio",
            },
            { type: "separator" },
            {
              label: "Heikin Ashi",
              action: "Layout.ChartType('heikinashi')",
              type: "radio",
            },
            {
              label: "Kagi",
              option: "Layout.showAggregationEdit('kagi')",
              action: "Layout.ChartType('kagi')",
              type: "radio",
            },
            {
              label: "Line Break",
              action: "Layout.ChartType('linebreak')",
              option: "Layout.showAggregationEdit('linebreak')",
              type: "radio",
            },
            {
              label: "Renko",
              action: "Layout.ChartType('renko')",
              option: "Layout.showAggregationEdit('renko')",
              type: "radio",
            },
            {
              label: "Range Bars",
              action: "Layout.ChartType('rangebars')",
              option: "Layout.showAggregationEdit('rangebars')",
              type: "radio",
            },
            { type: "separator" },
            { label: "Chart Preferences", type: "heading" },
            {
              label: "Log Scale",
              action: "Layout.ChartScale('log')",
              type: "checkbox",
            },
            {
              label: "Invert Y-Axis",
              action: "Layout.FlippedChart()",
              type: "checkbox",
            },
            {
              label: "Range Selector",
              action: "Layout.RangeSlider()",
              type: "checkbox",
              required: "RangeSlider",
            },
            {
              label: "Market Depth",
              action: "Layout.MarketDepth()",
              type: "checkbox",
              required: "cryptoiq",
            },
            {
              label: "L2 Heat Map",
              action: "Layout.L2Heatmap()",
              type: "checkbox",
              required: "cryptoiq",
            },
            { type: "separator" },
            { label: "Locale", type: "heading" },
            { label: "Change Timezone", type: "timezone" },
            { type: "separator" },
            { label: "Themes", type: "heading" },
            { label: "New Theme", type: "themes" },
          ],
          menuStudies: {
            includeOnly: [],
            exclude: ["Performance Index", "Beta", "Price Relative"],
          },
          menuEvents: [
            { label: "Simple Square", markertype: "square" },
            { label: "Simple Circle", markertype: "circle" },
            { label: "Callouts", markertype: "callout" },
            {
              label: "Trade",
              markertype: "trade",
              required: "showTradeAnalytics",
              load: [
                "chartiq/examples/markers/tradeAnalyticsSample",
                "chartiq/examples/markers/tradeAnalyticsSample.css",
              ],
            },
            {
              label: "Video",
              markertype: "video",
              required: "showVideoMarkers",
              load: [
                "chartiq/examples/markers/videoSample.js",
                "chartiq/examples/markers/videoSample.css",
              ],
            },
            { label: "Abstract", markertype: "abstract" },
            { type: "separator" },
            { label: "None", markertype: "none" },
          ],
          footerShare: !1,
          footerRange: [
            { label: "1D", multiplier: 1, base: "today", available: "always" },
            {
              label: "5D",
              multiplier: 5,
              base: "day",
              interval: 30,
              period: 2,
              timeUnit: "minute",
              available: "always",
            },
            {
              label: "1M",
              multiplier: 1,
              base: "month",
              interval: 30,
              period: 8,
              timeUnit: "minute",
              available: "always",
            },
            { label: "3M", multiplier: 3, base: "month" },
            { label: "6M", multiplier: 6, base: "month" },
            { label: "YTD", multiplier: 1, base: "YTD" },
            { label: "1Y", multiplier: 1, base: "year", available: "always" },
            {
              label: "5Y",
              multiplier: 5,
              base: "year",
              interval: 1,
              period: 1,
              timeUnit: "week",
            },
            { label: "All", multiplier: 1, base: "all" },
          ],
          drawingTools: [
            {
              tool: "annotation",
              group: "text",
              label: "Annotation",
              shortcut: "t",
            },
            { tool: "callout", group: "text", label: "Callout" },
            { tool: "average", group: "statistics", label: "Average Line" },
            { tool: "channel", group: "lines", label: "Channel" },
            { tool: "continuous", group: "lines", label: "Continuous" },
            { tool: "crossline", group: "lines", label: "Crossline" },
            { tool: "freeform", group: "lines", label: "Doodle" },
            { tool: "elliottwave", group: "technicals", label: "Elliott Wave" },
            {
              tool: "ellipse",
              group: "markings",
              label: "Ellipse",
              shortcut: "e",
            },
            {
              tool: "retracement",
              group: "fibonacci",
              label: "Fib Retracement",
            },
            {
              tool: "fibprojection",
              group: "fibonacci",
              label: "Fib Projection",
            },
            { tool: "fibarc", group: "fibonacci", label: "Fib Arc" },
            { tool: "fibfan", group: "fibonacci", label: "Fib Fan" },
            { tool: "fibtimezone", group: "fibonacci", label: "Fib Time Zone" },
            { tool: "gannfan", group: "technicals", label: "Gann Fan" },
            { tool: "gartley", group: "technicals", label: "Gartley" },
            {
              tool: "horizontal",
              group: "lines",
              label: "Horizontal",
              shortcut: "h",
            },
            { tool: "line", group: "line", label: "Line", shortcut: "l" },
            { tool: "pitchfork", group: "technicals", label: "Pitchfork" },
            { tool: "quadrant", group: "statistics", label: "Quadrant Lines" },
            { tool: "ray", group: "lines", label: "Ray" },
            {
              tool: "rectangle",
              group: "markings",
              label: "Rectangle",
              shortcut: "r",
            },
            {
              tool: "regression",
              group: "statistics",
              label: "Regression Line",
            },
            { tool: "segment", group: "lines", label: "Segment" },
            { tool: "arrow", group: "markings", label: "Arrow", shortcut: "a" },
            { tool: "check", group: "markings", label: "Check" },
            { tool: "xcross", group: "markings", label: "Cross" },
            { tool: "focusarrow", group: "markings", label: "Focus" },
            { tool: "heart", group: "markings", label: "Heart" },
            { tool: "star", group: "markings", label: "Star" },
            {
              tool: "speedarc",
              group: "technicals",
              label: "Speed Resistance Arc",
            },
            {
              tool: "speedline",
              group: "technicals",
              label: "Speed Resistance Line",
            },
            { tool: "timecycle", group: "technicals", label: "Time Cycle" },
            { tool: "tirone", group: "statistics", label: "Tirone Levels" },
            { tool: "trendline", group: "text", label: "Trend Line" },
            {
              tool: "vertical",
              group: "lines",
              label: "Vertical",
              shortcut: "v",
            },
          ],
          drawingToolGrouping: [
            "All",
            "Favorites",
            "Text",
            "Statistics",
            "Technicals",
            "Fibonacci",
            "Markings",
            "Lines",
          ],
          drawingFontSizes: [8, 10, 12, 13, 14, 16, 18, 20, 28, 36, 48, 64],
          drawingFonts: [
            "Default",
            "Helvetica",
            "Courier",
            "Garamond",
            "Palatino",
            "Times New Roman",
          ],
          addOns: {
            inactivityTimer: { minutes: 30 },
            rangeSlider: {},
            animation: {
              animationParameters: { tension: 0.3, granularity: 1e8 },
            },
            continuousZoom: null,
          },
          plugins: { tfc: !1, scriptIQ: !1, timeSpanEvents: !1, cryptoiq: !1 },
          marketDepth: null,
        };
      }
      function i() {
        const e = n();
        return (e.header = !1), e;
      }
    },
    62552: function (e, t, a) {
      "use strict";
      a.d(t, {
        u: function () {
          return r;
        },
      });
      const r = a(79474).createContext({});
    },
    54320: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474),
        i = a(39169),
        o = a(98731),
        l = a(98742),
        s = a(29321),
        c = a(29250),
        d = a.n(c),
        u = a(6448),
        m = a(61895),
        h = a(79055),
        p = a(61760),
        g = a(67546),
        C = a(74789),
        T = Object.defineProperty,
        b = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? T(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class f extends n.PureComponent {
        constructor() {
          super(...arguments),
            b(this, "interval"),
            b(this, "crixCandlesLines", () => {
              this.props.fetchCrixCandlesLines(this.props.code);
            });
        }
        componentDidMount() {
          this.props.fetchCrixCandlesLines(this.props.code),
            (this.interval = setInterval(this.crixCandlesLines, 6e4));
        }
        componentDidUpdate(e) {
          this.props.code !== e.code &&
            this.props.fetchCrixCandlesLines(this.props.code);
        }
        componentWillUnmount() {
          clearInterval(this.interval);
        }
        render() {
          const { chartData: e, name: t } = this.props;
          if (!e || !e.businessTime) return null;
          const a = e.unit || 5,
            n = [];
          let c = null;
          d()(e.candles, (t) => {
            if (c) {
              let r = (0, l.A)(
                  (0, g.cQ)(c.candleDateTime),
                  (0, g.cQ)(t.candleDateTime)
                ),
                o = 1;
              for (; a < r; )
                n.push([
                  (0, s.A)(
                    (0, i.A)((0, g.cQ)(c.candleDateTime), -1 * a * o),
                    "yyyy-MM-dd'T'HH:mm:ss.SSSX"
                  ),
                  c.tradePrice - e.prevClosingPrice,
                ]),
                  o++,
                  (r -= a);
              n.push([t.candleDateTime, t.tradePrice - e.prevClosingPrice]),
                (c = t);
            } else
              n.push([t.candleDateTime, t.tradePrice - e.prevClosingPrice]),
                (c = t);
          });
          const u =
            (0, o.A)(
              (0, g.cQ)(`1970-01-01T${e.businessTime.closing}`),
              (0, g.cQ)(`1970-01-01T${e.businessTime.opening}`)
            ) /
            1e3 /
            60 /
            a;
          return (0, r.Y)(p.Ay, {
            xMax: u,
            yMin: null,
            yMax: null,
            chartData: n,
            crixLocalName: t,
            style: this.props.style,
          });
        }
      }
      const y = (0, m.createSelector)([C.u2], (e) => ({ chartData: e }));
      t.A = (0, u.Ng)(y, { fetchCrixCandlesLines: h.MA })(f);
    },
    47108: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474),
        i = a(69889),
        o = a(13409),
        l = a(6448),
        s = a(86530),
        c = a(29289),
        d = a(60883),
        u = a(14047),
        m = a(60616),
        h = a(48406);
      t.A = () => {
        const e = (0, l.wA)(),
          t = (0, u.j)(),
          { t: a } = (0, o.B)("global"),
          [p, g] = (0, n.useState)(),
          [C, T] = (0, n.useState)(),
          { data: b } = (0, m.BB)(),
          f = null == b ? void 0 : b.payload,
          y = (0, n.useCallback)(() => {
            t((0, s.sB)())
              .unwrap()
              .then((e) => {
                e.error || g(null);
              });
          }, [t]),
          v = (0, n.useCallback)(() => {
            T(null), e((0, i.VC)(h.pjK));
          }, [e]),
          S = (0, n.useCallback)(() => {
            const e = {
              onConfirm: y,
              onCancel: () => {
                g(null),
                  T({
                    closePopup: () => {
                      T(null);
                    },
                    variant: "confirm",
                    title: `${a("ui.notification")}!`,
                    body: a("balances.riskPopup.subPopupBody"),
                    confirmBtn: a("balances.riskPopup.viewWarning"),
                    cancelBtn: a("ui.closeButton"),
                    onConfirm: () => {
                      T(null), g(e);
                    },
                    onCancel: v,
                  });
              },
            };
            g(e);
          }, [y, v, a]);
        return (
          (0, n.useEffect)(() => {
            t((0, s.W2)())
              .unwrap()
              .then((e) => {
                var t, a;
                if (e && !e.error) {
                  const r =
                    null ==
                    (a =
                      null == (t = null == e ? void 0 : e.payload)
                        ? void 0
                        : t.user)
                      ? void 0
                      : a.suitabilityRiskConfirmation;
                  1 !== (null == f ? void 0 : f.suitabilityTestGrade) ||
                    r ||
                    S();
                }
              });
          }, [S, f, t]),
          (0, r.FD)(r.FK, {
            children: [
              (0, r.Y)(d.A, { payload: p }),
              (0, r.Y)(c.A, { payload: C }),
            ],
          })
        );
      };
    },
    31681: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474),
        i = a(2481),
        o = a(97266),
        l = a.n(o),
        s = a(98712),
        c = a.n(s),
        d = a(93312),
        u = a.n(d),
        m = a(27317),
        h = Object.defineProperty,
        p = Object.defineProperties,
        g = Object.getOwnPropertyDescriptors,
        C = Object.getOwnPropertySymbols,
        T = Object.prototype.hasOwnProperty,
        b = Object.prototype.propertyIsEnumerable,
        f = (e, t, a) =>
          t in e
            ? h(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        y = (e, t) => {
          for (var a in t || (t = {})) T.call(t, a) && f(e, a, t[a]);
          if (C) for (var a of C(t)) b.call(t, a) && f(e, a, t[a]);
          return e;
        },
        v = (e, t) => p(e, g(t));
      const S = {};
      t.A = (e) => {
        const { master: t, code: a, currency: o, style: s, type: d } = e,
          h =
            o ||
            (t
              ? t.baseCurrencyCode
              : a
              ? l()(u()(l()(u()(a, ".")), "-"))
              : "BTC"),
          p = c()(`${m.ob}/${h}.png`, "'", "\\'"),
          [g, C] = (0, n.useState)(!S[p]);
        return (
          (0, n.useEffect)(() => {
            if (S[p]);
            else {
              const e = new Image();
              (e.src = p),
                (e.onload = () => {
                  C(!1), (S[p] = !0);
                });
            }
          }, [p]),
          t || a || o
            ? "AmountTable__logo" === d
              ? (0, r.Y)("div", {
                  className: "AmountTable__logo",
                  style: v(y({}, s), {
                    background: `url(${p}) no-repeat 0 0/cover`,
                  }),
                  children:
                    g &&
                    (0, r.Y)(i.EA, {
                      className: "logo",
                      width: "26px",
                      height: "26px",
                    }),
                })
              : "event" === d
              ? (0, r.Y)("span", {
                  className: "eventAirDropDesc__coinLogo",
                  children: (0, r.Y)("img", { src: p, alt: "" }),
                })
              : (0, r.Y)(r.FK, {
                  children: (0, r.Y)("em", {
                    className: "logo",
                    style: v(y({}, s), {
                      background: `url(${p}) no-repeat 0 0/cover`,
                    }),
                    children:
                      g &&
                      (0, r.Y)(i.EA, {
                        className: "logo",
                        width: "26px",
                        height: "26px",
                      }),
                  }),
                })
            : null
        );
      };
    },
    80232: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474),
        i = a(62205),
        o = a(61895),
        l = a(6448),
        s = a(49876),
        c = a(50310),
        d = a(56177);
      class u extends n.PureComponent {
        render() {
          const {
            price: e,
            master: t,
            estimateBaseCurrency: a,
            viewType: n,
            locale: o,
            decimalPlace: l,
          } = this.props;
          if ((!e && 0 !== e) || !t || !n) return null;
          if (t.quoteCurrencyCode === a) return null;
          const c = (0, r.Y)(s.Ay, {
            price: e,
            master: t,
            locale: o,
            decimalPlace: l,
          });
          switch (n) {
            case "PI":
              return (0, r.FD)("p", {
                children: [c, " ", (0, r.Y)("i", { children: a })],
              });
            case "PI_PRICE":
              return (0, r.FD)("p", {
                className: "price",
                children: [c, " ", (0, r.Y)("i", { children: a })],
              });
            case "STRONG_I":
              return (0, r.FD)("strong", {
                className: "num",
                children: [c, " ", (0, r.Y)("i", { children: a })],
              });
            case "EMI":
              return (0, r.FD)("em", {
                children: [c, " ", (0, r.Y)("i", { children: a })],
              });
            case "M":
              return (0, r.Y)("p", { className: "txt", children: c });
            case "M_ORDERBOOK":
              return (0, r.FD)("p", {
                className: "txt",
                children: [c, " ", a],
              });
            case "M_EM":
              return (0, r.FD)("em", { children: [c, " ", a] });
            case "ORDER":
              return (0, r.FD)("span", {
                className: "subPrice",
                children: ["≈ ", c, " ", (0, r.Y)("i", { children: a })],
              });
            case "USD_PRICE":
              return (0, r.FD)("em", {
                css: i.AH`
              line-height: 16px;
              color: #666666;
            `,
                children: ["$", c],
              });
            default:
              return null;
          }
        }
      }
      const m = (0, o.createSelector)([c.y, d.G3], (e, t) => ({
          estimateBaseCurrency: e,
          locale: t,
        })),
        h = (0, l.Ng)(m, {});
      t.h = h(u);
    },
    7180: function (e, t, a) {
      "use strict";
      a.d(t, {
        k5: function () {
          return Ua;
        },
        dx: function () {
          return Aa;
        },
        M3: function () {
          return Ba;
        },
        Ay: function () {
          return Ea;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(61895),
        o = a(97500),
        l = a.n(o),
        s = a(69889),
        c = a(57960),
        d = a.n(c),
        u = a(67194),
        m = a.n(u),
        h = a(93312),
        p = a.n(h),
        g = a(68382),
        C = a.n(g),
        T = a(87168),
        b = a.n(T),
        f = a(52604),
        y = a(6448),
        v = a(25280),
        S = a(80460),
        k = a(86530),
        P = a(1467),
        w = a(35375),
        A = a(16510),
        U = a(39699),
        M = a(42152),
        D = a(96507),
        x = a(7510),
        O = a(12361),
        I = a(79775),
        B = a(40156),
        E = a(67201),
        R = a(98287),
        L = a(859),
        F = a.n(L),
        N = a(29250),
        V = a.n(N),
        z = a(4633),
        q = a.n(z),
        H = a(57468),
        _ = a.n(H),
        Y = a(13409),
        j = a(6296),
        K = a(29289),
        W = a(27039),
        G = a(9716),
        Q = a(90372),
        Z = a.n(Q),
        J = a(95915),
        X = a.n(J),
        $ = a(66086),
        ee = a.n($),
        te = a(6872),
        ae = a.n(te),
        re = a(67546),
        ne = a(78571),
        ie = Object.defineProperty,
        oe = Object.getOwnPropertySymbols,
        le = Object.prototype.hasOwnProperty,
        se = Object.prototype.propertyIsEnumerable,
        ce = (e, t, a) =>
          t in e
            ? ie(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        de = (e, t, a) => (ce(e, "symbol" != typeof t ? t + "" : t, a), a),
        ue = (e, t, a) =>
          new Promise((r, n) => {
            var i = (e) => {
                try {
                  l(a.next(e));
                } catch (e) {
                  n(e);
                }
              },
              o = (e) => {
                try {
                  l(a.throw(e));
                } catch (e) {
                  n(e);
                }
              },
              l = (e) =>
                e.done ? r(e.value) : Promise.resolve(e.value).then(i, o);
            l((a = a.apply(e, t)).next());
          });
      const me = F()("tv:history");
      const he = new (class {
        constructor() {
          de(this, "lastCandle"),
            de(this, "symbolName"),
            de(this, "_limitedServerResponse"),
            (this.lastCandle = null),
            (this.symbolName = ""),
            (this._limitedServerResponse = {
              maxResponseLength: 1e3,
              expectedOrder: "latestFirst",
            });
        }
      })();
      function pe(e) {
        return ue(this, null, function* () {
          const {
              datafeedUrl: t,
              symbol: a,
              resolution: r,
              periodParams: n,
            } = e,
            { from: i, to: o, firstDataRequest: l, countBack: s } = n;
          return (yield (0,
          ne.WL)({ method: "get", url: `${t}/history`, params: { symbol: a, resolution: r, to: o, countback: s } })).body;
        });
      }
      function ge({ data: e, firstDataRequest: t = !1 }) {
        if ("err" === e.s) throw new Error(e.errmsg);
        const a = [],
          r = {};
        if ("no_data" === e.s)
          (r.noData = !0),
            (r.nextTime = e.nextTime ? e.nextTime / re.Z2 : void 0);
        else {
          const r = void 0 !== e.v,
            n = void 0 !== e.o;
          for (let t = 0; t < e.t.length; ++t) {
            const i = {
              time: e.t[t],
              originTimestamp: e.t[t],
              close: Number(e.c[t]),
              open: Number(e.c[t]),
              high: Number(e.c[t]),
              low: Number(e.c[t]),
              volume: void 0,
            };
            n &&
              ((i.open = Number(e.o[t])),
              (i.high = Number(e.h[t])),
              (i.low = Number(e.l[t]))),
              r && (i.volume = Number(e.v[t])),
              a.push(i);
          }
          t && (he.lastCandle = a[a.length - 1]);
        }
        return { bars: a, meta: r };
      }
      function Ce({ requestParams: e, lastResultLength: t }) {
        return (
          he._limitedServerResponse.maxResponseLength > 0 &&
          he._limitedServerResponse.maxResponseLength <= t &&
          e.periodParams.from < e.periodParams.to
        );
      }
      function Te({ result: e, requestParams: t, lastResultLength: a }) {
        var r, n;
        const i = ((e, t) => {
          for (var a in t || (t = {})) le.call(t, a) && ce(e, a, t[a]);
          if (oe) for (var a of oe(t)) se.call(t, a) && ce(e, a, t[a]);
          return e;
        })({}, t.periodParams);
        return (
          t.periodParams.countBack > 0 &&
            (i.countBack = t.periodParams.countBack - a),
          "latestFirst" === he._limitedServerResponse.expectedOrder
            ? (i.to = Math.round(
                (null == (r = e.bars[0]) ? void 0 : r.time) / re.Z2
              ))
            : (i.from = Math.round(
                (null == (n = e.bars[e.bars.length - 1]) ? void 0 : n.time) /
                  re.Z2
              )),
          i
        );
      }
      function be(e) {
        return void 0 === e ? "" : "string" == typeof e ? e : e.message;
      }
      function fe(e, t, a, r) {
        return new Promise((n, i) =>
          ue(this, null, function* () {
            me("[!] get periodParams", r);
            const o = {
              datafeedUrl: e,
              symbol: t,
              resolution: a,
              periodParams: r,
            };
            (null == r ? void 0 : r.firstDataRequest) && (he.lastCandle = null);
            try {
              const e = ge({
                data: yield pe(o),
                firstDataRequest: r.firstDataRequest,
              });
              he._limitedServerResponse &&
                (yield (function (e, t) {
                  return ue(this, null, function* () {
                    var a, r, n, i;
                    try {
                      let o = e.bars.length;
                      for (; Ce({ requestParams: t, lastResultLength: o }); ) {
                        me(
                          "[!] _processTruncateResponse",
                          he._limitedServerResponse,
                          o,
                          t
                        );
                        const l = Te({
                          result: e,
                          requestParams: t,
                          lastResultLength: o,
                        });
                        if (
                          ((t.periodParams = l), t.periodParams.countBack > 0)
                        ) {
                          const l = ge({
                            data: yield pe(t),
                            firstDataRequest: !1,
                          });
                          switch (
                            ((o = l.bars.length),
                            he._limitedServerResponse.expectedOrder)
                          ) {
                            case "latestFirst":
                              (null == (a = l.bars[l.bars.length - 1])
                                ? void 0
                                : a.time) ===
                                (null == (r = e.bars[0]) ? void 0 : r.time) &&
                                l.bars.pop(),
                                e.bars.unshift(...l.bars);
                              break;
                            case "earliestFirst":
                              (null == (n = l.bars[0]) ? void 0 : n.time) ===
                                (null == (i = e.bars[e.bars.length - 1])
                                  ? void 0
                                  : i.time) && l.bars.shift(),
                                e.bars.push(...l.bars);
                          }
                        } else o = 0;
                      }
                    } catch (e) {
                      if (e instanceof Error || "string" == typeof e) {
                        const t = be(e);
                        me(
                          "[!] TVHistory: get() earning during followup request, error=",
                          t
                        );
                      }
                    }
                  });
                })(e, o)),
                n(e);
            } catch (e) {
              if (e instanceof Error || "string" == typeof e) {
                const t = be(e);
                me("[!] TVHistory: get() failed, error=", t), i(t);
              }
            }
          })
        );
      }
      const ye = ({ datafeedUrl: e, country: t, quoteCurrencyCode: a }) =>
        new Promise((r, n) => {
          me("[!] getSymbolInfo", { country: t }),
            (0, ne.WL)({
              method: "get",
              url: `${e}/symbol_info?group=${a}&region=${t}`,
            })
              .then((t) => {
                const a = t.body;
                me("[!] getSymbolInfo Received", { data: a });
                const {
                  symbol: n,
                  ticker: i,
                  description: o,
                  timezone: l,
                  minmovement: s,
                  pricescale: c,
                  fractional: d,
                  type: u,
                  has_seconds: m,
                  seconds_multipliers: h,
                  monthly_multipliers: p,
                } = a;
                let g = a["exchange-listed"];
                const C = a["exchange-traded"],
                  T = a["session-regular"],
                  b = a["has-intraday"],
                  f = a["has-no-volume"],
                  y = a["intraday-multipliers"],
                  v = a["has-weekly-and-monthly"],
                  S = a["has-daily"],
                  k = a["upbit-symbol"];
                g = "string" == typeof g ? g : "UPBIT";
                const P = {};
                for (let t = 0; t < n.length; ++t) {
                  const a = k[t],
                    r = {
                      name: a,
                      base_name: [`${g}:${a}`],
                      listed_exchange: g,
                      exchange: C,
                      symbol: a,
                      code: a,
                      ticker: i[t],
                      description: o[t],
                      timezone: l || "Etc/UTC",
                      minmov: s || 0,
                      format: "price",
                      pricescale: c[t],
                      fractional: d,
                      session: T || "24x7",
                      has_seconds: m || !0,
                      has_intraday: b || !0,
                      has_no_volume: f[t] || !1,
                      type: u[t],
                      seconds_multipliers: null == h ? void 0 : h[t],
                      monthly_multipliers: null == p ? void 0 : p[t],
                      intraday_multipliers: y[t],
                      has_weekly_and_monthly: v,
                      has_daily: S,
                      data_status: "streaming",
                      datafeedUrl: e,
                    };
                  P[a] = r;
                }
                r(P);
              })
              .catch((e) => {
                n(e);
              });
        });
      var ve = a(63701);
      const Se = F()("tv:datafeed"),
        ke = {
          supported_resolutions: [
            "1S",
            "1",
            "3",
            "5",
            "10",
            "15",
            "30",
            "60",
            "240",
            "1D",
            "1W",
            "1M",
            "12M",
          ],
          supports_time: !0,
        },
        Pe = {};
      var we = ({ datafeedUrl: e, country: t, Observer: a }) => {
          Se("[!] Hello TVDataFeed!", { datafeedUrl: e, country: t });
          let r = [];
          return {
            setMasters(e) {
              r = (0, ve.sW)(e);
            },
            onReady: (e) => {
              Se("[!] onReady"), e(ke);
            },
            searchSymbols(e, t, a, n) {
              Se("[!] searchSymbols running");
              const i = Z()(
                r,
                (t) =>
                  X()(t.code, e) ||
                  X()(t.pair, e) ||
                  X()(t.baseCurrencyCode, e) ||
                  X()(t.quoteCurrencyCode, e)
              );
              n(
                m()(i, (e) => ({
                  exchange: "UPBIT",
                  symbol: e.code,
                  full_name: e.code,
                  ticker: e.code,
                  description: `${e.baseCurrencyCode}/${e.quoteCurrencyCode}`,
                  type: "crypto",
                }))
              );
            },
            resolveSymbol: (a, r, n) => {
              var i, o;
              const l = ae()(a, "UPBIT:"),
                s = (0, ve.Xp)(l);
              if (
                (Se("[!] resolveSymbol", {
                  symbolName: l,
                  onResolve: r,
                  onError: n,
                }),
                s)
              ) {
                const { baseCurrencyCode: a, quoteCurrencyCode: c } = s,
                  d = null == (i = null == Pe ? void 0 : Pe[c]) ? void 0 : i[l];
                void 0 !== d
                  ? setTimeout(() => r(d), 0)
                  : ye({ datafeedUrl: e, country: t, quoteCurrencyCode: c })
                      .then((e) => {
                        const t = null == e ? void 0 : e[l];
                        q()(t)
                          ? setTimeout(() => n(`Symbol ${l} not found`), 0)
                          : ((Pe[c] = e), t && setTimeout(() => r(t), 0));
                      })
                      .catch((e) => {
                        setTimeout(() => n(e), 0);
                      }),
                  Se("[!] resolveSymbolData", {
                    SymbolData:
                      null == (o = null == Pe ? void 0 : Pe[c]) ? void 0 : o[l],
                    symbolInfoCache: Pe,
                  });
              }
            },
            getBars: (t, a, r, n, i) => {
              var o;
              Se("[!] getBars", {
                symbolInfo: t,
                resolution: a,
                periodParams: r,
              }),
                fe(
                  e,
                  null != (o = null == t ? void 0 : t.ticker) ? o : "",
                  a,
                  r
                )
                  .then(
                    ({ bars: e, meta: t }) => (
                      Se("[!] getBars success", { bars: e, meta: t }), n(e, t)
                    )
                  )
                  .catch((e) => (Se("[!] getBars error", { e: e }), i(e)));
            },
            subscribeBars: (e, t, r, n, i) => {
              Se("[!] subscribeBars", { symbolInfo: e, resolution: t }),
                a.subscribe(e, t, r, n, i);
            },
            unsubscribeBars: (e) => {
              Se("[!] unsubscribeBars", { listenerGuid: e }), a.unSubscribe(e);
            },
            calculateHistoryDepth: (e, t, a) => (
              Se("[!] calculateHistoryDepth", {
                resolution: e,
                resolutionBack: t,
                intervalBack: a,
              }),
              e.includes("M")
                ? { resolutionBack: t, intervalBack: 12 }
                : { resolutionBack: t, intervalBack: a }
            ),
            getMarks: (e, t, a, r, n) => {
              Se("[!] getMarks running");
            },
            getTimeScaleMarks: (e, t, a, r, n) => {
              Se("[!] getTimeScaleMarks");
            },
            getServerTime(t) {
              return (
                (a = this),
                (r = null),
                (n = function* () {
                  Se("[!] getServerTime");
                  try {
                    const a = yield (0, ne.WL)({
                      method: "get",
                      url: `${e}/time`,
                      params: null,
                      data: null,
                      files: null,
                      headers: void 0,
                      keepCase: null,
                      originalUrl: null,
                    });
                    if (null == a ? void 0 : a.text) {
                      const e = ee()(a.text);
                      t(e);
                    }
                  } catch (e) {
                    Se("[!] getServerTime Error", e);
                  }
                }),
                new Promise((e, t) => {
                  var i = (e) => {
                      try {
                        l(n.next(e));
                      } catch (e) {
                        t(e);
                      }
                    },
                    o = (e) => {
                      try {
                        l(n.throw(e));
                      } catch (e) {
                        t(e);
                      }
                    },
                    l = (t) =>
                      t.done ? e(t.value) : Promise.resolve(t.value).then(i, o);
                  l((n = n.apply(a, r)).next());
                })
              );
              var a, r, n;
            },
            changeInterval(e) {
              a.changeInterval(e);
            },
          };
        },
        Ae = a(88273),
        Ue = a.n(Ae),
        Me = a(16783),
        De = a.n(Me),
        xe = a(3579),
        Oe = a(87228);
      const Ie = F()("tv:Observer"),
        Be = 1e3,
        Ee = (e, t) => {
          var a, r;
          let n;
          const { multiplier: i = "1", resolutionType: o } =
            null !=
            (r =
              null ==
              (a = e.match(
                new RegExp("(?<multiplier>[0-9]*)(?<resolutionType>[SWDM]?)")
              ))
                ? void 0
                : a.groups)
              ? r
              : {};
          switch (o) {
            case "S":
              n = I.yA.second;
              break;
            case "D":
              n = I.yA.day;
              break;
            case "W":
              n = I.yA.week;
              break;
            case "M":
              n = "12" === i ? I.yA.year : (0, Oe.Q)("month", t);
              break;
            default:
              n = I.yA[i];
          }
          return (n *= Be), n;
        },
        Re = (() => {
          const e = [];
          let t,
            a = 0;
          const r = (t) => {
              const a = Ue()(e, (e) => e.listenerGuid === t);
              return e[a];
            },
            n = (e) => {
              const a = r(e),
                {
                  symbolInfo: { datafeedUrl: n, ticker: o },
                  resolution: l,
                } = a,
                s = parseInt((Date.now() / Be).toString()),
                c = Ee(t || l) / Be,
                d = c === I.yA.second ? 3 * I.lk : I.OG;
              return fe(n, null != o ? o : "", l, {
                from: s - c * d,
                to: s,
                firstDataRequest: !1,
                countBack: d,
              }).then((t) => {
                i(e, t);
              });
            },
            i = (e, t) => {
              var a, n;
              const i = r(e);
              if (!i)
                return void Ie(
                  `Pulse: Data comes for already unsubscribed subscription #${e}`
                );
              const { bars: o, meta: l } = t;
              if (0 === o.length) return;
              const s = o[o.length - 1];
              if (
                void 0 !==
                  (null == (a = null == i ? void 0 : i.lastCandle)
                    ? void 0
                    : a.time) &&
                s.time < i.lastCandle.time
              )
                return;
              if (
                void 0 !==
                  (null == (n = null == i ? void 0 : i.lastCandle)
                    ? void 0
                    : n.time) &&
                s.time > i.lastCandle.time
              ) {
                if (o.length < 2)
                  throw new Error(
                    "Not enough bars in history for proper pulse update. Need at least 2."
                  );
                const e = o[o.length - 2];
                Ie("Pulse update previousCandle", { previousBar: e }),
                  i.onRealtimeCallback(e);
              }
              i.lastCandle && (i.lastCandle.time = s.time),
                Ie("Pulse update lastCandle", { lastBar: s }),
                i.onRealtimeCallback(s);
            };
          return (
            setInterval(() => {
              a > 0 ||
                ((a = 0),
                e.forEach((e) => {
                  const t = e.listenerGuid;
                  (a += 1),
                    n(t)
                      .then(() => {
                        (a -= 1),
                          Ie(
                            `Pulse: data for #${t} updated successfully, pending=${a}`
                          );
                      })
                      .catch((e) => {
                        (a -= 1),
                          Ie(`Pulse: data for #${t} updated with`, {
                            error: e,
                            pending: a,
                          });
                      });
                }));
            }, I.Z2),
            {
              subscribe: (t, a, r, n, i) => {
                var o;
                const l = {
                  symbolInfo: t,
                  resolution: a,
                  onRealtimeCallback: r,
                  listenerGuid: n,
                  onResetCacheNeededCallback: i,
                  lastCandle: null != (o = he.lastCandle) ? o : void 0,
                };
                Ie("[!] subscribe", l), e.push(l);
              },
              unSubscribe: (t) => {
                const a = Ue()(e, (e) => e.listenerGuid === t);
                if (a >= 0)
                  return Ie("[!] unSubscribe", t), void e.splice(a, 1);
                Ie("[!] cannot find listenerGuid until unSubscribe", t);
              },
              dataAppend: (t) => {
                e.forEach((e) => {
                  const {
                      resolution: a,
                      onRealtimeCallback: r,
                      lastCandle: n,
                      symbolInfo: i,
                    } = e,
                    o = i.code,
                    l = De()(
                      t.filter((e) => e.code === o),
                      (e) => e.lastSequentialId
                    ),
                    s = l[l.length - 1],
                    c = Ee(a, null == s ? void 0 : s.candleTimestamp),
                    d = (0, xe.zc)({
                      sortedCandles: l,
                      intervalMs: c,
                      intervalString: a,
                      currentCandle: (0, xe.bP)(o, c, a, n),
                      symbol: o,
                    });
                  if (d.length > 0) {
                    const t = d[d.length - 1];
                    (e.lastCandle = (0, xe.h$)(t)),
                      d.forEach((e) => {
                        r((0, xe.h$)(e));
                      });
                  }
                });
              },
              changeInterval: (e) => {
                t !== e &&
                  ((t = e), Ie("Resolution changed", { resolution: e }));
              },
            }
          );
        })();
      var Le = a(8013),
        Fe = a(14047),
        Ne = a(29044),
        Ve = a(43190),
        ze = a(79150);
      const qe = F()("tv:avg_buy_price_line");
      var He = a(7605),
        _e = a.n(He),
        Ye = a(85982),
        je = a.n(Ye),
        Ke = a(87009),
        We = a.n(Ke),
        Ge = a(92265),
        Qe = a(19064),
        Ze = a(17024),
        Je = a(39290),
        Xe = a(56177),
        $e = a(97046),
        et = a(48925),
        tt = Object.defineProperty,
        at = Object.defineProperties,
        rt = Object.getOwnPropertyDescriptors,
        nt = Object.getOwnPropertySymbols,
        it = Object.prototype.hasOwnProperty,
        ot = Object.prototype.propertyIsEnumerable,
        lt = (e, t, a) =>
          t in e
            ? tt(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        st = (e, t) => {
          for (var a in t || (t = {})) it.call(t, a) && lt(e, a, t[a]);
          if (nt) for (var a of nt(t)) ot.call(t, a) && lt(e, a, t[a]);
          return e;
        };
      const ct = F()("tv:wait_order");
      var dt = a(71409),
        ut = a(83536),
        mt = a(53692),
        ht = (e, t, a) =>
          new Promise((r, n) => {
            var i = (e) => {
                try {
                  l(a.next(e));
                } catch (e) {
                  n(e);
                }
              },
              o = (e) => {
                try {
                  l(a.throw(e));
                } catch (e) {
                  n(e);
                }
              },
              l = (e) =>
                e.done ? r(e.value) : Promise.resolve(e.value).then(i, o);
            l((a = a.apply(e, t)).next());
          });
      const pt = F()("tv:main"),
        gt = {
          type: "black",
          tools: [
            { name: "Correlation - Log" },
            { name: "Correlation Coefficient" },
            { name: "Spread" },
            { name: "Ratio" },
          ],
        },
        Ct = [
          "header_symbol_search",
          "symbol_search_hot_key",
          "legend_inplace_edit",
          "border_around_the_chart",
          "header_compare",
          "header_saveload",
          "header_undo_redo",
          "save_shortcut",
          "go_to_date",
        ],
        Tt = [
          "header_in_fullscreen_mode",
          "side_toolbar_in_fullscreen_mode",
          "iframe_loading_compatibility_mode",
          "seconds_resolution",
        ],
        bt = {
          symbol: "BTCKRW",
          code: "CRIX.UPBIT.KRW-BTC",
          interval: "1D",
          exchanges: G.ED,
          container: "tv_chart_container",
          libraryPath:
            "https://upbit-web-libs.upbit.com/libs/tradingview/v27.006/charting_library/",
          timezone: "Asia/Seoul",
          chartsStorageUrl: "https://saveload.tradingview.com",
          datafeedUrl: "",
          locale: "ko",
          clientId: "upbit.com",
          userId: "public_user_id",
          fullscreen: !0,
          autosize: !0,
          favorites: { intervals: ["1S", "1", "30", "60", "240", "1D", "12M"] },
          timeFrames: [
            { text: "30D", resolution: "30" },
            { text: "5D", resolution: "5" },
            { text: "1D", resolution: "1" },
          ],
        };
      function ft() {
        return document.querySelector("span#tv_chart_container > iframe");
      }
      function yt() {
        const e = ft(),
          t = new Event("resize"),
          a = null == e ? void 0 : e.contentWindow;
        a && a.dispatchEvent(t);
      }
      function vt(e) {
        const t = localStorage.getItem(e);
        if (!t) return null;
        try {
          return JSON.parse(t);
        } catch (e) {
          return console.error(e), null;
        }
      }
      var St = ({ master: e, selectedTab: t, gaEvent: a }) => {
          const i = (0, Fe.j)(),
            { t: o } = (0, Y.B)(),
            [l, s] = (0, n.useState)(!1),
            c = (0, n.useRef)(null),
            d = e.code,
            u = (0, Fe.G)(mt.Sf),
            { country: h, apiHosts: p, language: g } = (0, Fe.G)(Xe.G3),
            T = ((0, n.useRef)(g), (0, Fe.G)(ut.q)),
            b = (0, Fe.G)(Ve.pJ),
            f = (0, Fe.G)(Ve.bg) ? "dark" : "light",
            y = (0, n.useMemo)(() => {
              const e = `${p.CRIX_TV_API_HOST}/${W.BK}/crix/tradingview`;
              return we({ datafeedUrl: e, country: h, Observer: Re });
            }, [p.CRIX_TV_API_HOST, h]),
            { cancelPopupPayload: v, basicPopupPayload: S } = (function ({
              master: e,
              tvWidget: t,
            }) {
              const { waitOrderLine: a } = (0, Fe.G)(et.BG),
                r = (0, Fe.G)(Xe.Eb),
                i = (0, n.useRef)({}),
                o = (0, Fe.G)($e.mM),
                l = (0, ve.v3)(e),
                { t: s } = (0, Y.B)(),
                c = (0, Le.DP)(),
                {
                  cancelAndNewOrderEditPopupPayload: d,
                  handleClickCancelAndNewOrder: u,
                } = (0, Ze.p)(),
                {
                  handleClickCancel: h,
                  confirmPopupPayload: p,
                  basicPopupPayload: g,
                } = (0, Je.A)(),
                T = (0, n.useCallback)(
                  (a) => {
                    var n;
                    const l = _e()(o, (e) => e.uuid === a);
                    if (!l) return;
                    if (l.watchCondition) return;
                    const { remainingVolume: d, side: m, price: p } = l,
                      g = (0, Ge.pe)(
                        p,
                        e.quoteCurrencyCode,
                        e.baseCurrencyCode
                      ),
                      b = (0, Ge.yV)(d, e.baseCurrencyCode),
                      f = "bid" === m,
                      y = null == (n = i.current) ? void 0 : n[a],
                      v = ee()(p),
                      S = s(f ? "exchange.order.bid" : "exchange.order.ask");
                    if (y)
                      y.setPrice(v),
                        y.setText(`${S} ${g}`),
                        y.setQuantity(b),
                        ct("미체결 라인 업데이트", a, m, p, y);
                    else {
                      const n = f
                          ? c.colors.market_contents_up
                          : c.colors.market_contents_down,
                        o = c.colors.bg_sg2,
                        d = c.colors.contents_1;
                      (i.current[a] =
                        null == t
                          ? void 0
                          : t
                              .activeChart()
                              .createOrderLine()
                              .setText(`${S} ${g}`)
                              .setLineLength(3)
                              .setLineStyle(0)
                              .setLineColor(n)
                              .setBodyTextColor(c.colors.contents_fixwhite)
                              .setBodyBorderColor(n)
                              .setBodyBackgroundColor(n)
                              .setPrice(v)
                              .setQuantity(b)
                              .setQuantityBackgroundColor(o)
                              .setQuantityBorderColor(o)
                              .setQuantityTextColor(d)
                              .setCancelButtonBackgroundColor(o)
                              .setCancelButtonBorderColor(o)
                              .setCancelButtonIconColor(d)
                              .setTooltip(
                                s(
                                  "exchange.cancelAndNewOrder.cancel_and_new_order_openorder_line_price"
                                )
                              )
                              .setModifyTooltip(
                                s(
                                  "exchange.cancelAndNewOrder.cancel_and_new_order_openorder_line_volume"
                                )
                              )
                              .setCancelTooltip(
                                s(
                                  "exchange.cancelAndNewOrder.cancel_and_new_order_openorder_line_close"
                                )
                              )
                              .setBodyFont("400 11px Roboto")
                              .setQuantityFont("400 11px Roboto")
                              .setExtendLeft(!1)
                              .onMove(function () {
                                var n, o, s;
                                const c =
                                    null == (n = i.current[a])
                                      ? void 0
                                      : n.getPrice(),
                                  {
                                    minus: d,
                                    plus: m,
                                    noRemainder: h,
                                    price: p,
                                  } = (0, Qe.M6)(
                                    e.quoteCurrencyCode,
                                    e.baseCurrencyCode,
                                    null != c ? c : v,
                                    r
                                  ),
                                  g = h ? p : f ? m : d;
                                if (g > 0) {
                                  const r = (0, Ge.pe)(
                                    g,
                                    e.quoteCurrencyCode,
                                    e.baseCurrencyCode
                                  );
                                  null == (o = i.current[a]) ||
                                    o.setText(`${S} ${r}`),
                                    null == (s = i.current[a]) || s.setPrice(g),
                                    null == t || t.exitFullscreen(),
                                    u({
                                      prevOrder:
                                        ((b = st({}, l)),
                                        (y = { price: C()(g) }),
                                        at(b, rt(y))),
                                      onCancel: T,
                                      page: "거래소_차트",
                                      chartMode: "skipInput",
                                    });
                                } else T(a);
                                var b, y;
                              })
                              .onModify(function () {
                                null == t || t.exitFullscreen(),
                                  u({
                                    prevOrder: l,
                                    onCancel: T,
                                    page: "거래소_차트",
                                    chartMode: "volumeOnly",
                                  });
                              })
                              .onCancel(function () {
                                null == t || t.exitFullscreen(),
                                  h({
                                    orderUuids: [l.uuid],
                                    page: "거래소_차트",
                                  });
                              })
                              .setLineLength(55)
                              .setLineStyle(1)),
                        ct("미체결 새 라인 생성", a, m, p, i.current[a]);
                    }
                  },
                  [
                    r,
                    h,
                    u,
                    e.baseCurrencyCode,
                    e.quoteCurrencyCode,
                    s,
                    c.colors.bg_sg2,
                    c.colors.contents_1,
                    c.colors.contents_fixwhite,
                    c.colors.market_contents_down,
                    c.colors.market_contents_up,
                    t,
                    o,
                  ]
                ),
                b = (0, n.useMemo)(
                  () =>
                    m()(
                      We()(
                        Z()(o, (e) => e.market === l && !e.watchCondition),
                        20
                      ),
                      "uuid"
                    ),
                  [l, o]
                ),
                f = (0, n.useCallback)(() => {
                  var e;
                  b.length > 0 &&
                    (null == (e = null == t ? void 0 : t.activeChart) ||
                      e.call(t).dataReady(() => {
                        V()(je()(b), (e) => {
                          T(e);
                        });
                      }));
                }, [b, T, t]);
              (0, n.useEffect)(() => {
                i.current = {};
              }, [t]);
              const y = (0, n.useCallback)(
                (e = !1) => {
                  t &&
                    l &&
                    V()(i.current, (t, a) => {
                      (X()(b, a) && !e) ||
                        (null == t || t.remove(), (i.current[a] = void 0));
                    });
                },
                [b, l, t]
              );
              return (
                (0, n.useEffect)(() => {
                  var e;
                  try {
                    (null == (e = null == t ? void 0 : t.activeChart)
                      ? void 0
                      : e.call(t)) && (y(!a), a && f());
                  } catch (e) {
                    ct("미체결선그리기", e);
                  }
                }, [y, f, t, a]),
                {
                  cancelAndNewOrderEditPopupPayload: d,
                  cancelPopupPayload: p,
                  basicPopupPayload: g,
                  drawWaitOrderLine: T,
                  syncWaitOrderLines: f,
                  removeWaitOrderLines: y,
                }
              );
            })({ master: e, tvWidget: c.current });
          !(function ({ tvWidget: e }) {
            const t = (0, Fe.G)(Ne.Hi),
              a = (0, n.useMemo)(() => ee()(t.avgBuyPrice), [t.avgBuyPrice]),
              r = (0, Fe.G)(ze.BQ),
              i = (0, Fe.G)(Ve.Xd),
              o = !!r && i,
              l = (0, n.useRef)(null),
              s = (0, n.useRef)(0),
              { t: c } = (0, Y.B)(),
              d = (0, Le.DP)(),
              u = (0, n.useCallback)(() => {
                var t;
                const r = d.colors.market_return;
                qe("매수평균가 그리기 시도", e, o, a, 0 !== a, new Date()),
                  e &&
                    o &&
                    a &&
                    0 !== a &&
                    (null == (t = null == e ? void 0 : e.activeChart) ||
                      t.call(e).dataReady(() => {
                        const t = l.current;
                        qe("매수평균가 이전 라인 제거", t),
                          t && t.remove(),
                          (l.current = null),
                          (s.current = 0),
                          (l.current =
                            null == e
                              ? void 0
                              : e
                                  .activeChart()
                                  .createPositionLine()
                                  .setText(
                                    c("exchange.coinSelector.avgBuyPrice")
                                  )
                                  .setLineLength(100)
                                  .setBodyFont("400 11px Roboto")
                                  .setLineStyle(0)
                                  .setLineColor(r)
                                  .setBodyTextColor("#FFFFFF")
                                  .setBodyBorderColor(r)
                                  .setBodyBackgroundColor(r)
                                  .setPrice(a)
                                  .setQuantity("")),
                          qe("매수평균가 새 라인 생성", e, l.current);
                      }));
              }, [a, o, c, d.colors.market_return, e]);
            (0, n.useEffect)(() => {
              var e;
              o || (null == (e = l.current) || e.remove(), (l.current = null));
            }, [o]),
              (0, n.useEffect)(() => {
                setTimeout(() => {
                  u();
                }, 150);
              }, [u]);
          })({ tvWidget: c.current }),
            (0, n.useEffect)(() => {
              y && y.setMasters(u);
            }, [y, u]);
          const k = (0, n.useMemo)(
              () =>
                (function (e, t = "light") {
                  const a = e ? I.I : I.yK,
                    r = e ? I.bY : I.$$,
                    n = {
                      upColor: a,
                      downColor: r,
                      upFillColor: (0, dt.j5)(a, 0.1),
                      downFillColor: (0, dt.j5)(r, 0.1),
                      borderColor: "#666666",
                      borderUpColor: a,
                      borderDownColor: r,
                      wickUpColor: a,
                      wickDownColor: r,
                    };
                  return {
                    colorOverride: {
                      "paneProperties.background":
                        "light" === t ? "#FFFFFF" : "#05111E",
                      "paneProperties.backgroundType": "solid",
                      "mainSeriesProperties.candleStyle.upColor": n.upColor,
                      "mainSeriesProperties.candleStyle.downColor": n.downColor,
                      "mainSeriesProperties.candleStyle.borderColor":
                        n.borderColor,
                      "mainSeriesProperties.candleStyle.borderUpColor":
                        n.borderUpColor,
                      "mainSeriesProperties.candleStyle.borderDownColor":
                        n.borderDownColor,
                      "mainSeriesProperties.candleStyle.wickUpColor":
                        n.wickUpColor,
                      "mainSeriesProperties.candleStyle.wickDownColor":
                        n.wickDownColor,
                      "mainSeriesProperties.hollowCandleStyle.upColor":
                        n.upColor,
                      "mainSeriesProperties.hollowCandleStyle.downColor":
                        n.downColor,
                      "mainSeriesProperties.hollowCandleStyle.borderColor":
                        n.borderColor,
                      "mainSeriesProperties.hollowCandleStyle.borderUpColor":
                        n.borderUpColor,
                      "mainSeriesProperties.hollowCandleStyle.borderDownColor":
                        n.borderDownColor,
                      "mainSeriesProperties.hollowCandleStyle.wickUpColor":
                        n.wickUpColor,
                      "mainSeriesProperties.hollowCandleStyle.wickDownColor":
                        n.wickDownColor,
                      "mainSeriesProperties.haStyle.upColor": n.upColor,
                      "mainSeriesProperties.haStyle.downColor": n.downColor,
                      "mainSeriesProperties.haStyle.borderColor": n.borderColor,
                      "mainSeriesProperties.haStyle.borderUpColor":
                        n.borderUpColor,
                      "mainSeriesProperties.haStyle.borderDownColor":
                        n.borderDownColor,
                      "mainSeriesProperties.haStyle.wickUpColor": n.wickUpColor,
                      "mainSeriesProperties.haStyle.wickDownColor":
                        n.wickDownColor,
                      "mainSeriesProperties.barStyle.upColor": n.upColor,
                      "mainSeriesProperties.barStyle.downColor": n.downColor,
                      "mainSeriesProperties.baselineStyle.baselineColor": (0,
                      dt.j5)(n.borderColor),
                      "mainSeriesProperties.baselineStyle.topFillColor1":
                        n.upFillColor,
                      "mainSeriesProperties.baselineStyle.topFillColor2":
                        n.upFillColor,
                      "mainSeriesProperties.baselineStyle.bottomFillColor1":
                        n.downFillColor,
                      "mainSeriesProperties.baselineStyle.bottomFillColor2":
                        n.downFillColor,
                      "mainSeriesProperties.baselineStyle.topLineColor": (0,
                      dt.j5)(n.upColor),
                      "mainSeriesProperties.baselineStyle.bottomLineColor": (0,
                      dt.j5)(n.downColor),
                    },
                    studiesOverride: {
                      "volume.volume.color.0": n.downColor,
                      "volume.volume.color.1": n.upColor,
                    },
                  };
                })("kr" === h, f),
              [h, f]
            ),
            P = (0, n.useCallback)(
              () =>
                ht(void 0, null, function* () {
                  if (!c.current) return;
                  const { colorOverride: e } = k,
                    t = yield c.current.changeTheme(f);
                  pt("changeThemeAndOverride", t), c.current.applyOverrides(e);
                }),
              [k, f]
            ),
            w = (0, n.useCallback)(() => {
              var e;
              let t = null;
              null == (e = c.current) ||
                e.save((e) => {
                  (t && _()(e, t)) ||
                    localStorage.setItem("tvLayout", JSON.stringify(e)),
                    (t = e);
                });
            }, []),
            U = (0, n.useCallback)(() => {
              var e, t, a;
              try {
                if (c.current) {
                  const { symbol: r, interval: n } = c.current.symbolInterval(),
                    i = `${r}_#_${n}`,
                    o =
                      null ==
                      (t =
                        null == (e = c.current._innerAPI())
                          ? void 0
                          : e._chartApiInstance)
                        ? void 0
                        : t._studyEngine,
                    l =
                      null == (a = null == o ? void 0 : o._cachedDatafeed)
                        ? void 0
                        : a._threads,
                    s = null == l ? void 0 : l[i],
                    d = null == o ? void 0 : o._resolveRequests;
                  V()(d, (e, t) =>
                    ht(void 0, null, function* () {
                      try {
                        yield e;
                      } catch (e) {
                        delete d[t];
                      }
                    })
                  ),
                    (null == s ? void 0 : s._errorMessage) && s._purgeCache();
                }
              } catch (e) {
                console.error(e);
              }
            }, []),
            M = (0, n.useCallback)(
              (e) => {
                var t, r;
                null == (t = e.preventDefault) || t.call(e),
                  null == (r = c.current) || r.exitFullscreen(),
                  (0, A.A)("거래소", "차트", "차트", {
                    category: "차트타입",
                    eventDetail: "기본차트",
                  }),
                  a("차트타입", "선택", "ChartIQ"),
                  i((0, j.Xv)());
              },
              [i, a]
            ),
            D = (0, n.useCallback)(() => {
              var e;
              l &&
                (null == (e = c.current) ? void 0 : e.activeChart()) &&
                (c.current.unsubscribe("onAutoSaveNeeded", w),
                c.current.remove(),
                (c.current = null),
                s(!1));
            }, [w, l]),
            x = (0, n.useMemo)(() => {
              const { colorOverride: e, studiesOverride: t } = k,
                a = bt.interval,
                r = (0, Ve.Mt)();
              return {
                container: "tv_chart_container",
                symbol: d,
                library_path: bt.libraryPath,
                interval: a,
                timezone: r,
                locale: "id" === g ? "id_ID" : g,
                datafeed: y,
                theme: f,
                overrides: e,
                autosize: bt.autosize,
                custom_css_url: `${location.origin}/css/tvcustom.css?8`,
                chart_storage_url: bt.chartsStorageUrl,
                charts_storage_api_version: "1.1",
                client_id: bt.clientId,
                user_id: bt.userId,
                disabled_features: Ct,
                enabled_features: Tt,
                studies_overrides: t,
                studies_access: gt,
                favorites: bt.favorites,
                time_frames: bt.timeFrames,
                auto_save_delay: 1,
                custom_translate_function: function (e, t, a) {
                  return "날" === e
                    ? "일"
                    : "월" === e &&
                      "day_of_week" !== (null == t ? void 0 : t.context)
                    ? "달"
                    : null;
                },
                numeric_formatting: { decimal_sign: "id" === g ? "," : "." },
                saved_data: vt("tvLayout"),
              };
            }, [d, k, y, g, f]),
            O = (0, n.useCallback)(
              (e) => {
                const t = new window.TradingView.widget(e);
                null == t ||
                  t.onChartReady(() => {
                    s(!0), (c.current = t);
                    const e = (function () {
                      var e;
                      const t = ft();
                      return t
                        ? null == (e = t.contentWindow)
                          ? void 0
                          : e.document
                        : null;
                    })();
                    e &&
                      (null == t ||
                        t.headerReady().then(() =>
                          ht(void 0, null, function* () {
                            pt("차트 로딩 완료");
                            const a = e.querySelector(
                                "div.layout__area--top > div.toolbar-qqNP9X6e div.inner-OhqNVIYA:not(.fake-OhqNVIYA) div.innerWrap-OhqNVIYA"
                              ),
                              r = e.querySelector(
                                "div.fill-OhqNVIYA.group-MBOVGQRI:not(.collapse-OhqNVIYA)"
                              );
                            r &&
                              (!(function (e) {
                                if (e) {
                                  if (e.hasOwnProperty("remove")) return;
                                  Object.defineProperty(e, "remove", {
                                    configurable: !0,
                                    enumerable: !0,
                                    writable: !0,
                                    value: function () {
                                      null !== this.parentNode &&
                                        this.parentNode.removeChild(this);
                                    },
                                  });
                                }
                              })(r),
                              r.remove());
                            const n = e.createElement("div");
                            n.className = "separatorWrap-MBOVGQRI";
                            const i = e.createElement("div");
                            (i.className =
                              "separator-xVhBjD5m separator-MBOVGQRI"),
                              n.appendChild(i);
                            const l = e.createElement("div");
                            (l.className = "fill-OhqNVIYA group-MBOVGQRI"),
                              a && a.appendChild(l);
                            const s = e.createElement("div");
                            if (((s.className = "group-MBOVGQRI"), t)) {
                              const t = e.createElement("div");
                              t.setAttribute(
                                "title",
                                o("charts.ui.defaultChart")
                              ),
                                t.classList.add("selector"),
                                t.addEventListener("click", M),
                                (t.innerHTML = `<a class="disable"><em>-</em>${o(
                                  "charts.ui.defaultChart"
                                )}</a>`);
                              const r = e.createElement("div");
                              r.setAttribute(
                                "title",
                                o("charts.ui.tradingView")
                              ),
                                r.classList.add("selector"),
                                r.classList.add("endRadio"),
                                (r.innerHTML = `<a class="on"><em>-</em>${o(
                                  "charts.ui.tradingView"
                                )}</a>`),
                                s.appendChild(t),
                                s.appendChild(r),
                                a && a.appendChild(s);
                            }
                          })
                        )),
                      null == t ||
                        t
                          .activeChart()
                          .onIntervalChanged()
                          .subscribe(null, (e) => {
                            t._options.datafeed.changeInterval(e), U();
                          }),
                      null == t ||
                        t
                          .activeChart()
                          .onSymbolChanged()
                          .subscribe(null, () => {
                            U();
                          }),
                      setTimeout(() => {
                        null == t || t.subscribe("onAutoSaveNeeded", w);
                      }, 100),
                      null == t ||
                        t.subscribe("onPlusClick", (e) => {
                          null == t ||
                            t
                              .activeChart()
                              .createShape(
                                { time: new Date().getTime(), price: e.price },
                                { shape: "horizontal_line" }
                              );
                        });
                  });
              },
              [w, U, M, o]
            ),
            B = (0, n.useCallback)(() => {
              pt("createTvWidget", x), O(x);
            }, [O, x]);
          (0, n.useEffect)(() => {
            q()(T) || Re.dataAppend(T);
          }, [T]),
            (0, n.useEffect)(
              () => () => {
                try {
                  D();
                } catch (e) {}
              },
              [D, g]
            ),
            (0, n.useEffect)(() => {
              P();
            }, [P]),
            (0, n.useEffect)(() => {
              l || c.current ? yt() : B(), "trade" === t && c.current && yt();
            }, [B, b, i, D, t, o, l]),
            (0, n.useEffect)(() => {
              var e;
              l &&
                c.current &&
                (null == (e = c.current) || e.activeChart().setSymbol(d));
            }, [d, l]);
          const E = (0, n.useRef)(null);
          return (
            (0, n.useEffect)(() => {
              var e;
              (v || S) && (null == (e = E.current) || e.focus());
            }, [S, v]),
            (0, r.FD)("div", {
              ref: E,
              tabIndex: -1,
              "data-testid": "popupWrapper",
              children: [
                (0, r.Y)(K.A, { payload: v }),
                (0, r.Y)(K.A, { payload: S }),
              ],
            })
          );
        },
        kt = a(27988),
        Pt = a(16924),
        wt = a(68989),
        At = a(73389),
        Ut = a(14558),
        Mt = a(11158),
        Dt = a(62446),
        xt = a(50310),
        Ot = a(8576),
        It = a(4001),
        Bt = Object.defineProperty,
        Et = Object.getOwnPropertySymbols,
        Rt = Object.prototype.hasOwnProperty,
        Lt = Object.prototype.propertyIsEnumerable,
        Ft = (e, t, a) =>
          t in e
            ? Bt(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a);
      const Nt = ({ master: e }) => {
          const t = (0, y.wA)(),
            a = (0, y.d4)(Ot.T),
            i = (0, y.d4)(ze.BQ),
            { orderReceiptConfirmation: o } = (0, y.d4)(xt.p);
          return (
            (0, Ut.z)(B.T.INSTANT_ORDER, e.code),
            (0, n.useEffect)(() => {
              i && o && t((0, wt.Er)());
            }, [i, o]),
            (0, r.Y)(r.FK, {
              children: m()(a, (t) =>
                (0, r.Y)(Vt, { receipt: t, master: e }, t.uuid)
              ),
            })
          );
        },
        Vt = ({ receipt: e, master: t }) => {
          const { handleClickOrder: a, popups: n } = (0, Mt.jk)(e, t);
          return (
            (0, Dt.Yl)(`${At.VU[null == e ? void 0 : e.position]}`, a, {
              altKey: !0,
            }),
            (0, r.Y)(
              It.A,
              ((e, t) => {
                for (var a in t || (t = {})) Rt.call(t, a) && Ft(e, a, t[a]);
                if (Et) for (var a of Et(t)) Lt.call(t, a) && Ft(e, a, t[a]);
                return e;
              })({}, n)
            )
          );
        };
      var zt = a(85249),
        qt = a(81505),
        Ht = a(21529),
        _t = a(89975),
        Yt = a(62205),
        jt = a(2481),
        Kt = a(16790),
        Wt = a(38148),
        Gt = a(5878),
        Qt = a(21978),
        Zt = Object.defineProperty,
        Jt = Object.getOwnPropertySymbols,
        Xt = Object.prototype.hasOwnProperty,
        $t = Object.prototype.propertyIsEnumerable,
        ea = (e, t, a) =>
          t in e
            ? Zt(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        ta = (e, t) => {
          for (var a in t || (t = {})) Xt.call(t, a) && ea(e, a, t[a]);
          if (Jt) for (var a of Jt(t)) $t.call(t, a) && ea(e, a, t[a]);
          return e;
        };
      const aa = ({ title: e, body: t, handleConfirm: a }) => {
          const { t: n } = (0, Y.B)();
          return (0, r.FD)(r.FK, {
            children: [
              (0, r.Y)(jt.p6, {}),
              (0, r.FD)(jt.zD, {
                sx: ia.v1.containerStyle,
                children: [
                  (0, r.Y)(jt.lC, { children: e }),
                  (0, r.Y)(jt.Nq, {
                    sx: ia.v1.bodyStyle,
                    children: (0, r.Y)(jt.m2, { text: t }),
                  }),
                  (0, r.Y)(jt.IY, {
                    children: (0, r.Y)(jt.$n, {
                      sx: ia.v1.footerStyle,
                      onClick: a,
                      children: n(
                        "exchange.DataSharingWithThirdParty.confirmBtn"
                      ),
                    }),
                  }),
                ],
              }),
            ],
          });
        },
        ra = ({ title: e, body: t, closePopup: a }) => {
          const { t: n } = (0, Y.B)();
          return (0, r.FD)(Gt.b, {
            onPressEscape: a,
            onPressEnter: a,
            children: [
              (0, r.Y)(Wt.q_.Title, { variant: "none" }),
              (0, r.Y)(Wt.q_.Body, {
                children: (0, r.FD)(jt.BJ, {
                  isGapPolyfill: !0,
                  spacing: 0,
                  direction: "column",
                  alignItems: "center",
                  sx: ia.v2.bodyContainer,
                  children: [
                    (0, r.Y)(jt.In, {
                      type: "N_warning_circle_fill_32",
                      size: 32,
                      color: "accent_red",
                    }),
                    (0, r.Y)(jt.Z3, {
                      variant: "body2",
                      color: "accent_red",
                      weight: "bold",
                      sx: ia.v2.bodyTitle,
                      children: e,
                    }),
                    (0, r.Y)(jt.Z3, {
                      tag: "div",
                      variant: "body4",
                      color: "contents_2",
                      sx: ia.v2.bodyContent,
                      children: t,
                    }),
                  ],
                }),
              }),
              (0, r.Y)(Wt.q_.Footer, {
                children: (0, r.Y)(Wt.fV, {
                  variant: "secondary",
                  size: "large",
                  onClick: a,
                  children: n("popup.confirm"),
                }),
              }),
            ],
          });
        };
      var na = () => {
        const { popupPayload: e } = (0, Qt.A)();
        if (!e) return null;
        const { popupUdsVerson: t } = e;
        return "v1" === t ? (0, r.Y)(aa, ta({}, e)) : (0, r.Y)(ra, ta({}, e));
      };
      const ia = {
        v1: {
          containerStyle: (0, Yt.AH)({ position: "fixed" }),
          bodyStyle: (0, Yt.AH)({
            fontStyle: "normal",
            fontWeight: 400,
            fontSize: 16,
            lineHeight: "24px",
          }),
          footerStyle: (0, Yt.AH)({
            fontStyle: "normal",
            fontWeight: 400,
            fontSize: 14,
            lineHeight: "21px",
            padding: "0 !important",
          }),
        },
        v2: {
          bodyContainer: (0, Yt.AH)({
            padding: "0px 40px",
            boxSizing: "border-box",
          }),
          bodyTitle: (0, Yt.AH)({ marginTop: 8 }),
          bodyContent: (0, Yt.AH)({
            marginTop: 16,
            padding: 16,
            boxSizing: "border-box",
            background: Kt.default.colors.bg_sg1,
            wordBreak: "break-all",
          }),
        },
      };
      a(21521);
      var oa = a(57370),
        la = a(9219),
        sa = a(32873),
        ca = a(48406),
        da = a(82152),
        ua = a(49187),
        ma = a(28424),
        ha = a(50861),
        pa = a(16919),
        ga = a(13659),
        Ca = a(22025),
        Ta = a(59133),
        ba = a(35299),
        fa = a(28134),
        ya = a(55013),
        va = a(36368),
        Sa = Object.defineProperty,
        ka = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? Sa(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      const Pa = (e, t, a) => {
          0;
        },
        wa = (0, R.D0)(),
        Aa = ({ chartEngine: e, uiContext: t }) => {};
      class Ua extends n.PureComponent {
        constructor() {
          super(...arguments),
            ka(this, "state", {
              mySelect: this.props.t("common.exchange.wait"),
              tradeSelect: (0, pa.LO)(pa.wl.EXCHANGE_TRADE_SELECTED_TAB, 1),
              selectedTab: "trade",
              initialPrice: 0,
            }),
            ka(this, "gaEvent", (e, t, a) => {
              const r = a || "";
              (0, A.SO)("거래소", "차트", e, t, r);
            }),
            ka(this, "setupInitialPrice", () => {
              const { recent: e, estimateFactor: t } = this.props,
                a = null == e ? void 0 : e.tradePrice;
              a && t && this.setState({ initialPrice: a * t });
            }),
            ka(this, "fetchData", () => {
              const {
                  code: e,
                  codeQuery: t,
                  isAuthenticated: a,
                  crixMasters: r,
                  locale: { country: n },
                } = this.props,
                i = r[e];
              if (e) {
                i &&
                  a &&
                  this.props.fetchFundsAccountAvgBuyPrice(
                    i.baseCurrencyCode,
                    i.quoteCurrencyCode
                  );
                const t = p()(e, ".")[2],
                  r = "th" === n ? [e, `CRIX.COINMARKETCAP.${t}`] : [e];
                this.props.subscribeRecentCrixs(B.T.EXCHANGE, r),
                  this.props.subscribeCrixTrade(B.T.EXCHANGE, e),
                  this.props.subscribeCrixEvent(B.T.EXCHANGE, [e]),
                  this.props.subscribeBaseCandle(B.T.EXCHANGE, [e]);
              }
            }),
            ka(this, "changeMainTab", (e) => {
              e !== this.state.selectedTab && this.setState({ selectedTab: e });
            }),
            ka(this, "handleCurrencyChange", (e) => {
              this.props.dispatchSelectCoin(e.target.value), e.preventDefault();
            }),
            ka(this, "handleMySelectChange", (e, t) => {
              this.setState({ mySelect: e }), t.preventDefault();
            }),
            ka(this, "handleTradeSelectChange", (e, t, a) => {
              switch (t) {
                case 0:
                  (0, A.SO)("거래소", "체결", "탭클릭", e, "");
                  break;
                case 1:
                  (0, A.SO)("거래소", "일별", "탭클릭", e, "");
                  break;
                case 2:
                  const {
                      code: t,
                      codeQuery: a,
                      currency: r,
                      crixMasters: n,
                    } = this.props,
                    i = n[a || t];
                  (0, A.SO)("거래소", "코인정보", "탭클릭", e, i.code);
              }
              this.setState({ tradeSelect: t }),
                (0, pa._t)(pa.wl.EXCHANGE_TRADE_SELECTED_TAB, t),
                a.preventDefault();
            }),
            ka(this, "renderCoinInformation", (e) =>
              (0, r.Y)(fa.A, { master: e })
            ),
            ka(this, "foreign", (e) => (0, r.Y)(x.A9, { master: e })),
            ka(this, "renderTopSection", (e) => {
              const { code: t, locale: a, chart: n } = this.props,
                { selectedTab: i, initialPrice: o } = this.state;
              return (0, r.FD)("article", {
                children: [
                  (0, r.Y)(Pt.A, {
                    master: e,
                    changeMainTab: this.changeMainTab,
                    selectedTab: this.state.selectedTab,
                  }),
                  "info" === i &&
                    (0, r.Y)("div", {
                      style: { display: "block" },
                      children: this.renderCoinInformation(e),
                    }),
                  "insight" === i &&
                    (0, r.Y)("div", {
                      style: { display: "block" },
                      children: (0, r.Y)(ya.A, { master: e }),
                    }),
                  (0, r.FD)("div", {
                    style: { display: "trade" === i ? "block" : "none" },
                    children: [
                      (0, r.Y)(va.Ay, { master: e }),
                      this.foreign(e),
                      this.ciqContainer(e),
                      this.tvContainer(e),
                    ],
                  }),
                ],
              });
            }),
            ka(this, "ciqContainer", (e) => {
              const {
                  locale: t,
                  chart: a,
                  code: n,
                  currentChartHeight: i,
                } = this.props,
                { selectedTab: o } = this.state,
                s = "ciq" === a;
              return (0, r.Y)("span", {
                className: l()("graphB"),
                id: "exchangeChartiq",
                style: { display: s ? "block" : "none", height: `${i}px` },
                children:
                  e &&
                  (0, r.Y)(E.lM, {
                    config: wa,
                    pluginsToLoadLazy: R.u8,
                    chartInitialized: Aa,
                    pair: e.pair,
                    symbol: e.code,
                    container: I.dI.PC,
                    selectedTab: o,
                  }),
              });
            }),
            ka(this, "tvContainer", (e) => {
              const {
                  locale: t,
                  chart: a,
                  darkMode: n,
                  crixMasters: i,
                  currentChartHeight: o,
                } = this.props,
                { fiat: s, country: c, language: d, apiHosts: u } = t,
                { selectedTab: m } = this.state;
              return i
                ? (0, r.FD)(r.FK, {
                    children: [
                      (0, r.Y)("span", {
                        className: l()("graphB", {
                          TVChartContainer: "tv" === a,
                        }),
                        id: "tv_chart_container",
                        style: {
                          display: "tv" === a ? "block" : "none",
                          width: "100%",
                          position: "relative",
                          overflow: "hidden",
                          height: `${o}px`,
                        },
                      }),
                      (0, r.Y)(St, {
                        master: e,
                        selectedTab: m,
                        gaEvent: this.gaEvent,
                      }),
                    ],
                  })
                : null;
            }),
            ka(this, "instantSection", (e) => {
              const { locale: t } = this.props,
                a = t.fiat;
              return e.quoteCurrencyCode !== a
                ? null
                : (0, r.Y)(Nt, { master: e });
            }),
            ka(this, "renderOrderSection", (e) => {
              const {
                  code: t,
                  isAuthenticated: a,
                  darkMode: n,
                  isAdvancedOrderEnabled: i,
                } = this.props,
                { initialPrice: o } = this.state;
              return (0, r.FD)("div", {
                className: "halfB",
                children: [
                  (0, r.Y)("div", {
                    className: "leftB",
                    children: (0, r.Y)(qt.Ay, {
                      master: e,
                      initialPrice: o,
                      isAdvancedOrderEnabled: i,
                    }),
                  }),
                  (0, r.FD)("div", {
                    className: "rightB",
                    children: [
                      (0, r.Y)(ga.A, {}),
                      this.instantSection(e),
                      (0, r.Y)(zt.A, {
                        master: e,
                        darkMode: n,
                        t: this.props.t,
                        isGlobal: !1,
                        isAdvancedOrderEnabled: i,
                      }),
                    ],
                  }),
                ],
              });
            }),
            ka(this, "renderTradeSection", (e) =>
              (0, r.Y)("article", {
                children: (0, r.FD)("span", {
                  className: "tabB",
                  children: [
                    (0, r.Y)("ul", {
                      className: "top",
                      children: m()(
                        [
                          this.props.t("common.exchange.trades"),
                          this.props.t("exchange:tradeTicks.daily"),
                        ],
                        (e, t) =>
                          (0, r.Y)(
                            "li",
                            {
                              children: (0, r.Y)("a", {
                                href: "#",
                                className: l()({
                                  on: t === this.state.tradeSelect,
                                }),
                                title: e,
                                onClick: this.handleTradeSelectChange.bind(
                                  this,
                                  e,
                                  t
                                ),
                                children: e,
                              }),
                            },
                            t
                          )
                      ),
                    }),
                    {
                      0: (0, r.Y)(_t.Ay, { master: e }),
                      1: (0, r.Y)(ba.A, { master: e }),
                    }[C()(this.state.tradeSelect)],
                  ],
                }),
              })
            ),
            ka(this, "renderRightSection", (e, t) =>
              (0, r.Y)(Ht.Ay, { master: e, pathname: t })
            );
        }
        componentDidMount() {
          var e;
          const {
              code: t,
              codeQuery: a,
              currency: r,
              crixMasters: n,
              locale: i,
              isAuthenticated: o,
              location: l,
              match: s,
              replace: c,
            } = this.props,
            d = l.state,
            u =
              (null == (e = null == s ? void 0 : s.params) ? void 0 : e.code) ||
              a,
            m = n[u || t];
          u &&
            "info" === this.props.tab &&
            (this.setState({ selectedTab: "info" }),
            this.props.replace(`${ca.pjK}?code=${u}`)),
            (0, la._)({ event: "화면진입_거래소", page: "거래소" }),
            this.gaEvent(
              "차트타입",
              "로드",
              "tv" === this.props.chart ? "TradingView" : "ChartIQ"
            ),
            u && this.props.dispatchSelectCoin(u),
            this.fetchData(),
            this.props.isAuthenticated && this.props.fetchInvestmentAssets(),
            t && (u || this.props.replace(`${ca.pjK}?code=${t}`)),
            m &&
              ((0, ve.YF)(m) ||
                this.props.replace(`${ca.pjK}?code=${(0, ve.TQ)(i)}`),
              (d && d.fromTickers) ||
                this.props.dispatchSelectCurrency(m.quoteCurrencyCode),
              window.scrollTo(0, 0),
              this.setupInitialPrice());
        }
        componentDidUpdate(e, t) {
          const {
              codeQuery: a,
              code: r,
              crixMasters: n,
              dispatchSelectCoin: i,
              locale: o,
              isAuthenticated: l,
              recent: s,
              currency: c,
            } = this.props,
            u = n[r];
          if (n !== e.crixMasters && r) {
            !(e.crixMasters && e.crixMasters[r]) && u
              ? ((0, ve.YF)(u) || this.props.dispatchSelectCoin((0, ve.TQ)(o)),
                l &&
                  this.props.fetchFundsAccountAvgBuyPrice(
                    u.baseCurrencyCode,
                    u.quoteCurrencyCode
                  ))
              : u || this.props.dispatchSelectCoin((0, ve.TQ)(o));
          }
          if (!r && n) {
            const e = d()(b()(n));
            e && i(e.code);
          }
          r !== e.code &&
            (0, ve.YF)(u) &&
            (this.props.replace(`${ca.pjK}?code=${r}`), this.fetchData()),
            (e.recent && e.estimateFactor && r === e.code) ||
              this.setupInitialPrice();
        }
        componentWillUnmount() {
          this.props.unsubscribeRecentCrix(B.T.EXCHANGE),
            this.props.unsubscribeCrixTrade(B.T.EXCHANGE),
            this.props.unsubscribeCrixEvent(B.T.EXCHANGE),
            this.props.unsubscribeBaseCandle(B.T.EXCHANGE);
        }
        render() {
          const {
              codeQuery: e,
              code: t,
              master: a,
              browserRecommend: i,
              isAuthenticated: o,
              twitterInfo: s,
              locale: c,
            } = this.props,
            { pathname: d } = this.props.location;
          if (!t || !a) return null;
          if ("PREVIEW" === a.marketState) return null;
          const u = (0, oa.Lv)({ countryCode: c.country, master: a });
          return (0, r.FD)(r.FK, {
            children: [
              (0, r.Y)(na, {}),
              (0, r.FD)(n.Profiler, {
                id: "exchange",
                onRender: Pa,
                children: [
                  (0, r.Y)(Ca.g, {}),
                  (0, r.Y)(O.i, { meta: u }),
                  (0, r.Y)(D.G, { master: a }),
                  (0, r.FD)("div", {
                    className: l()("mainB", { On: i }),
                    children: [
                      (0, r.FD)("section", {
                        className: "ty01",
                        children: [
                          (0, r.Y)(kt.A, {}),
                          (0, r.Y)(Ta.A, { master: a }),
                          this.renderTopSection(a),
                          (0, ve.YF)(a) ? this.renderOrderSection(a) : null,
                          (0, ve.YF)(a) ? this.renderTradeSection(a) : null,
                        ],
                      }),
                      this.renderRightSection(a, d),
                    ],
                  }),
                ],
              }),
            ],
          });
        }
      }
      const Ma = (0, i.createSelector)([mt.Sf, et.P9, ha.TJ], (e, t, a) => {
          const r = e && e[a || t];
          return null == r ? void 0 : r.quoteCurrencyCode;
        }),
        Da = (0, ma.Kd)(Ma, !0),
        xa = (0, i.createSelector)(
          [
            xt.y,
            ua.lQ,
            ze.BQ,
            mt.Sf,
            et.P9,
            ha.TJ,
            et.YM,
            Ve.sk,
            da.n,
            Ve.pJ,
            Xe.G3,
            Ve.bg,
            Ve.rB,
            Da,
            ha.sB,
          ],
          (e, t, a, r, n, i, o, l, s, c, d, u, m, h, p) => {
            const g = r[i || n];
            return g
              ? {
                  isAuthenticated: a,
                  crixMasters: r,
                  master: g,
                  code: n,
                  codeQuery: i,
                  currency: o,
                  browserRecommend: l,
                  twitterInfo: s,
                  chart: c,
                  locale: d,
                  darkMode: u,
                  currentChartHeight: m,
                  estimateFactor: h,
                  tab: p,
                  recent: t[n],
                }
              : {
                  isAuthenticated: a,
                  crixMasters: r,
                  master: g,
                  code: n,
                  codeQuery: i,
                  currency: o,
                  browserRecommend: l,
                  twitterInfo: s,
                  chart: c,
                  locale: d,
                  darkMode: u,
                  currentChartHeight: m,
                  tab: p,
                };
          }
        ),
        Oa = {
          dispatchSelectCoin: U.ki,
          subscribeRecentCrix: w.Yv,
          unsubscribeRecentCrix: w.R8,
          subscribeCrixTrade: w.HC,
          unsubscribeCrixTrade: w.AR,
          replace: s.HC,
          dispatchSelectCurrency: M.G,
          fetchFundsAccountAvgBuyPrice: v.ti,
          subscribeRecentCrixs: w.VQ,
          fetchInvestmentAssets: S.DO,
          fetchMemberSettings: k.W2,
          fetchMe: P.Ni,
          subscribeCrixEvent: w.NW,
          unsubscribeCrixEvent: w.Eu,
          subscribeBaseCandle: w.Jr,
          unsubscribeBaseCandle: w.Y,
        },
        Ia = (0, y.Ng)(xa, Oa),
        Ba = (e) => Ia((0, f.C)()(e));
      var Ea = Ba((0, sa.A)(Ua));
    },
    64915: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return Ke;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(61895),
        o = a(333),
        l = a(97500),
        s = a.n(l),
        c = a(95915),
        d = a.n(c),
        u = a(52604),
        m = a(6448),
        h = a(40201),
        p = a(72851),
        g = a(16787),
        C = a(28656),
        T = a(40377),
        b = a(86530),
        f = a(1467),
        y = a(60252),
        v = a(46609),
        S = a(96495),
        k = a(8006),
        P = a(67027),
        w = a(48445),
        A = a(32750),
        U = a(65826),
        M = a(21325),
        D = a(27554),
        x = a(62205),
        O = a(2481),
        I = a(16790),
        B = a(38148),
        E = a(4633),
        R = a.n(E),
        L = a(54884),
        F = a.n(L),
        N = a(66086),
        V = a.n(N),
        z = a(68382),
        q = a.n(z),
        H = a(13409),
        _ = a(12092),
        Y = a(68357),
        j = a(92459),
        K = a(23123),
        W = a(39614),
        G = a(72307),
        Q = a(71473),
        Z = a(56786),
        J = Object.defineProperty,
        X = Object.defineProperties,
        $ = Object.getOwnPropertyDescriptors,
        ee = Object.getOwnPropertySymbols,
        te = Object.prototype.hasOwnProperty,
        ae = Object.prototype.propertyIsEnumerable,
        re = (e, t, a) =>
          t in e
            ? J(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        ne = (e, t) => {
          for (var a in t || (t = {})) te.call(t, a) && re(e, a, t[a]);
          if (ee) for (var a of ee(t)) ae.call(t, a) && re(e, a, t[a]);
          return e;
        },
        ie = (e, t) => X(e, $(t));
      const oe = {
        popupContainer: x.AH`
    box-sizing: border-box;
    border-radius: 4px;
  `,
        container: x.AH`
    position: relative;
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
    display: flex;
    flex-direction: column;
    max-height: 600px;
  `,
        contentContainer: x.AH`
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    padding: 32px 20px 24px 20px;
  `,
        contentTitleContainer: x.AH`
    margin-bottom: 20px;
  `,
        contentBodyContainer: x.AH`
    font-size: ${I.default.fontSize.body4};
    color: ${I.default.colors.contents_2};
    overflow: auto;
  `,
        footerContainer: x.AH`
    display: flex;
    padding: 18px 20px;
    align-items: center;
    justify-content: space-between;
  `,
        footerLeftContainer: x.AH`
    display: flex;
    align-items: center;
    cursor: pointer;
  `,
        grayBox: x.AH`
    padding: 12px;
    background-color: ${I.default.colors.bg_sg1};
    box-sizing: border-box;
  `,
        icon: x.AH`
    cursor: pointer;
  `,
        anchor: x.AH`
    display: flex;
    margin-top: 4px;
    align-items: center;
    color: ${I.default.colors.accent_blue};
  `,
      };
      var le = (0, m.Ng)(null, {
          fetchAccountAuthRequestDialogWeb: h.X5,
          closePopup: A.f,
        })(
          ({
            closePopup: e,
            fetchAccountAuthRequestDialogWeb: t,
            depositAccount: a,
          }) => {
            const i = (0, m.wA)(),
              { t: o } = (0, H.B)("wallets"),
              l = (0, G.a)(),
              [s, c] = n.useState({ notForToday: !0, closed: !1 }),
              d = (0, m.d4)(
                (e) => (0, Q.bV)(e)[Z.N.AccountAuthRequestDialogWeb]
              );
            (0, n.useEffect)(() => {
              i((0, h.Ei)(Z.N.AccountAuthRequestDialogWeb));
            }, [i]),
              (0, n.useEffect)(() => {
                const e = (0, W.jD)(d);
                c((t) =>
                  ie(ne({}, t), {
                    apiActive: e.active,
                    apiType: e.type,
                    apiEventImgUrl: e.event_img_url,
                    apiEventLanding: e.event_landing,
                    apiEventTargetUrl: e.event_target_url,
                  })
                );
              }, [d]);
            const u = (0, n.useCallback)((e) => {
                e.preventDefault(),
                  c((e) => ie(ne({}, e), { notForToday: !e.notForToday }));
              }, []),
              p =
                ((0, n.useCallback)(() => {
                  c((e) => ie(ne({}, e), { closed: !0 })), e();
                }, [e]),
                (0, n.useCallback)(() => {
                  c((e) => ie(ne({}, e), { closed: !0 })),
                    s.notForToday &&
                      localStorage.setItem("priorityPopup", q()(F()()));
                }, [s.notForToday])),
              g = (0, n.useMemo)(() => {
                const {
                  apiActive: e,
                  apiType: t,
                  apiEventTargetUrl: r,
                  closed: n,
                } = s;
                return (
                  !(e && !n) ||
                  ((("event_target" !== t && "event_all" !== t) ||
                    !r ||
                    !l.includes(r)) &&
                    !("event_target" === t && R()(a) && !r) &&
                    !("event_all" === t && !r))
                );
              }, [a, s, l]),
              {
                notForToday: C,
                apiActive: T,
                apiType: b,
                apiEventImgUrl: f,
                apiEventLanding: y,
              } = s;
            if (g) return null;
            if (!T || !y) return null;
            const v = V()(localStorage.getItem("priorityPopup"));
            return (v && F()() - v < 864e5) || "normal" === b
              ? null
              : (0, r.Y)(_.D, {
                  sx: oe.popupContainer,
                  onPressEscape: p,
                  children: (0, r.FD)(O.az, {
                    sx: oe.container,
                    children: [
                      (0, r.FD)(O.az, {
                        sx: oe.contentContainer,
                        children: [
                          (0, r.Y)(O.az, {
                            sx: oe.contentTitleContainer,
                            children: (0, r.Y)(O.Z3, {
                              variant: "heading8",
                              color: "contents_1",
                              weight: "bold",
                              children: o("wallets_phishing_title"),
                            }),
                          }),
                          (0, r.FD)(O.BJ, {
                            direction: "column",
                            spacing: 12,
                            sx: oe.contentBodyContainer,
                            children: [
                              (0, r.FD)(O.az, {
                                children: [
                                  (0, r.Y)(O.Z3, {
                                    tag: "p",
                                    children: o("wallets_phishing_body1"),
                                  }),
                                  (0, r.FD)(j.Z, {
                                    href: K.xn,
                                    css: oe.anchor,
                                    children: [
                                      o("wallets_phishing_body_link"),
                                      " ",
                                      (0, r.Y)(O.In, {
                                        type: "N_arrow_right_16",
                                        width: 16,
                                        height: 16,
                                        color: "accent_blue",
                                      }),
                                    ],
                                  }),
                                ],
                              }),
                              (0, r.FD)(B.S_, {
                                textSize: "body4",
                                textColor: "contents_2",
                                iconType: "N_check_24",
                                iconSize: 24,
                                iconColor: "accent_green",
                                sx: oe.grayBox,
                                children: [
                                  (0, r.Y)(B.S_.Item, {
                                    children: (0, r.Y)(Y.z, {
                                      text: o("wallets_phishing_box"),
                                      keyword: o(
                                        "wallets_phishing_box_highlight"
                                      ),
                                    }),
                                  }),
                                  (0, r.Y)(B.S_.Item, {
                                    children: (0, r.Y)(Y.z, {
                                      text: o("wallets_phishing_box2"),
                                      keyword: o(
                                        "wallets_phishing_box2_highlight"
                                      ),
                                    }),
                                  }),
                                  (0, r.Y)(B.S_.Item, {
                                    children: (0, r.Y)(Y.z, {
                                      text: o("wallets_phishing_box3"),
                                      keyword: o(
                                        "wallets_phishing_box3_highlight"
                                      ),
                                    }),
                                  }),
                                ],
                              }),
                              (0, r.Y)(O.Z3, {
                                children: o("wallets_phishing_body2"),
                              }),
                              (0, r.Y)(O.Z3, {
                                tag: "p",
                                children: (0, r.Y)(Y.z, {
                                  text: o("wallets_phishing_body3"),
                                  keyword: o(
                                    "wallets_phishing_body3_highlight"
                                  ),
                                  color: "accent_blue",
                                  weight: "regular",
                                }),
                              }),
                              (0, r.Y)(O.Z3, {
                                tag: "p",
                                weight: "bold",
                                color: "contents_1",
                                children: o("wallets_phishing_body4"),
                              }),
                            ],
                          }),
                        ],
                      }),
                      (0, r.FD)(O.az, {
                        sx: oe.footerContainer,
                        children: [
                          (0, r.Y)(O.az, {
                            sx: oe.footerLeftContainer,
                            children: (0, r.Y)(B.Fw, {
                              hitArea: "all",
                              checked: C,
                              onChange: u,
                              gap: 4,
                              size: 24,
                              type: "line",
                              children: (0, r.Y)(O.Z3, {
                                variant: "body2",
                                color: "contents_2",
                                children: "하루 동안 보지 않기",
                              }),
                            }),
                          }),
                          (0, r.Y)(O.In, {
                            onClick: p,
                            sx: oe.icon,
                            width: 24,
                            height: 24,
                            type: "N_close_24",
                            color: I.default.colors.contents_2,
                          }),
                        ],
                      }),
                    ],
                  }),
                });
          }
        ),
        se = a(78272),
        ce = a(15920),
        de = a(82901),
        ue = a(81257),
        me = a(67546),
        he = a(64102),
        pe = a(14047),
        ge = a(48406),
        Ce = a(76342),
        Te = a(53692),
        be = a(43190),
        fe = a(56177),
        ye = a(50861),
        ve = a(79150),
        Se = a(70468),
        ke = a(12085),
        Pe = a(31642),
        we = a(13076),
        Ae = a(97530),
        Ue = a(20522),
        Me = Object.defineProperty,
        De = Object.defineProperties,
        xe = Object.getOwnPropertyDescriptors,
        Oe = Object.getOwnPropertySymbols,
        Ie = Object.prototype.hasOwnProperty,
        Be = Object.prototype.propertyIsEnumerable,
        Ee = (e, t, a) =>
          t in e
            ? Me(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        Re = (e, t) => {
          for (var a in t || (t = {})) Ie.call(t, a) && Ee(e, a, t[a]);
          if (Oe) for (var a of Oe(t)) Be.call(t, a) && Ee(e, a, t[a]);
          return e;
        },
        Le = (e, t) => De(e, xe(t)),
        Fe = (e, t) => {
          var a = {};
          for (var r in e) Ie.call(e, r) && t.indexOf(r) < 0 && (a[r] = e[r]);
          if (null != e && Oe)
            for (var r of Oe(e))
              t.indexOf(r) < 0 && Be.call(e, r) && (a[r] = e[r]);
          return a;
        },
        Ne = (e, t, a) => (Ee(e, "symbol" != typeof t ? t + "" : t, a), a);
      const Ve = [ge.pjK, ge.P49],
        ze = [ge.P49, ge.DRH, ge.zju, ge.DZm],
        qe = [ge.P49, ge.DZm],
        He = [ge.pjK, ge.rIv, ge.AaB, ge.I_x, ge.ce2];
      class _e extends n.Component {
        constructor() {
          super(...arguments),
            Ne(this, "tickInterval"),
            Ne(this, "state", {
              prevChecksum: "",
              mainPopupPayload: null,
              emergencyPopupPayload: null,
            });
        }
        handleFetchPopupGroups() {
          this.props.dispatch((0, g.r)("main")).then((e) => {
            var t, a;
            const r =
              null ==
              (a =
                null == (t = null == e ? void 0 : e.data) ? void 0 : t.payload)
                ? void 0
                : a.data;
            r &&
              this.setState({
                mainPopupPayload: {
                  setPayload: () => {
                    this.setState({ mainPopupPayload: null });
                  },
                  blindOption: r.blindOption,
                  images: r.popups,
                },
              });
          });
        }
        handleFetchEmergencyPopup() {
          this.props.fetchEmergencyPopup("web").then((e) => {
            var t;
            const a =
              null == (t = null == e ? void 0 : e.payload) ? void 0 : t.data;
            a &&
              this.setState({
                emergencyPopupPayload: Re(
                  {
                    setPayload: () => {
                      this.setState({ emergencyPopupPayload: null });
                    },
                  },
                  a
                ),
              });
          });
        }
        componentDidMount() {
          var e, t;
          if (
            (this.props.fetchTimestamp(),
            this.props.fetchLastWebClientVersion(),
            this.props.fetchBaseCurrencyNameMap(),
            this.props.fetchSubAddressCoinsNetwork(),
            "kr" === this.props.locale.country)
          )
            localStorage.setItem("userTimezone", "Asia/Seoul");
          else {
            const e = (0, me.Md)();
            localStorage.setItem("userTimezone", e);
          }
          if (
            (this.props.isAuthenticated &&
              ("global" === this.props.type
                ? (this.props.fetchMemberProfile(),
                  this.props.fetchMemberLevel())
                : (this.props.fetchMeKyc(),
                  this.props.fetchMe(),
                  this.props.fetchKrwDefaults())),
            this.handleFetchPopupGroups(),
            this.handleFetchEmergencyPopup(),
            ue.Zb)
          ) {
            const e = localStorage.getItem("browserRecommendRejected");
            e && "undefined" !== e
              ? localStorage &&
                new Date(e) < new Date(new Date().getTime() - 864e5)
                ? this.props.fetchBrowserRecommend(!0)
                : this.props.fetchBrowserRecommend(!1)
              : this.props.fetchBrowserRecommend(!0);
          } else this.props.fetchBrowserRecommend(!1);
          (null == (e = this.props.query) ? void 0 : e.lang) &&
            this.props.changeLanguage(
              null == (t = this.props.query) ? void 0 : t.lang
            ),
            this.props.fetchStatus(this.props.locale.country).then((e) => {
              e.payload &&
                e.payload.maintenance &&
                e.payload.maintenanceUrl &&
                (window.location.href = e.payload.maintenanceUrl);
            });
        }
        componentDidUpdate(e) {
          const { pathname: t } = this.props.location;
          t === ge.jPl
            ? document.body && document.body.classList.add("main")
            : document.body && document.body.classList.remove("main"),
            !e.isAuthenticated &&
              this.props.isAuthenticated &&
              ("global" === this.props.type
                ? this.props.fetchMemberProfile()
                : (this.props.fetchMeKyc(), this.props.fetchMe())),
            e.location !== this.props.location &&
              (this.props.fetchLastWebClientVersion(),
              this.props.location.pathname === ge.jPl &&
                (this.handleFetchPopupGroups(),
                this.handleFetchEmergencyPopup())),
            e.lastWebClientVersion &&
              e.lastWebClientVersion !== this.props.lastWebClientVersion &&
              window.location.reload();
        }
        componentWillUnmount() {
          clearInterval(this.tickInterval);
        }
        render() {
          var e;
          const { pathname: t, search: a } = this.props.location,
            n = this.props,
            {
              children: i,
              layoutClassName: o,
              layoutStyle: l,
              type: c,
              browserRecommend: u,
              userTimezone: m,
              darkMode: h,
            } = n,
            p =
              (Fe(n, [
                "children",
                "layoutClassName",
                "layoutStyle",
                "type",
                "browserRecommend",
                "userTimezone",
                "darkMode",
              ]),
              null == (e = t.match(/^\/[^/]+/g)) ? void 0 : e[0]),
            g = h && d()(Ve, t),
            C = !d()(ze, t),
            T = !d()(qe, t),
            b = d()(He, p) || t === ge.xO_ || t === ge.rzg || t === ge.k5W,
            { country: f, language: y } = this.props.locale,
            v = `country--${f}`;
          return (0, r.Y)(D.A, {
            className: s()("bgWhite", { noFooterBorder: b }),
            children: (0, r.FD)("div", {
              id: "UpbitLayout",
              className: s()(v, { DarkMode: g }),
              lang: "th" === f && "th" === y ? "th" : void 0,
              children: [
                (0, r.Y)("div", { id: "checkVerifMethodModal" }),
                (0, r.Y)(de.A, { isAuthenticated: this.props.isAuthenticated }),
                t === ge.jPl
                  ? (0, r.FD)(r.FK, {
                      children: [
                        this.state.mainPopupPayload &&
                          (0, r.Y)(Ae.A, Re({}, this.state.mainPopupPayload)),
                        this.state.emergencyPopupPayload &&
                          (0, r.Y)(
                            Pe.A,
                            Re({}, this.state.emergencyPopupPayload)
                          ),
                      ],
                    })
                  : (0, r.Y)(ce.A, { disableSharedData: !0 }),
                (0, r.Y)(se.A, {}),
                (0, r.Y)(M.P, {}),
                this.props.isAuthenticated &&
                  "global" !== c &&
                  (0, r.Y)(le, { depositAccount: this.props.depositAccount }),
                t === ge.jPl && "global" !== c ? (0, r.Y)(we.A, {}) : null,
                (0, r.Y)(U.c, {}),
                (0, r.Y)("div", { id: "QuoteOrderConfirmPopup" }),
                C && (0, r.Y)(ke.A, {}),
                (0, r.Y)("div", {
                  className: s()(o, { on: u && o && o.globalLayout }),
                  style: l,
                  children: i,
                }),
                T && (0, r.Y)(Se.A, {}),
              ],
            }),
          });
        }
      }
      const Ye = (0, i.createSelector)(
          [ve.BQ, Te.Sf, Q.pL, fe.G3, be.sk, ye.iT, be.Mt, Ce.rN, be.bg],
          (e, t, a, r, n, i, o, l, s) => ({
            isAuthenticated: e,
            masters: t,
            lastWebClientVersion: a,
            locale: r,
            browserRecommend: n,
            query: i,
            userTimezone: o,
            depositAccount: l,
            darkMode: s,
          })
        ),
        je = (0, m.Ng)(Ye, (e) =>
          Le(
            Re(
              {},
              (0, o.zH)(
                {
                  fetchBrowserRecommend: w.b,
                  signOutKakaoAuth: T.ZN,
                  logoutAuth: v.FW,
                  closePopup: A.f,
                  fetchTimestamp: y.v,
                  fetchBaseCurrencyNameMap: h.cf,
                  fetchMe: f.Ni,
                  fetchMeKyc: f.en,
                  sessionRevoked: T.Zn,
                  fetchMemberProfile: S.oe,
                  fetchLastWebClientVersion: h.gh,
                  fetchMemberLevel: S.nv,
                  changeLanguage: P.v2,
                  fetchKrwDefaults: C.x,
                  fetchPopupGroupsApi: g.r,
                  fetchEmergencyPopup: p.E,
                  fetchStatus: k.V,
                  fetchSubAddressCoinsNetwork: h.pC,
                },
                e
              )
            ),
            { dispatch: e }
          )
        );
      var Ke = (0, u.C)()(
        je((e) => {
          var t = e,
            { children: a } = t,
            i = Fe(t, ["children"]);
          const { type: o } = i,
            l = (0, pe.j)(),
            s = (0, pe.G)(ve.BQ),
            { updateLocaleFlag: c } = (0, he.X)();
          return (
            (0, Ue.Z)(),
            (0, n.useEffect)(() => {
              s &&
                "global" === o &&
                l((0, b.W2)())
                  .unwrap()
                  .then((e) => {
                    var t, a, r, n;
                    (null ==
                    (a =
                      null == (t = null == e ? void 0 : e.payload)
                        ? void 0
                        : t.user)
                      ? void 0
                      : a.deviceTimezoneOn) ||
                      localStorage.setItem(
                        "userTimezone",
                        null ==
                          (n =
                            null == (r = null == e ? void 0 : e.payload)
                              ? void 0
                              : r.user)
                          ? void 0
                          : n.branchTimezone
                      );
                  });
            }, [l, s, o]),
            (0, r.Y)(_e, Le(Re({}, i), { updateLocaleFlag: c, children: a }))
          );
        })
      );
    },
    78272: function (e, t, a) {
      "use strict";
      a.d(t, {
        n: function () {
          return k;
        },
      });
      var r = a(79474),
        n = a(29250),
        i = a.n(n),
        o = a(4633),
        l = a.n(o),
        s = a(67194),
        c = a.n(s),
        d = a(51703),
        u = a.n(d),
        m = a(6448),
        h = a(25280),
        p = a(4871),
        g = a(1467),
        C = a(95200),
        T = a(63701),
        b = a(14047),
        f = a(53692),
        y = a(97046),
        v = a(50861),
        S = a(79150);
      const k = () => {
        const e = (0, b.j)(),
          t = (0, r.useRef)([]),
          a = (0, m.d4)(v.TJ),
          n = (0, m.d4)(S.BQ),
          o = (0, m.d4)(y.Id),
          s = (0, m.d4)(f.Sf),
          d = (0, r.useCallback)(
            (t) => {
              i()(t, (t) => {
                e((0, g.N6)(t));
              }),
                e((0, C.Yd)());
            },
            [e]
          ),
          k = (0, r.useCallback)(
            (t) => {
              e((0, p.Tj)(t));
            },
            [e]
          );
        (0, r.useEffect)(() => {
          const r = setInterval(() => {
            if (!l()(t.current)) {
              let r = [],
                n = [];
              i()(t.current, (e) => {
                const { code: t, state: a } = e;
                "trade" === a || "prevented" === a
                  ? r.push(t)
                  : "cancel" === a && n.push(t);
              }),
                (t.current = []),
                (r = u()(r)),
                (n = u()(n)),
                i()(r, (t) => {
                  if (a && t === a) {
                    const a = s[t];
                    a && e((0, h.ti)(a.baseCurrencyCode, a.quoteCurrencyCode));
                  }
                });
              const o = u()([...r, ...n]),
                l = c()(o, (e) => (0, T.mv)(e));
              d(l),
                i()(o, (e) => {
                  if (a && e === a) {
                    const e = (0, T.mv)(a);
                    e && k(e);
                  }
                });
            }
          }, 1e3);
          return () => {
            clearInterval(r);
          };
        }, [a, e, k, d, s]),
          (0, r.useEffect)(() => {
            n &&
              i()(o, (e) => {
                e.volume && t.current.push(e);
              });
          }, [a, e, s, o, n]);
      };
      t.A = () => (k(), null);
    },
    27988: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474),
        i = a(62205),
        o = a(8013),
        l = a(2481),
        s = a(16790),
        c = a(69889),
        d = a(13409),
        u = a(6448),
        m = a(16510),
        h = a(14047),
        p = a(4160),
        g = a(48406),
        C = a(43190),
        T = a(56177);
      const b = {
        container: i.AH`
    margin-bottom: 10px;
    background-color: ${s.default.colors.bg_0};
  `,
        innerContainer: i.AH`
    padding: 8px 20px;
    box-sizing: border-box;
  `,
        contentWrap: i.AH`
    flex: 1;
  `,
        content: i.AH`
    cursor: pointer;
    display: flex;
    width: 100%;
  `,
        close: i.AH`
    cursor: pointer;
  `,
      };
      t.A = () => {
        var e, t;
        const a = (0, o.DP)(),
          i = (0, u.d4)(T.md),
          f = ((0, u.d4)(C.bg), (0, h.j)()),
          { t: y } = (0, d.B)("common"),
          [v, S] = (0, n.useState)(!0),
          k =
            null ==
            (t =
              null == (e = (0, p.d5)({ language: i }).data)
                ? void 0
                : e.payload)
              ? void 0
              : t.data,
          P = null == k ? void 0 : k.severe,
          w = (0, n.useCallback)((e) => {
            S(!1), localStorage.setItem("emergencyNotice", e);
          }, []),
          A = (0, n.useCallback)(
            (e) => {
              ((e, t, a) => {
                const r = a || "";
                let n = "";
                window.location.pathname.includes("exchange")
                  ? (n = "거래소")
                  : window.location.pathname.includes("balances")
                  ? (n = "입출금")
                  : window.location.pathname.includes("investments") &&
                    (n = "투자내역"),
                  (0, m.SO)(n, "공지사항", e, t, r);
              })("공지사항게시글선택", "", e),
                f((0, c.VC)(`${g.o03}?id=${e}`));
            },
            [f]
          );
        return v && k && k.active
          ? localStorage.getItem("emergencyNotice") === k.uuid
            ? null
            : (0, r.Y)(l.az, {
                sx: b.container,
                children: (0, r.FD)(l.BJ, {
                  spacing: 6,
                  sx: b.innerContainer,
                  style: {
                    backgroundColor: `${
                      P ? s.default.colors.opacity_red_2 : a.colors.bg_0
                    }`,
                  },
                  children: [
                    (0, r.Y)(l.In, {
                      color: P
                        ? s.default.colors.accent_red
                        : s.default.colors.contents_primary,
                      type: P
                        ? "N_warning_triangle_fill_16"
                        : "N_warning_circle_fill_16",
                      width: 16,
                      height: 16,
                    }),
                    (0, r.Y)(l.Z3, {
                      weight: "bold",
                      variant: "body3",
                      style: {
                        color: P
                          ? s.default.colors.accent_red
                          : s.default.colors.contents_primary,
                      },
                      children: y(
                        P ? "urgentNotice.severeTitle" : "urgentNotice.title"
                      ),
                    }),
                    (0, r.FD)(l.BJ, {
                      justifyContent: "center",
                      sx: b.contentWrap,
                      children: [
                        (0, r.Y)(l.az, {
                          onClick: () => A(k.noticeId),
                          sx: b.content,
                          children: (0, r.Y)(l.Z3, {
                            weight: "bold",
                            variant: "body3",
                            color: P ? "accent_red" : "contents_1",
                            children: k.content,
                          }),
                        }),
                        (0, r.Y)(l.In, {
                          sx: b.close,
                          onClick: () => w(k.uuid),
                          type: "N_close_16",
                          width: 16,
                          height: 16,
                          color: a.colors.font_1,
                        }),
                      ],
                    }),
                  ],
                }),
              })
          : null;
      };
    },
    73389: function (e, t, a) {
      "use strict";
      a.d(t, {
        VU: function () {
          return ge;
        },
        KV: function () {
          return be;
        },
        rl: function () {
          return he;
        },
        Cn: function () {
          return Ue;
        },
        Qn: function () {
          return Te;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(40510),
        o = a.n(i),
        l = a(97500),
        s = a.n(l),
        c = a(90372),
        d = a.n(c),
        u = a(4633),
        m = a.n(u),
        h = a(67194),
        p = a.n(h),
        g = a(6690),
        C = a.n(g),
        T = a(93312),
        b = a.n(T),
        f = a(34082),
        y = a.n(f),
        v = a(40485),
        S = a(13409),
        k = a(6448),
        P = a(1105),
        w = a(68989),
        A = a(29289),
        U = a(67611),
        M = a(98871),
        D = a(35421),
        x = a(86530),
        O = a(14047),
        I = a(50310);
      const B = ({ isAdvancedOrderEnabled: e }) => {
        const { t: t } = (0, S.B)(),
          { orderReceiptConfirmation: a } = (0, O.G)(I.p),
          i = (0, O.j)(),
          o = (0, k.wA)(),
          l = Te(),
          c = b()(y()(t("exchange.instantOrderConfirmation.body")), /\r?\n/),
          d = (0, n.useCallback)(
            (e) => {
              null == e || e.preventDefault(),
                (0, D.s)("711-간편주문 동의_확인", a),
                !1 === a &&
                  i((0, x.Vu)(!0))
                    .unwrap()
                    .then((e) => {
                      e.error || o((0, w.lc)());
                    });
            },
            [i, o, a]
          );
        return (0, r.Y)("div", {
          className: s()("InstantOrder", "InstantOrder--nonTab", {
            advancedOrder: e,
          }),
          children: (0, r.FD)("div", {
            className: "InstantOrder__consent InstantOrderConsent",
            children: [
              (0, r.Y)("div", {
                className: "InstantOrderConsent__title",
                children: t("exchange.instantOrderConfirmation.title"),
              }),
              (0, r.Y)("ul", {
                className: "InstantOrderConsent__dotList",
                children: p()(c, (e, t) =>
                  (0, r.Y)("li", { dangerouslySetInnerHTML: { __html: e } }, t)
                ),
              }),
              (0, r.Y)("div", {
                className: "InstantOrderConsent__btnArea",
                children: (0, r.Y)(M.e, {
                  className: `${l}Btn_blue_block`,
                  onClick: d,
                  children: t("exchange.instantOrderConfirmation.confirmBtn"),
                }),
              }),
            ],
          }),
        });
      };
      var E = a(98002),
        R = a.n(E),
        L = a(66086),
        F = a.n(L),
        N = a(92265),
        V = a(48400),
        z = a(51082);
      const q = ({ receipt: e, master: t }) => {
        const { type: a, ordType: r, target: i } = e,
          { t: o } = (0, S.B)(),
          { quoteCurrencyCode: l, baseCurrencyCode: s } = t,
          {
            price: c,
            instantOrderBuyPrice: d,
            instantOrderSellPrice: u,
          } = (0, O.G)(V.s1),
          m = a === z.Vo.orderBid || a === z.Vo.watchBid,
          h = a === z.Vo.watchBid || a === z.Vo.watchAsk,
          p = a === z.Vo.cancel,
          g = r !== z.xH.limit,
          C = (m ? d : u) || c,
          T = (0, n.useCallback)(
            (e, t) => {
              let a = "";
              return g
                ? a + ` ${o("exchange.instantOrderDesc.marketPrice")}`
                : ((e !== z.Gx.currentPrice && e !== z.Gx.breakEvenPrice) ||
                    ((a += ` ${o(`exchange.instantOrderDesc.${R()(e)}`)}`),
                    t && (a += ` ${(0, N.lH)(t, 0)}`)),
                  e === z.Gx.selectPrice &&
                    (a += ` ${(0, N.pe)(C, l, s)} ${l}`),
                  a);
            },
            [s, g, C, l, o]
          ),
          b = (0, n.useMemo)(() => {
            const {
                priceType: t,
                priceValue: a,
                watchPriceType: r,
                watchPriceValue: n,
              } = e,
              i = F()(a),
              l = F()(n);
            let s = "";
            return (
              h && (s += `${o("exchange.instantOrderDesc.stop")}:${T(r, l)}, `),
              (s += `${o("exchange.instantOrderDesc.price")}:${T(t, i)}`),
              s
            );
          }, [e, h, o, T]),
          f = (0, n.useMemo)(() => {
            const { priceValue: t, volumeValue: a, ordType: r } = e,
              n = F()(t),
              i = F()(a),
              l = r === z.xH.price;
            let s = "";
            return (
              (s += `${o(
                "exchange.instantOrderDesc." + (l ? "total" : "amount")
              )}: ${o("exchange:instantOrder.avail")}`),
              l && n && (s += ` ${(0, N.Cq)(n, 0)}`),
              l || (i && (s += ` ${(0, N.Cq)(i, 0)}`)),
              s
            );
          }, [e, o]),
          y = (0, n.useMemo)(
            () =>
              p
                ? o("exchange.instantOrderDesc.cancel", { target: o(Ue[i]) })
                : "",
            [p, o, i]
          );
        return (0, n.useMemo)(() => (p ? y : [b, f].join(", ")), [p, y, b, f]);
      };
      var H = a(57468),
        _ = a.n(H),
        Y = a(80462),
        j = a.n(Y),
        K = a(8576);
      const W = ({
        children: e,
        dispatchMenu: t,
        tempReceipts: a,
        setTempReceipts: i,
        handleClickAdd: o,
        setNewBasicPopup: l,
        isAdvancedOrderEnabled: c,
      }) => {
        const d = (0, k.d4)(K.T),
          u = Te(),
          m = (0, k.wA)(),
          { t: h, i18n: p } = (0, S.B)();
        (0, n.useEffect)(() => {
          (0, D.s)("730-화면진입_간편주문편집");
        }, []);
        const g = (0, n.useCallback)(() => {
            _()(d, a)
              ? (t({ type: he }),
                (0, D.s)("741-간편주문편집_편집취소팝업_확인"))
              : l({
                  variant: "confirm",
                  closePopup: () => l(void 0),
                  body: h("exchange.instantOrder.cancelMsg"),
                  onConfirm: () => {
                    t({ type: he }),
                      i(d),
                      (0, D.s)("741-간편주문편집_편집취소팝업_확인");
                  },
                  onCancel: () => {
                    (0, D.s)("740-간편주문편집_편집취소팝업_취소");
                  },
                });
          }, [d, a, t, l, i, h]),
          C = (0, n.useCallback)(() => {
            (0, D.s)("737-간편주문편집_초기화버튼입력"),
              l({
                variant: "confirm",
                closePopup: () => l(void 0),
                body: h("exchange.instantOrder.resetMsg"),
                onConfirm: () => {
                  (0, D.s)("739-간편주문편집_초기화팝업_확인");
                  m((0, w.lc)()).then((e) => {
                    e.error || t({ type: he });
                  });
                },
                onCancel: () => {
                  (0, D.s)("738-간편주문편집_초기화팝업_취소");
                },
                confirmBtn: h("exchange.instantOrder.reset"),
              });
          }, [m, t, h, l]),
          T = (0, n.useCallback)(
            j()((e) => {
              null == e || e.preventDefault(),
                (0, D.s)("742-간편주문편집_저장버튼입력");
              const r = h("exchange.instantOrder.save");
              m((0, w.E3)(a)).then((e) => {
                var a;
                e.error
                  ? ((0, D.s)("744-간편주문편집_저장오류", e.error.message),
                    "V1::Exceptions::ExceedMaximumOrderReceiptsCount" ===
                      (null == (a = e.error) ? void 0 : a.name) &&
                      l({
                        variant: "basic",
                        closePopup: () => l(void 0),
                        title: `${r} ${h("exchange.instantOrder.failed")}`,
                        body: e.error.message,
                      }))
                  : ((0, D.s)("743-간편주문편집_저장완료"),
                    t({ type: he }),
                    l({
                      variant: "basic",
                      closePopup: () => l(void 0),
                      title: `${r} ${h("exchange.instantOrder.success")}`,
                      body: h("exchange.instantOrder.successMsg", { type: r }),
                    }));
              });
            }, 300),
            [a, m, t, l, h]
          );
        return (0, r.FD)("div", {
          className: s()("InstantOrder InstantOrder--nonTab", {
            advancedOrder: c,
          }),
          children: [
            (0, r.FD)("div", {
              className: "InstantOrder__headerTitle InstantOrderHeaderTitle",
              children: [
                (0, r.Y)("div", {
                  className: "InstantOrderHeaderTitle__title",
                  children: h("exchange.instantOrder.editTitle"),
                }),
                (0, r.Y)(M.e, {
                  className: "InstantOrderHeaderTitle__cancel ir",
                  onClick: g,
                  children: h("exchange.order.cancel"),
                }),
              ],
            }),
            e,
            (0, r.FD)("div", {
              className: "InstantOrder__bottomButton InstantOrderBottomButton",
              children: [
                (0, r.Y)("div", {
                  className: "InstantOrderBottomButton__side",
                  children: (0, r.Y)(M.e, {
                    className: s()(
                      "InstantOrderBottomButton__button",
                      `${u}Btn_ash`
                    ),
                    onClick: o,
                    children: h("exchange.instantOrder.add"),
                  }),
                }),
                (0, r.FD)("div", {
                  className: "InstantOrderBottomButton__side",
                  children: [
                    (0, r.Y)(M.e, {
                      className: s()(
                        "InstantOrderBottomButton__button",
                        `${u}Btn_ash`
                      ),
                      onClick: C,
                      children: h("exchange.instantOrder.reset"),
                    }),
                    (0, r.Y)(M.e, {
                      className: s()(
                        "InstantOrderBottomButton__button",
                        `${u}Btn_blue`
                      ),
                      onClick: T,
                      children: h("exchange.instantOrder.save"),
                    }),
                  ],
                }),
              ],
            }),
          ],
        });
      };
      var G = a(29638),
        Q = a(96258),
        Z = a(2368),
        J = a(81257),
        X = a(17223),
        $ = a(11158),
        ee = a(7823),
        te = a(76517),
        ae = a(56177),
        re = a(79150),
        ne = a(4001),
        ie = Object.defineProperty,
        oe = Object.defineProperties,
        le = Object.getOwnPropertyDescriptors,
        se = Object.getOwnPropertySymbols,
        ce = Object.prototype.hasOwnProperty,
        de = Object.prototype.propertyIsEnumerable,
        ue = (e, t, a) =>
          t in e
            ? ie(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        me = (e, t) => {
          for (var a in t || (t = {})) ce.call(t, a) && ue(e, a, t[a]);
          if (se) for (var a of se(t)) de.call(t, a) && ue(e, a, t[a]);
          return e;
        };
      const he = "LIST",
        pe = "EDIT",
        ge = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0],
        Ce = (e, t) => {
          switch (t.type) {
            case he:
              return { menu: he };
            case pe:
              return { menu: pe };
            default:
              return e;
          }
        },
        Te = () => ("kr" === (0, k.d4)(ae.KY) ? "Kor" : "global"),
        be = ({ master: e, renderOrderHeader: t }) => {
          const a = (0, k.wA)(),
            [{ menu: i }, o] = (0, n.useReducer)(Ce, { menu: he }),
            { isAdvancedOrderEnabled: l } = (0, X.A)(),
            c = (0, k.d4)(I.p),
            { orderReceiptConfirmation: d } = c,
            u = (0, k.d4)(re.BQ),
            h = (0, k.d4)(K.T),
            { t: p } = (0, S.B)(),
            [g, T] = (0, n.useState)([]),
            [b, f] = (0, n.useState)(),
            [y, v] = (0, n.useState)();
          (0, n.useEffect)(() => {
            (0, D.s)("710-화면진입_간편주문");
          }, []),
            (0, n.useEffect)(() => {
              T(C()(h, "position", "asc"));
            }, [h]),
            (0, n.useEffect)(() => {
              u && d && a((0, w.Er)());
            }, [u, d, i, a]);
          const P = (0, n.useCallback)(() => {
              const e = "EDIT" === i;
              (e ? g : h).length < 10
                ? f({
                    type: "add",
                    tempReceipts: e ? g : void 0,
                    setTempReceipts: e ? T : void 0,
                  })
                : v({
                    closePopup: () => v(void 0),
                    variant: "basic",
                    body: p("exchange.instantOrder.maxNoReceipts"),
                  }),
                (0, D.s)("746-간편주문_등록버튼입력", null, {
                  from: "코인상세_간편주문",
                });
            }, [i, h, g, p]),
            M = (0, n.useMemo)(
              () =>
                m()(h)
                  ? (0, r.Y)(Oe, { handleClickAdd: P })
                  : (0, r.Y)(Se, {
                      master: e,
                      menu: i,
                      tempReceipts: g,
                      setTempReceipts: T,
                      setEditPopup: f,
                    }),
              [h, P, e, i, g]
            );
          return u
            ? d
              ? (0, r.FD)(r.FK, {
                  children: [
                    y && (0, r.Y)(A.A, { payload: y }),
                    (0, r.Y)(U.Y, { payload: b }),
                    t("EDIT" !== i),
                    "EDIT" === i
                      ? (0, r.Y)(W, {
                          isAdvancedOrderEnabled: l,
                          dispatchMenu: o,
                          tempReceipts: g,
                          setTempReceipts: T,
                          handleClickAdd: P,
                          setNewBasicPopup: v,
                          children: M,
                        })
                      : (0, r.FD)("div", {
                          className: s()("InstantOrder", { advancedOrder: l }),
                          children: [
                            (0, r.Y)(ye, {
                              menu: i,
                              dispatchMenu: o,
                              handleClickAdd: P,
                            }),
                            (0, r.Y)(ve, { master: e }),
                            M,
                          ],
                        }),
                  ],
                })
              : (0, r.FD)(r.FK, {
                  children: [
                    y && (0, r.Y)(A.A, { payload: y }),
                    t("EDIT" !== i),
                    (0, r.Y)(B, { isAdvancedOrderEnabled: l }),
                  ],
                })
            : (0, r.FD)(r.FK, {
                children: [
                  y && (0, r.Y)(A.A, { payload: y }),
                  t(),
                  (0, r.Y)(G.A, {}),
                ],
              });
        },
        fe = (e) => {
          null == e || e.preventDefault();
        },
        ye = ({ menu: e, dispatchMenu: t, handleClickAdd: a }) => {
          const { t: i } = (0, S.B)(),
            o = (0, n.useCallback)(() => {
              t({ type: pe }), (0, D.s)("729-간편주문_편집버튼입력");
            }, [t]),
            l = (0, n.useMemo)(
              () =>
                b()(y()(i("exchange.instantOrder.tooltip.listDesc")), /\r?\n/),
              [i]
            );
          return (0, r.FD)("div", {
            className: "InstantOrder__setting InstantOrderSetting",
            children: [
              (0, r.FD)("div", {
                className: "InstantOrderSetting__title",
                children: [
                  i("exchange.instantOrder.title"),
                  (0, r.Y)(Q.c, {
                    onClick: fe,
                    children: (0, r.FD)("div", {
                      className: "InstantTooltip",
                      children: [
                        (0, r.Y)("span", {
                          className: "InstantTooltip__title",
                          children: i("exchange.instantOrder.tooltip.title"),
                        }),
                        (0, r.Y)("span", {
                          className: "InstantTooltip__desc",
                          dangerouslySetInnerHTML: {
                            __html: i("exchange.instantOrder.tooltip.desc"),
                          },
                        }),
                        (0, r.Y)("span", {
                          className: "InstantTooltip__listTitle",
                          children: i(
                            "exchange.instantOrder.tooltip.listTitle"
                          ),
                        }),
                        (0, r.Y)("ul", {
                          className: "InstantTooltip__list",
                          children: p()(l, (e, t) =>
                            (0, r.Y)(
                              "li",
                              { dangerouslySetInnerHTML: { __html: e } },
                              t
                            )
                          ),
                        }),
                      ],
                    }),
                  }),
                ],
              }),
              (0, r.FD)("div", {
                className: "InstantOrderSetting__button",
                children: [
                  (0, r.Y)(M.e, {
                    onClick: o,
                    children: i("exchange.instantOrder.edit"),
                  }),
                  (0, r.Y)(M.e, {
                    onClick: a,
                    children: i("exchange.instantOrder.add"),
                  }),
                ],
              }),
            ],
          });
        },
        ve = ({ master: e }) => {
          const t = (0, k.d4)(re.BQ),
            a = (0, ee.dU)(t),
            n = (0, k.d4)(I.y),
            { quoteCurrencyCode: i, baseCurrencyCode: o } = e,
            l = null == a ? void 0 : a[i],
            s = null == a ? void 0 : a[o],
            c = l ? (0, Z.si)(l.balance) : (0, Z.si)("0"),
            d = s ? (0, Z.si)(s.balance) : (0, Z.si)("0"),
            { t: u, i18n: m } = (0, S.B)(),
            h = (0, te.Sj)({ balance: c, currency: i }),
            p = (0, te.Sj)({ balance: d, currency: o });
          return (0, r.Y)("div", {
            className: "InstantOrder__total",
            children: (0, r.FD)("ul", {
              className: "InstantOrderTotal",
              children: [
                (0, r.FD)("li", {
                  className: "InstantOrderTotal__item",
                  children: [
                    (0, r.Y)("div", {
                      className:
                        "InstantOrderTotal__category InstantOrderTotal__category--buy",
                      children: u("exchange:instantOrder.bidAvail"),
                    }),
                    (0, r.FD)("div", {
                      className: "InstantOrderTotal__amount",
                      children: [
                        (0, N.yi)(c, i),
                        (0, r.Y)("span", {
                          className: "InstantOrderTotal__unit",
                          children: i,
                        }),
                        i !== n &&
                          (0, r.FD)("div", {
                            className: "InstantOrderTotal__change",
                            children: [
                              `≈ ${h}`,
                              (0, r.Y)("i", { children: n }),
                            ],
                          }),
                      ],
                    }),
                  ],
                }),
                (0, r.FD)("li", {
                  className: "InstantOrderTotal__item",
                  children: [
                    (0, r.Y)("div", {
                      className:
                        "InstantOrderTotal__category InstantOrderTotal__category--sell",
                      children: u("exchange:instantOrder.askAvail"),
                    }),
                    (0, r.FD)("div", {
                      className: "InstantOrderTotal__amount",
                      children: [
                        (0, N.yi)(d, o),
                        (0, r.Y)("span", {
                          className: "InstantOrderTotal__unit",
                          children: o,
                        }),
                        o !== n &&
                          (0, r.FD)("div", {
                            className: "InstantOrderTotal__change",
                            children: [
                              `≈ ${p}`,
                              (0, r.Y)("i", { children: n }),
                            ],
                          }),
                      ],
                    }),
                  ],
                }),
              ],
            }),
          });
        },
        Se = ({
          master: e,
          menu: t,
          tempReceipts: a,
          setTempReceipts: i,
          setEditPopup: l,
        }) => {
          const s = (0, k.d4)(K.T),
            c = (0, n.useMemo)(() => ("LIST" === t ? ke : Pe), [t]),
            d = (0, n.useMemo)(() => ("LIST" === t ? s : a), [t, s, a]),
            u = (0, n.useCallback)(
              ({ index: e }) => {
                (0, D.s)("734-간편주문편집_조건순서변경_드래그", null, {
                  customProperty: (0, $.gG)(a[e]),
                });
              },
              [a]
            ),
            m = (0, n.useCallback)(
              ({ oldIndex: e, newIndex: t }) => {
                const r = p()(o()(a, e, t), (e, t) => {
                  return (a = me({}, e)), oe(a, le({ position: t }));
                  var a;
                });
                (0, D.s)("735-간편주문편집_조건순서변경_드랍", null, {
                  customProperty: (0, $.gG)(r[t]),
                }),
                  i(r);
              },
              [i, a]
            ),
            h = (0, n.useMemo)(
              () => document.getElementById("UpbitLayout"),
              []
            ),
            g = (0, n.useMemo)(
              () => ({
                lockAxis: "y",
                onSortStart: u,
                onSortEnd: m,
                helperClass: "InstantOrderSortList__item--active",
                helperContainer: h,
                useDragHandle: !0,
              }),
              [u, m, h]
            );
          return (0, r.Y)(r.FK, {
            children: (0, r.Y)(
              c,
              me(
                {
                  orderedReceipts: d,
                  setTempReceipts: i,
                  master: e,
                  menu: t,
                  setEditPopup: l,
                },
                g
              )
            ),
          });
        },
        ke = ({
          orderedReceipts: e,
          master: t,
          menu: a,
          setTempReceipts: i,
          setEditPopup: o,
        }) => {
          const l = (0, n.useMemo)(() => ("LIST" === a ? De : xe), [a]);
          return (0, r.Y)("div", {
            className: "InstantOrder__list",
            children: (0, r.Y)(v.default, {
              children: (0, r.Y)("ul", {
                className: "InstantOrderList",
                children: p()(e, (n, s) => {
                  var c;
                  return (0, r.Y)(
                    l,
                    {
                      index: s,
                      receipt: n,
                      master: t,
                      menu: a,
                      receipts: e,
                      setTempReceipts: i,
                      setEditPopup: o,
                    },
                    null != (c = n.uuid) ? c : s
                  );
                }),
              }),
            }),
          });
        },
        Pe = (0, P.q6)(ke),
        we = {
          order_ask: "sell",
          order_bid: "buy",
          watch_ask: "sell",
          watch_bid: "buy",
          cancel: "cancel",
        },
        Ae = {
          order_ask: "exchange.order.ask",
          order_bid: "exchange.order.bid",
          watch_ask: "exchange.order.watchAsk",
          watch_bid: "exchange.order.watchBid",
          cancel: "exchange.order.cancel",
        },
        Ue = {
          order: "exchange.order.normal",
          watch: "exchange.order.watchOrder",
        },
        Me = (0, P.D)(() =>
          (0, r.Y)("span", {
            className: "InstantOrderSortList__item__drag",
            children: "-",
          })
        ),
        De = ({
          receipt: e,
          master: t,
          menu: a,
          receipts: i,
          setTempReceipts: o,
          setEditPopup: l,
        }) => {
          const { position: s, label: c, type: u } = e,
            { t: m } = (0, S.B)(),
            {
              handleClickOrder: h,
              popups: p,
              supportedOrder: g,
            } = (0, $.jk)(e, t),
            C = "LIST" === a ? "InstantOrderList" : "InstantOrderSortList",
            T = (0, n.useCallback)(() => {
              (0, D.s)("733-간편주문편집_조건삭제버튼입력", null, {
                customProperty: (0, $.gG)(e),
              });
              const t = d()(i, (t) => t.uuid !== e.uuid);
              o(t);
            }, [e, i, o]),
            b = (0, n.useCallback)(() => {
              (0, D.s)("732-간편주문편집_조건수정버튼입력", null, {
                customProperty: (0, $.gG)(e),
              }),
                l({
                  type: "edit",
                  receipt: e,
                  tempReceipts: i,
                  setTempReceipts: o,
                }),
                (0, D.s)("746-간편주문_등록버튼입력", null, {
                  from: "간편주문편집",
                });
            }, [e, i, l, o]),
            f = Ae[u],
            y = we[u];
          return (0, r.FD)(r.FK, {
            children: [
              (0, r.Y)(ne.A, me({}, p)),
              (0, r.FD)("li", {
                className: `${C}__item`,
                children: [
                  "EDIT" === a && (0, r.Y)(Me, {}),
                  (0, r.FD)("div", {
                    className: `${C}__titleSection`,
                    children: [
                      (0, r.Y)("div", {
                        className: `${C}__title`,
                        children: c,
                      }),
                      (0, r.Y)("div", {
                        className: `${C}__subTitle`,
                        children: (0, r.Y)(q, { receipt: e, master: t }),
                      }),
                    ],
                  }),
                  "LIST" === a
                    ? (0, r.FD)("div", {
                        className: `${C}__buttonSection`,
                        children: [
                          (0, r.Y)("span", {
                            className: `${C}__optionDesc`,
                            children: J.Zb ? null : `${J.ZP}+${ge[s]}`,
                          }),
                          (0, r.Y)(M.e, {
                            className: `${C}__button ${C}__button--${
                              g ? y : "disabled"
                            }`,
                            onClick: h,
                            children: f && m(f),
                          }),
                        ],
                      })
                    : (0, r.FD)("div", {
                        className: `${C}__optionSection`,
                        children: [
                          (0, r.Y)("div", {
                            className: `${C}__state ${C}__state--${y}`,
                            children: f && m(f),
                          }),
                          (0, r.Y)(M.e, {
                            className: `${C}__editButton ir`,
                            onClick: b,
                            children: "edit",
                          }),
                          (0, r.Y)(M.e, {
                            className: `${C}__cancelButton ir`,
                            onClick: T,
                            children: "delete",
                          }),
                        ],
                      }),
                ],
              }),
            ],
          });
        },
        xe = (0, P.Zj)(De),
        Oe = ({ handleClickAdd: e }) => {
          const t = Te(),
            { t: a, i18n: n } = (0, S.B)();
          return (0, r.FD)("div", {
            className: "InstantOrder__empty InstantOrderEmpty",
            children: [
              (0, r.FD)("div", {
                className: "InstantOrderEmpty__desc",
                children: [
                  a("exchange.instantOrder.empty.desc1"),
                  (0, r.Y)("br", {}),
                  a("exchange.instantOrder.empty.desc2"),
                ],
              }),
              (0, r.Y)(M.e, {
                className: `InstantOrderEmpty__button ${t}Btn_blue`,
                onClick: e,
                children: a("exchange.instantOrder.add"),
              }),
            ],
          });
        };
    },
    29674: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(48678),
        i = a.n(n),
        o = a(52604),
        l = a(28207),
        s = a(92265),
        c = Object.defineProperty,
        d = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? c(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class u extends l.A {
        constructor() {
          super(...arguments),
            d(this, "render", () => {
              const { sliderPercentage: e } = this.state,
                { percentage: t, showSlider: a } = this.props,
                n = e,
                o = i()(t / 100, 2);
              return (0, r.FD)("div", {
                className: "InstantOrderPopup__controlBar",
                style: { visibility: a ? "visible" : "hidden" },
                children: [
                  (0, r.FD)("div", {
                    className: "InstantOrderControlBar",
                    ref: this.scrollDom,
                    onTouchStart: this.handleStartSlider,
                    onMouseDown: this.handleStartSlider,
                    onTouchMove: this.handleMoveSlider,
                    onMouseMove: this.handleMoveSlider,
                    onTouchEnd: this.handleLeaveSlider,
                    onMouseUp: this.handleLeaveSlider,
                    onTouchCancel: this.handleLeaveSlider,
                    children: [
                      (0, r.Y)("div", {
                        className: "InstantOrderControlBar__bar",
                        children: (0, r.Y)("div", {
                          className: "InstantOrderControlBar__innerBar",
                          style: { width: `${n}%` },
                        }),
                      }),
                      (0, r.Y)("a", {
                        className: "InstantOrderControlBar__trigger",
                        style: { left: `${n}%` },
                        onClick: (e) => e.preventDefault(),
                        children: (0, r.Y)("span", {
                          className: "InstantOrderControlBar__tooltip",
                          children: (0, r.Y)("i", {
                            children: (0, s.Cq)(o, 0),
                          }),
                        }),
                      }),
                    ],
                  }),
                  (0, r.Y)("a", {
                    href: "#",
                    className: "InstantOrderPopup__controlBtn",
                    onClick: (e) => {
                      this.props.handleClickConfirm(e, o);
                    },
                    children: this.props.t("exchange.order.confirmSlider"),
                  }),
                ],
              });
            });
        }
      }
      t.A = (0, o.C)()(u);
    },
    29638: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(62205),
        i = a(2481),
        o = a(69889),
        l = a(13409),
        s = a(16565),
        c = a(14047),
        d = a(48406);
      const u = (0, n.AH)({
        "& >": {
          a: { border: 0 },
          "a:nth-of-type(1)": { backgroundColor: "#0c3887", width: "108px" },
          "a:nth-of-type(2)": { backgroundColor: "#0062df", width: "344px" },
        },
      });
      t.A = () => {
        const { t: e } = (0, l.B)("exchange", { keyPrefix: "myOrders" }),
          t = (0, c.j)();
        return (0, r.Y)("span", {
          className: "orderB",
          children: (0, r.FD)("div", {
            children: [
              (0, r.Y)("span", {
                className: "dataNone",
                style: { height: s.yz.myOrderNoLogin },
                children: (0, r.Y)("p", { children: e("signinRequired") }),
              }),
              (0, r.FD)(i.BJ, {
                spacing: 10,
                sx: u,
                children: [
                  (0, r.Y)(i.$n, {
                    title: e("signup"),
                    onClick: () => {
                      t((0, o.VC)(d.kAN));
                    },
                    children: e("signup"),
                  }),
                  (0, r.Y)(i.$n, {
                    title: e("signin"),
                    onClick: () => {
                      t((0, o.VC)(d.w9Z));
                    },
                    children: e("signin"),
                  }),
                ],
              }),
            ],
          }),
        });
      };
    },
    7485: function (e, t, a) {
      "use strict";
      a.d(t, {
        H: function () {
          return M;
        },
        A: function () {
          return x;
        },
      });
      var r = a(65613),
        n = a(62205),
        i = a(2481),
        o = a(16790),
        l = a(67194),
        s = a.n(l),
        c = a(13409),
        d = a(13322),
        u = a(29638),
        m = a(79474),
        h = a(4633),
        p = a.n(h),
        g = a(11023),
        C = a.n(g),
        T = a(42080),
        b = a(15790),
        f = a(41511),
        y = a(93551),
        v = a(28007);
      const S = [94, 100, 120, 176],
        k = () => {
          const { t: e } = (0, c.B)("", {
            keyPrefix: "exchange.myCompleteTrades",
          });
          return (0, r.FD)(i.az, {
            css: [
              b.R7.emptyWrapper,
              n.AH`
          height: 397px;
        `,
            ],
            children: [
              (0, r.Y)("img", { src: C(), alt: "empty" }),
              (0, r.Y)(i.Z3, {
                variant: "caption1",
                color: "contents_3",
                children: e("empty"),
              }),
            ],
          });
        },
        P = ({ trade: e, columnIndex: t, style: a }) => {
          const n = (0, f.i)(e),
            o = (0, y.NR)(),
            l = (0, y.Qc)();
          if (!n) return null;
          const {
              pair: s,
              typeName: c,
              eventType: d,
              eventAt: u,
              formattedVolume: m,
              formattedPrice: h,
              formattedAmount: p,
            } = n,
            g = "bid" === d;
          switch (t) {
            case 0:
              return (0, r.FD)(i.az, {
                style: a,
                sx: b.R7.container,
                children: [
                  (0, r.Y)(i.Z3, {
                    variant: "caption1",
                    color: "contents_1",
                    children: o(u),
                  }),
                  (0, r.Y)(i.Z3, {
                    variant: "caption1",
                    color: "contents_1",
                    children: l(u),
                  }),
                ],
              });
            case 1:
              return (0, r.FD)(i.az, {
                className: "alignCenter",
                style: a,
                sx: b.R7.container,
                children: [
                  (0, r.Y)(i.Z3, {
                    variant: "caption1",
                    color: "contents_1",
                    weight: "bold",
                    children: s,
                  }),
                  (0, r.Y)(i.Z3, {
                    variant: "caption1",
                    color: g ? "market_contents_up" : "market_contents_down",
                    children: c,
                  }),
                ],
              });
            case 2:
              return (0, r.FD)(i.az, {
                className: "alignRight",
                style: a,
                sx: b.R7.container,
                children: [
                  (0, r.Y)(i.Z3, {
                    variant: "caption1",
                    color: "contents_1",
                    children: h,
                  }),
                  (0, r.Y)(i.Z3, {
                    variant: "caption1",
                    color: "contents_1",
                    children: p,
                  }),
                ],
              });
            case 3:
              return (0, r.Y)(i.az, {
                className: "alignRight",
                style: a,
                sx: b.R7.container,
                children: (0, r.Y)(i.Z3, {
                  variant: "caption1",
                  color: "contents_1",
                  children: m,
                }),
              });
            default:
              throw "Invalid column index";
          }
        },
        w = () => {
          const { t: e } = (0, c.B)("", {
            keyPrefix: "exchange.myCompleteTrades",
          });
          return (0, r.Y)(i.az, {
            sx: b.R7.headerWrapper,
            children: (0, r.FD)("table", {
              children: [
                (0, r.Y)(b.c5, { colGroups: S }),
                (0, r.FD)("thead", {
                  children: [
                    (0, r.FD)("tr", {
                      children: [
                        (0, r.Y)("th", {
                          rowSpan: 2,
                          children: e("createdAt"),
                        }),
                        (0, r.Y)("th", { children: e("market") }),
                        (0, r.Y)("th", { children: e("price") }),
                        (0, r.Y)("th", { rowSpan: 2, children: e("volume") }),
                      ],
                    }),
                    (0, r.FD)("tr", {
                      children: [
                        (0, r.Y)("th", { children: e("tradeType") }),
                        (0, r.Y)("th", { children: e("amount") }),
                      ],
                    }),
                  ],
                }),
              ],
            }),
          });
        };
      var A = m.memo(({ master: e, marketScope: t }) => {
          const {
            isLoading: a,
            tradeHistories: n = [],
            handleLoadMore: o,
          } = (0, v.e)({
            baseCurrencyCode: e.baseCurrencyCode,
            quoteCurrencyCode: e.quoteCurrencyCode,
            marketScope: t,
          });
          return (0, r.FD)(r.FK, {
            children: [
              (0, r.Y)(w, {}),
              a
                ? (0, r.Y)(i.az, {
                    sx: b.R7.emptyWrapper,
                    children: (0, r.Y)(i.y$, {}),
                  })
                : p()(n)
                ? (0, r.Y)(k, {})
                : (0, r.Y)(T.A, {
                    items: n,
                    colGroups: S,
                    width: 490,
                    height: 397,
                    rowHeight: 58,
                    loadMore: o,
                    children: ({ columnIndex: e, rowIndex: t, style: a }) => {
                      const i = n[t];
                      return (0, r.Y)(
                        P,
                        { trade: i, columnIndex: e, style: a },
                        i.uuid
                      );
                    },
                  }),
            ],
          });
        }),
        U = a(14246);
      const M = ["all", "market", "baseCurrency"],
        D = {
          filterWrapper: n.AH`
    box-sizing: border-box;
    padding: 8px 4px 8px 13px;
    border-bottom: 1px solid ${o.default.colors.line_1};
  `,
          openCompletedOrderWrapper: n.AH`
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 20px;
  `,
          orderFilterWrapper: n.AH`
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px;
  `,
          scopeFilterWrapper: n.AH`
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px;
  `,
          marketScopeFilterWrapper: n.AH`
    position: absolute;
    left: 0;
    top: 21px;
    border: 1px solid ${o.default.colors.line_1};
    background-color: ${o.default.colors.bg_0};
    z-index: 1;
  `,
        };
      var x = ({ master: e }) => {
        const {
            isAuthenticated: t,
            selectedIndex: a,
            marketScope: n,
            handleClickMarketScope: o,
            handleClickMenu: l,
          } = (0, U.t)(),
          { t: m } = (0, c.B)("exchange", { keyPrefix: "cancelAndNewOrder" }),
          h = s()(M, (t) => {
            let a = m("cancel_and_new_all_market");
            return (
              "market" === t
                ? (a = m("cancel_and_new_present_market"))
                : "baseCurrency" === t &&
                  (a = null == e ? void 0 : e.baseCurrencyCode),
              { label: a, tabKey: t }
            );
          }),
          p = h.find((e) => e.tabKey === n);
        return t
          ? (0, r.FD)("div", {
              className: "max",
              children: [
                (0, r.FD)(i.BJ, {
                  sx: D.filterWrapper,
                  alignItems: "center",
                  justifyContent: "space-between",
                  children: [
                    (0, r.FD)(i.az, {
                      sx: D.openCompletedOrderWrapper,
                      children: [
                        (0, r.FD)(i.az, {
                          onClick: () => l(0),
                          sx: D.orderFilterWrapper,
                          children: [
                            (0, r.Y)(i.In, {
                              "data-testid": "selectedIndex-0",
                              type:
                                0 === a ? "N_radio_on_16" : "N_circle_off_16",
                              size: 16,
                              color: 0 === a ? "accent_blue" : "contents_3",
                            }),
                            (0, r.Y)(i.Z3, {
                              "data-testid": "selectedIndex-0-text",
                              variant: "body4",
                              color: 0 === a ? "contents_1" : "contents_2",
                              children: m("cancel_and_new_opened_order_open"),
                            }),
                          ],
                        }),
                        (0, r.FD)(i.az, {
                          onClick: () => l(1),
                          sx: D.orderFilterWrapper,
                          children: [
                            (0, r.Y)(i.In, {
                              "data-testid": "selectedIndex-1",
                              type:
                                1 === a ? "N_radio_on_16" : "N_circle_off_16",
                              size: 16,
                              color: 1 === a ? "accent_blue" : "contents_3",
                            }),
                            (0, r.Y)(i.Z3, {
                              "data-testid": "selectedIndex-1-text",
                              variant: "body4",
                              color: 1 === a ? "contents_1" : "contents_2",
                              children: m("cancel_and_new_opened_order_closed"),
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, r.Y)(d.M8, {
                      backgroundColor: "transparent",
                      onChangeDropdown: o,
                      activeDropdownItem: p,
                      dropdownItems: h,
                    }),
                  ],
                }),
                0 === a &&
                  (0, r.Y)(b.Ay, {
                    master: e,
                    marketScope: n,
                    page: "거래소_거래내역_미체결",
                  }),
                1 === a && (0, r.Y)(A, { master: e, marketScope: n }),
              ],
            })
          : (0, r.Y)(u.A, {});
      };
    },
    15790: function (e, t, a) {
      "use strict";
      a.d(t, {
        R7: function () {
          return A;
        },
        c5: function () {
          return v;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(62205),
        o = a(2481),
        l = a(16790),
        s = a(4633),
        c = a.n(s),
        d = a(13409),
        u = a(87597),
        m = a(11023),
        h = a.n(m),
        p = a(29289),
        g = a(98871),
        C = a(42080),
        T = a(4881),
        b = a(17024),
        f = a(92859);
      const y = [92, 90, 104, 120, 84],
        v = ({ colGroups: e }) =>
          (0, r.Y)("colgroup", {
            children: e.map((e, t) =>
              (0, r.Y)("col", { width: "auto" === e ? "auto" : `${e}px` }, t)
            ),
          }),
        S = () => {
          const { t: e } = (0, d.B)("exchange", { keyPrefix: "myWaitOrders" });
          return (0, r.FD)(o.az, {
            sx: A.emptyWrapper,
            children: [
              (0, r.Y)("img", { src: h(), alt: "empty" }),
              (0, r.Y)(o.Z3, {
                variant: "caption1",
                color: "contents_3",
                children: e("empty"),
              }),
            ],
          });
        },
        k = () => {
          const { t: e } = (0, d.B)("exchange");
          return (0, r.Y)(o.az, {
            sx: A.headerWrapper,
            children: (0, r.FD)("table", {
              children: [
                (0, r.Y)(v, { colGroups: y }),
                (0, r.FD)("thead", {
                  children: [
                    (0, r.FD)("tr", {
                      children: [
                        (0, r.Y)("th", {
                          rowSpan: 2,
                          children: e("myWaitOrders.createdAt"),
                        }),
                        (0, r.Y)("th", { children: e("myWaitOrders.market") }),
                        (0, r.Y)("th", {
                          children: e("myWaitOrders.stopPrice"),
                        }),
                        (0, r.Y)("th", { children: e("myWaitOrders.volume") }),
                        (0, r.Y)("th", {
                          children: e(
                            "cancelAndNewOrder.cancel_and_new_order_button"
                          ),
                        }),
                      ],
                    }),
                    (0, r.FD)("tr", {
                      children: [
                        (0, r.Y)("th", {
                          children: e("myWaitOrders.tradeType"),
                        }),
                        (0, r.Y)("th", {
                          children: e("myWaitOrders.limitPrice"),
                        }),
                        (0, r.Y)("th", {
                          children: e("myWaitOrders.remainingVolume"),
                        }),
                        (0, r.Y)("th", { children: e("myWaitOrders.cancel") }),
                      ],
                    }),
                  ],
                }),
              ],
            }),
          });
        },
        P = (e) =>
          e >= 22 ? 8 : e >= 20 ? 9 : e >= 18 ? 10 : e >= 17 ? 11 : 12,
        w = ({
          handleClickCancel: e,
          handleClickCancelAndNewOrder: t,
          order: a,
          columnIndex: n,
          style: l,
        }) => {
          const { t: s } = (0, d.B)("exchange"),
            c = (0, T.m)(a);
          if (!c) return null;
          const {
              uuid: u,
              isBid: m,
              pair: h,
              sideString: p,
              formattedWatchPrice: C,
              formattedPrice: b,
              formattedVolume: f,
              formattedRemaingVolume: y,
              formattedCreatedAtDate: v,
              formattedCreatedAtTime: S,
              isCancelAndNewable: k,
            } = c,
            w = P(C.length),
            M = P(f.length),
            D = P(b.length);
          switch (n) {
            case 0:
              return (0, r.FD)(o.az, {
                style: l,
                sx: A.container,
                children: [
                  (0, r.Y)(o.Z3, {
                    variant: "caption1",
                    color: "contents_1",
                    children: v,
                  }),
                  (0, r.Y)(o.Z3, {
                    variant: "caption1",
                    color: "contents_1",
                    children: S,
                  }),
                ],
              });
            case 1:
              return (0, r.FD)(o.az, {
                className: "alignCenter",
                style: l,
                sx: A.container,
                children: [
                  (0, r.Y)(o.Z3, {
                    variant: "caption1",
                    color: "contents_1",
                    weight: "bold",
                    children: h,
                  }),
                  (0, r.Y)(o.Z3, {
                    variant: "caption1",
                    color: m ? "market_contents_up" : "market_contents_down",
                    children: p,
                  }),
                ],
              });
            case 2:
              return (0, r.FD)(o.az, {
                className: "alignRight",
                style: l,
                sx: A.container,
                children: [
                  (0, r.Y)(U, { style: { fontSize: w }, children: C }),
                  (0, r.Y)(U, { style: { fontSize: D }, children: b }),
                ],
              });
            case 3:
              return (0, r.FD)(o.az, {
                className: "alignRight",
                style: l,
                sx: A.container,
                children: [
                  (0, r.Y)(U, { style: { fontSize: M }, children: f }),
                  (0, r.Y)(U, { style: { fontSize: M }, children: y }),
                ],
              });
            case 4:
              return (0, r.FD)(o.az, {
                style: l,
                css: [
                  A.container,
                  i.AH`
              gap: 4px;
            `,
                ],
                children: [
                  k &&
                    (0, r.Y)(g.e, {
                      css: A.actionButtonWrapper,
                      onClick: () =>
                        t({ prevOrder: a, page: "거래소_거래내역_미체결" }),
                      children: (0, r.Y)(o.Z3, {
                        variant: "caption1",
                        color: "contents_1",
                        children: s(
                          "cancelAndNewOrder.cancel_and_new_order_button"
                        ),
                      }),
                    }),
                  (0, r.Y)(g.e, {
                    css: A.actionButtonWrapper,
                    onClick: () =>
                      e({ orderUuids: [u], page: "거래소_거래내역_미체결" }),
                    children: (0, r.Y)(o.Z3, {
                      variant: "caption1",
                      color: "contents_1",
                      children: s("myWaitOrders.cancel"),
                    }),
                  }),
                ],
              });
            default:
              throw "Invalid column index";
          }
        },
        A = {
          container: i.AH`
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    justify-content: center;
    border-bottom: 1px solid ${l.default.colors.line_1};
    border-right: 1px solid ${l.default.colors.line_1};
    padding: 0 10px;

    &.alignCenter {
      align-items: center;
    }
    &.alignRight {
      align-items: flex-end;
    }
  `,
          emptyWrapper: i.AH`
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 353.5px;
    gap: 20px;
  `,
          headerWrapper: i.AH`
    box-sizing: border-box;
    border-bottom: 1px solid ${l.default.colors.line_1};

    font-size: ${l.default.fontSize.caption2}px;
    font-weight: ${l.default.fontWeight.regular};
    color: ${l.default.colors.contents_2};

    table {
      th {
        height: 29px;
        background-color: ${l.default.colors.bg_sg0} !important;
        border-right: 1px solid ${l.default.colors.line_1};
        border-left: 1px solid ${l.default.colors.line_1};
      }
      th:first-of-type {
        border-left: none;
      }
      th:last-of-type {
        border-right: none;
      }
      tr:first-of-type {
        th:not([rowspan]) {
          border-bottom: 1px solid ${l.default.colors.line_1};
        }
      }
    }
  `,
          deleteAllWrapper: i.AH`
    box-sizing: border-box;
    padding: 10px 13px;
    border-bottom: 1px solid ${l.default.colors.line_1};
  `,
          countWrapper: i.AH`
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 20px;
  `,
          actionButtonWrapper: i.AH`
    display: flex;
    justify-content: center;
    align-items: center;
    box-sizing: border-box;
    width: 64px;
    padding: 2px 0;
    border: 1px solid ${l.default.colors.line_2};
    border-radius: 4px;
    cursor: pointer;
  `,
          deleteAllButtonWrapper: (0, i.AH)({
            cursor: "pointer",
            position: "relative",
            padding: "2px 6px",
            borderRadius: 4,
            backgroundColor: l.default.colors.opacity_red_3,
            color: l.default.colors.accent_red,
            textDecoration: "auto",
            border: 0,
          }),
          buttonDisabled: (0, i.AH)({
            cursor: "default",
            backgroundColor: l.default.colors.btn_disable,
            color: l.default.colors.contents_3,
          }),
        },
        U = u.Ay.span`
  color: ${l.default.colors.contents_1};
  line-height: 1.5;
`;
      t.Ay = n.memo(({ master: e, marketScope: t, page: a }) => {
        const { handleClickCancelAndNewOrder: n } = (0, b.p)(),
          { t: l } = (0, d.B)("exchange", { keyPrefix: "cancelAndNewOrder" }),
          {
            isDeleteMultipleOrdersLoading: s,
            isLoading: u,
            confirmPopupPayload: m,
            basicPopupPayload: h,
            sortedOrders: g,
            clearAllInfo: T,
            handleClickCancel: v,
            handleClickCancelAll: P,
          } = (0, f.y)({ master: e, marketScope: t, page: a });
        return (0, r.FD)(r.FK, {
          children: [
            h && (0, r.Y)(p.A, { payload: h }),
            m && (0, r.Y)(p.A, { payload: m }),
            (0, r.FD)(o.BJ, {
              sx: A.deleteAllWrapper,
              alignItems: "center",
              justifyContent: "space-between",
              children: [
                (0, r.Y)(o.az, {
                  sx: A.countWrapper,
                  children: (0, r.Y)(o.Z3, {
                    variant: "caption1",
                    color: "contents_2",
                    children: T.count,
                  }),
                }),
                !s &&
                  (0, r.Y)("button", {
                    disabled: T.disabled,
                    "data-testid": "cancelAllButton",
                    css: (0, i.AH)(
                      A.deleteAllButtonWrapper,
                      T.disabled ? A.buttonDisabled : null
                    ),
                    onClick: () =>
                      P({ marketScope: t, page: "거래소_거래내역_미체결" }),
                    children: (0, r.Y)(o.Z3, {
                      variant: "caption1",
                      children: l("cancel_and_new_order_cancel_clear"),
                    }),
                  }),
              ],
            }),
            (0, r.Y)(k, {}),
            u || s
              ? (0, r.Y)(o.az, {
                  sx: A.emptyWrapper,
                  children: (0, r.Y)(o.y$, {}),
                })
              : c()(g)
              ? (0, r.Y)(S, {})
              : (0, r.Y)(r.FK, {
                  children: (0, r.Y)(C.A, {
                    width: 490,
                    height: 353.5,
                    rowHeight: 58,
                    colGroups: y,
                    items: g,
                    children: ({ columnIndex: e, rowIndex: t, style: a }) => {
                      const i = g[t];
                      return (0, r.Y)(
                        w,
                        {
                          order: i,
                          columnIndex: e,
                          style: a,
                          handleClickCancel: v,
                          handleClickCancelAndNewOrder: n,
                        },
                        i.uuid
                      );
                    },
                  }),
                }),
          ],
        });
      });
    },
    16924: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return ke;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(61895),
        o = a(2481),
        l = a(97500),
        s = a.n(l),
        c = a(69889),
        d = a(67194),
        u = a.n(d),
        m = a(98712),
        h = a.n(m),
        p = a(82078),
        g = a(40485),
        C = a(52604),
        T = a(6448),
        b = a(16510),
        f = a(39699),
        y = a(83961),
        v = a(98871),
        S = a(27317),
        k = a(41638),
        P = a(6296),
        w = a(79775),
        A = a(20674),
        U = a(43190),
        M = Object.defineProperty,
        D = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? M(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class x extends n.PureComponent {
        constructor() {
          super(...arguments),
            D(this, "state", {}),
            D(this, "handleClickCheckbox", (e) => {
              this.props.toggleAvgPrice();
            }),
            D(this, "componentDidUpdate", (e, t) => {
              if (e.showAvgPrice !== this.props.showAvgPrice) {
                const t = this.props.showAvgPrice ? "활성화" : "비활성화";
                e.showAvgPrice
                  ? this.props.showAvgPrice &&
                    (0, b.A)("거래소", null, "차트설정_매수평균가노출_선택", {
                      pageDetail: this.props.code,
                    })
                  : (0, b.A)("거래소", null, "차트설정_매수평균가노출_로드", {
                      pageDetail: this.props.code,
                      eventDetail: t,
                    });
              }
            });
        }
        render() {
          const { showAvgPrice: e } = this.props;
          return (0, r.Y)("li", {
            children: (0, r.FD)("span", {
              className: "globalCheckbox",
              children: [
                (0, r.Y)("input", {
                  type: "checkbox",
                  id: "ch02",
                  checked: e,
                  onChange: this.handleClickCheckbox,
                }),
                (0, r.Y)("label", {
                  htmlFor: "ch02",
                  children: this.props.t("exchange:chartAvgPriceSetting.title"),
                }),
              ],
            }),
          });
        }
      }
      const O = (0, i.createSelector)([U.Xd], (e) => ({ showAvgPrice: e })),
        I = { toggleAvgPrice: A._ },
        B = (0, T.Ng)(O, I);
      var E,
        R = ((E = x), B((0, C.C)("exchange")(E))),
        L = a(50861),
        F = a(57364),
        N = Object.defineProperty,
        V = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? N(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class z extends n.PureComponent {
        constructor() {
          super(...arguments),
            V(this, "state", { isMax: !1, isMin: !1 }),
            V(this, "onClickPlus", (e) => {
              const { currentChartHeight: t, code: a } = this.props,
                { isMax: r, isMin: n } = this.state;
              if (r) return null;
              (0, b.A)("거래소", null, "차트설정_차트높이설정_선택", {
                pageDetail: a,
                eventDetail: "+",
              });
              const i = t + w.QA;
              this.props.updateChartHeight(i);
            }),
            V(this, "onClickMinus", (e) => {
              const { currentChartHeight: t, code: a } = this.props,
                { isMax: r, isMin: n } = this.state;
              if (n) return null;
              (0, b.A)("거래소", null, "차트설정_차트높이설정_선택", {
                pageDetail: a,
                eventDetail: "-",
              });
              const i = t - w.QA;
              this.props.updateChartHeight(i);
            }),
            V(this, "checkIsLimit", () => {
              const { currentChartHeight: e } = this.props;
              e === w.Yk
                ? this.setState({ isMin: !0, isMax: !1 })
                : e === w.K0
                ? this.setState({ isMax: !0, isMin: !1 })
                : this.setState({ isMax: !1, isMin: !1 });
            }),
            V(this, "renderDesc", () => {
              const { isMax: e, isMin: t } = this.state;
              return e
                ? (0, r.Y)("em", {
                    className: "Red",
                    children: this.props.t("coinSelector.maxHeight"),
                  })
                : t
                ? (0, r.Y)("em", {
                    className: "Red",
                    children: this.props.t("coinSelector.minHeight"),
                  })
                : (0, r.Y)("em", {
                    className: "",
                    children: this.props.t("coinSelector.canChangeHeight"),
                  });
            }),
            V(this, "componentDidUpdate", (e, t) => {
              e.currentChartHeight !== this.props.currentChartHeight &&
                (e.currentChartHeight ||
                  (0, b.A)("거래소", null, "차트설정_차트높이설정_로드", {
                    pageDetail: this.props.code,
                    eventDetail: `${this.props.currentChartHeight}px`,
                  }),
                this.checkIsLimit());
            });
        }
        componentDidMount() {
          this.checkIsLimit();
        }
        render() {
          const { code: e } = this.props,
            { isMax: t, isMin: a } = this.state;
          return (0, r.FD)("ul", {
            children: [
              (0, r.FD)("li", {
                children: [
                  (0, r.FD)("div", {
                    className: "SizeAdding",
                    children: [
                      (0, r.Y)("button", {
                        onClick: this.onClickMinus,
                        disabled: a,
                        className: s()(
                          "SizeAdding__Button SizeAdding__Button--MinusBg",
                          a && "SizeAdding__Button--disabled"
                        ),
                        children: "Minus",
                      }),
                      (0, r.Y)("button", {
                        onClick: this.onClickPlus,
                        disabled: t,
                        className: s()(
                          "SizeAdding__Button SizeAdding__Button--PlusBg",
                          t && "SizeAdding__Button--disabled"
                        ),
                        children: "Plus",
                      }),
                    ],
                  }),
                  (0, r.FD)("label", {
                    className: "ButtonLabel",
                    children: [
                      this.props.t("coinSelector.chartHeightSettings"),
                      this.renderDesc(),
                    ],
                  }),
                ],
              }),
              (0, r.Y)(R, { code: e }),
              (0, r.Y)(F.u, {}),
              (0, r.Y)("li", {
                children: (0, r.Y)("p", {
                  dangerouslySetInnerHTML: {
                    __html: this.props.t("coinSelector.chartSettingDesc"),
                  },
                }),
              }),
            ],
          });
        }
      }
      const q = (0, i.createSelector)([U.rB, L.TJ], (e, t) => ({
          currentChartHeight: e,
          code: t,
        })),
        H = { updateChartHeight: P.d3 },
        _ = (0, T.Ng)(q, H);
      var Y = ((e) => _((0, C.C)("exchange")(e)))(z),
        j = a(13409),
        K = a(26029),
        W = a(35421),
        G = a(48925);
      const Q = () => {
        const { t: e } = (0, j.B)("exchange"),
          t = (0, T.wA)(),
          a = (0, T.d4)(G.le);
        return (0, r.Y)("li", {
          children: (0, r.FD)("span", {
            className: "globalCheckbox",
            children: [
              (0, r.Y)("input", {
                type: "checkbox",
                id: "bunchsetting_ch03",
                checked: "Y" === a,
                onChange: () => {
                  const e = "Y" !== a;
                  (0, W.s)("903-화면설정_평균누적노출_선택", {
                    active: e ? "활성화" : "비활성화",
                  }),
                    t((0, K.WK)(e));
                },
              }),
              (0, r.Y)("label", {
                htmlFor: "bunchsetting_ch03",
                children: e("orderbookBunchSetting.title"),
              }),
            ],
          }),
        });
      };
      const Z = (0, a(64178).U)(({ darkMode: e, toggleDarkMode: t }) => {
        const { t: a } = (0, j.B)("exchange", { keyPrefix: "toggleDarkmode" }),
          i = (0, n.useRef)(null),
          o = (0, n.useRef)(null),
          l = (0, n.useCallback)(() => {
            e &&
              (t(),
              (0, b.A)("다크모드", "데이버튼입력", "다크모드_데이버튼입력"),
              i.current && i.current.blur());
          }, [e]),
          c = (0, n.useCallback)(() => {
            e ||
              (t(),
              (0, b.A)("다크모드", "다크버튼입력", "다크모드_다크버튼입력"),
              o.current && o.current.blur());
          }, [e]);
        return (0, r.FD)("li", {
          children: [
            (0, r.FD)("div", {
              className: "BgToggle",
              children: [
                (0, r.Y)("button", {
                  ref: i,
                  className: s()(
                    "BgToggle__Button BgToggle__Button--WhiteBg",
                    !e && "BgToggle__Button--Active"
                  ),
                  onClick: l,
                  children: "White",
                }),
                (0, r.Y)("button", {
                  ref: o,
                  className: s()(
                    "BgToggle__Button BgToggle__Button--DarkBg",
                    e && "BgToggle__Button--Active"
                  ),
                  onClick: c,
                  children: "Dark",
                }),
              ],
            }),
            (0, r.FD)("label", {
              className: "ButtonLabel",
              children: [
                a("title"),
                (0, r.Y)("em", { children: a(e ? "dark" : "day") }),
              ],
            }),
          ],
        });
      });
      Z.displayName = "ToggleDarkmode";
      var J = Object.defineProperty,
        X = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? J(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class $ extends n.PureComponent {
        constructor() {
          super(...arguments),
            X(this, "state", { isOpen: !1 }),
            X(this, "toggleSettingView", () => {
              this.setState((e) => ({ isOpen: !e.isOpen }));
            }),
            X(this, "handleClickOutside", () => {
              if (!this.state.isOpen) return null;
              this.setState({ isOpen: !1 });
            });
        }
        render() {
          const { country: e } = this.props,
            { isOpen: t } = this.state;
          return (0, r.FD)(k.h, {
            handleClickClosePopup: this.handleClickOutside,
            className: "setting",
            children: [
              (0, r.Y)(v.e, {
                title: this.props.t("coinSelector.displaySettings"),
                onClick: this.toggleSettingView,
                children: this.props.t("coinSelector.displaySettings"),
              }),
              (0, r.FD)("div", {
                className: "settingList",
                style: { display: t ? "block" : null },
                children: [
                  (0, r.FD)(r.FK, {
                    children: [
                      (0, r.Y)("div", {
                        className: "tit",
                        children: this.props.t("coinSelector.displaySettings"),
                      }),
                      (0, r.FD)("ul", {
                        children: [
                          "kr" === e && (0, r.Y)(Z, {}),
                          (0, r.Y)(Q, {}),
                        ],
                      }),
                    ],
                  }),
                  (0, r.Y)("div", {
                    className: "tit",
                    children: this.props.t("coinSelector.chartSettings"),
                  }),
                  (0, r.Y)(Y, {}),
                ],
              }),
            ],
          });
        }
      }
      var ee = (0, C.C)("exchange")($),
        te = a(62205),
        ae = a(51778),
        re = a.n(ae),
        ne = a(87168),
        ie = a.n(ne),
        oe = a(80113),
        le = a(17756),
        se = a(1649);
      const ce = ({ country: e, code: t, listingDate: a }) => {
          switch (e) {
            case "kr":
              return (0, r.Y)(ue, { code: t, listingDate: a, variant: "kr" });
            case "th":
              return (0, r.Y)(ue, {
                code: t,
                listingDate: a,
                variant: "global",
              });
            default:
              return (0, r.Y)(de, { code: t });
          }
        },
        de = ({ code: e }) => {
          const { t: t } = (0, j.B)(),
            { marketEvents: a } = (0, le.X)(e);
          return (0, n.useMemo)(() => (0, oe.Eo)(a), [a]).warning
            ? (0, r.FD)(v.e, {
                className: "tag tooltipDown",
                children: [
                  (0, r.Y)("i", { children: t("exchange.ticker.warning") }),
                  (0, r.Y)("div", {
                    dangerouslySetInnerHTML: {
                      __html: t("exchange.ticker.warningDesc"),
                    },
                  }),
                ],
              })
            : null;
        },
        ue = ({ code: e, listingDate: t, variant: a }) => {
          const { t: i } = (0, j.B)(),
            { marketEvents: l } = (0, le.X)(e),
            s = (0, n.useMemo)(() => (0, oe.Eo)(l), [l]),
            c = (0, oe.zP)(t);
          return re()([c, ...ie()(s)])
            ? (0, r.FD)(o.az, {
                sx: he.marketStatusBadgeWrapper,
                children: [
                  c &&
                    (0, r.Y)(se.A, {
                      variant: a,
                      sx: he.marginRightTwo,
                      size: 14,
                      type: "new",
                    }),
                  s.warning &&
                    (0, r.FD)(me, {
                      children: [
                        (0, r.Y)(se.A, {
                          sx: he.marginRightTwo,
                          variant: a,
                          size: 14,
                          type: "attention",
                        }),
                        (0, r.Y)("div", {
                          dangerouslySetInnerHTML: {
                            __html: i("exchange.ticker.warningDesc"),
                          },
                        }),
                      ],
                    }),
                  s.caution &&
                    (0, r.Y)(se.A, { variant: a, size: 14, type: "caution" }),
                ],
              })
            : null;
        },
        me = ({ children: e }) =>
          (0, r.Y)(o.az, {
            tag: "a",
            css: te.AH`
        cursor: pointer;
        position: relative;
        vertical-align: top;

        div {
          display: none;
        }

        &:hover div {
          position: absolute;
          top: 24px;
          left: -29px;
          z-index: 100;
          display: block;
          min-width: 236px;
          padding: 8px 10px;
          border: 1px solid #c8cad1;
          background-color: #fff;
          box-shadow: 0 1px 1px #f5f5f5;
          line-height: 1.5em;
          color: #333;
          font-family: Roboto, Noto Sans KR, Dotum, \b3cb\c6c0, 'sans-serif', Arial, Helvetica;
          font-size: 11px;
          letter-spacing: 0;
          text-align: left;
          font-weight: 400;
        }
      `,
            children: e,
          }),
        he = {
          marketStatusBadgeWrapper: te.AH`
    height: 14px;
  `,
          marginRightTwo: te.AH`
    margin-right: 2px;
  `,
        };
      var pe = a(48406),
        ge = a(53692),
        Ce = a(56177),
        Te = a(72041),
        be = Object.defineProperty,
        fe = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? be(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class ye extends n.PureComponent {
        constructor() {
          super(...arguments),
            fe(this, "state", { showList: !1, coinLists: [] }),
            fe(this, "gaEvent", (e, t, a, r) => {
              const n = a || "";
              let i = "";
              window.location.pathname.includes("exchange")
                ? (i = "거래소")
                : window.location.pathname.includes("balances")
                ? (i = "입출금")
                : window.location.pathname.includes("investments") &&
                  (i = "투자내역"),
                (0, b.SO)(i, null, e, t, n);
            }),
            fe(this, "handleClickShowList", () => {
              this.setState({ showList: !this.state.showList });
            }),
            fe(this, "handleClickCoin", (e) => {
              this.props.dispatchSelectCoin(e), this.setState({ showList: !1 });
            }),
            fe(this, "handleClickMainTab", (e) => {
              this.props.changeMainTab && this.props.changeMainTab(e),
                "trade" === e &&
                  (0, b.SO)(
                    "거래소",
                    "코인정보",
                    "탭선택",
                    "시세",
                    this.props.master.code
                  );
            }),
            fe(this, "handleClickTrendsCoin", (e, t) => {
              t.preventDefault(),
                this.props.push(
                  p.stringifyUrl({ url: pe.pjK, query: { code: e } })
                );
            }),
            fe(this, "getCoinname", (e, t) =>
              "ko" === e ? t.localName : t.englishName
            ),
            fe(this, "renderMarketWarning", () => {
              const {
                  master: e,
                  locale: { country: t },
                } = this.props,
                { code: a, listingDate: n } = e;
              return (0, r.Y)(ce, { country: t, code: a, listingDate: n });
            });
        }
        componentDidMount() {
          const {
            masters: e,
            master: { baseCurrencyCode: t },
          } = this.props;
          this.setState({ coinLists: (0, y.Py)(e, t) });
        }
        componentDidUpdate(e) {
          const {
            masters: t,
            master: { baseCurrencyCode: a },
          } = this.props;
          e.master !== this.props.master &&
            this.setState({ coinLists: (0, y.Py)(t, a) });
        }
        render() {
          const {
              master: e,
              masters: t,
              locale: { fiat: a, language: n, country: i },
              trends: l,
              selectedTab: c,
            } = this.props,
            { coinLists: d, showList: m } = this.state,
            p = h()(`${S.ob}/${e.baseCurrencyCode}.png`, "'", "\\'");
          return e
            ? (0, r.FD)("span", {
                className: "titB link",
                children: [
                  (0, r.FD)(o.BJ, {
                    direction: "row",
                    spacing: 0,
                    children: [
                      (0, r.FD)(v.e, {
                        className: s()({ select: d.length > 0 }),
                        onClick: this.handleClickShowList,
                        children: [
                          (0, r.Y)("em", {
                            children: (0, r.Y)("img", { src: p, alt: p }),
                          }),
                          (0, r.Y)("strong", {
                            children: this.getCoinname(n, e),
                          }),
                          (0, r.Y)("p", { children: e.pair }),
                        ],
                      }),
                      this.renderMarketWarning(),
                      (0, r.Y)(v.e, {
                        onClick: this.handleClickShowList,
                        className: "Arrow",
                        children: "Arrow",
                      }),
                    ],
                  }),
                  (0, r.Y)("div", {
                    className: "exchangeList",
                    style: { display: "block" },
                    children:
                      m && d.length > 0
                        ? (0, r.Y)("ul", {
                            children: (0, r.Y)(g.default, {
                              style: { height: 156 },
                              children: u()(d, (e) =>
                                (0, r.Y)(
                                  "li",
                                  {
                                    children: (0, r.FD)(v.e, {
                                      onClick: this.handleClickCoin.bind(
                                        this,
                                        e.code
                                      ),
                                      children: [
                                        this.getCoinname(
                                          this.props.i18n.language,
                                          e
                                        ),
                                        " ",
                                        (0, r.FD)("i", {
                                          children: ["(", e.pair, ")"],
                                        }),
                                      ],
                                    }),
                                  },
                                  e.code
                                )
                              ),
                            }),
                          })
                        : null,
                  }),
                  !window.location.href.includes("full_chart") &&
                    (0, r.Y)("div", {
                      className: "inforTab",
                      children: (0, r.FD)("dl", {
                        children: [
                          (0, r.Y)("dt", {
                            className: "text-replace",
                            children: this.props.t(
                              "exchange.coinSelector.quotAndInfoTab"
                            ),
                          }),
                          (0, r.Y)("dd", {
                            className: s()({ on: "trade" === c }),
                            children: (0, r.Y)(v.e, {
                              onClick: this.handleClickMainTab.bind(
                                this,
                                "trade"
                              ),
                              children: this.props.t(
                                "exchange.coinSelector.quotation"
                              ),
                            }),
                          }),
                          (0, r.Y)("dd", {
                            className: s()({ on: "info" === c }),
                            children: (0, r.Y)(v.e, {
                              onClick: this.handleClickMainTab.bind(
                                this,
                                "info"
                              ),
                              children: this.props.t(
                                "exchange.coinSelector.information"
                              ),
                            }),
                          }),
                          (0, r.Y)(Te.A, {
                            master: e,
                            enabled: "insight" === c,
                            onClick: this.handleClickMainTab.bind(
                              this,
                              "insight"
                            ),
                          }),
                          (0, r.Y)(ee, { country: i }),
                        ],
                      }),
                    }),
                ],
              })
            : null;
        }
      }
      const ve = (0, i.createSelector)(
          [(e, t) => t.master, ge.Sf, Ce.G3],
          (e, t, a) => {
            null == e || e.code;
            return { masters: t, locale: a };
          }
        ),
        Se = { push: c.VC, dispatchSelectCoin: f.ki };
      var ke = (0, T.Ng)(ve, Se)((0, C.C)()(ye));
    },
    85249: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return x;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(97500),
        o = a.n(i),
        l = a(67194),
        s = a.n(l),
        c = a(16510),
        d = a(79775),
        u = a(67201),
        m = a(53896),
        h = a(94280),
        p = a(7180),
        g = a(85982),
        C = a.n(g),
        T = a(35375),
        b = a(31024),
        f = a(40156),
        y = a(14047),
        v = a(87774),
        S = a(48925),
        k = a(20975);
      var P = ({
          master: e,
          width: t,
          height: a,
          darkMode: i,
          isGlobal: o,
          t: l,
        }) => {
          const { bids: s, asks: c } = (function ({ master: e }) {
              const t = (0, y.j)(),
                a = (0, y.G)(v.i),
                r = (0, y.G)(S.nH),
                i = (0, n.useMemo)(
                  () => (0, k.P)(a, e.code, r),
                  [a, e.code, r]
                );
              (0, n.useEffect)(
                () => (
                  t((0, T.c$)(f.T.DEPTH_CHART, e.code)),
                  () => {
                    t((0, T.Vx)(f.T.DEPTH_CHART));
                  }
                ),
                [e, t]
              );
              const { bids: o, asks: l } = (0, n.useMemo)(() => {
                var e;
                if (!i) return { bids: [], asks: [] };
                if (!(null == (e = i.orderbookUnits) ? void 0 : e.length))
                  return { bids: [], asks: [] };
                const t = [],
                  a = [];
                let r = 0,
                  n = 0;
                for (const e of i.orderbookUnits)
                  e.askPrice &&
                    e.askSize &&
                    ((r += e.askSize), t.push([e.askPrice, r])),
                    e.bidPrice &&
                      e.bidSize &&
                      ((n += e.bidSize), a.push([e.bidPrice, n]));
                return { asks: t, bids: C()(a) };
              }, [i]);
              return { bids: o, asks: l };
            })({ master: e }),
            d = e.baseCurrencyCode,
            u = e.quoteCurrencyCode;
          return (0, r.Y)(b.A, {
            width: t,
            height: a,
            bids: s,
            asks: c,
            baseCurrency: d,
            quoteCurrency: u,
            darkMode: i,
            isGlobal: o,
            t: l,
          });
        },
        w = a(16919),
        A = Object.defineProperty,
        U = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? A(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      const M = (0, m.ql)();
      class D extends n.PureComponent {
        constructor() {
          super(...arguments),
            U(this, "state", {
              selectedMenu:
                "chartiq" === (0, w.AA)(w.wl.EXCHANGE_MINICHART_SELECTED_TAB)
                  ? "chartiq"
                  : "depthChart",
              ciq: null,
            }),
            U(
              this,
              "tabName",
              (e) =>
                ({
                  depthChart: this.props.t("exchange.miniChart.depthChart"),
                  chartiq: this.props.t("exchange.miniChart.chartiq"),
                }[e])
            ),
            U(this, "handleClickMenu", (e, t) => {
              var a;
              t.preventDefault(),
                this.setState({ selectedMenu: e }),
                (0, w.gQ)(w.wl.EXCHANGE_MINICHART_SELECTED_TAB, e);
              const r = null == (a = this.props.master) ? void 0 : a.code;
              (0, c.A)("거래소_미니차트", null, `${this.tabName(e)}_탭선택`, {
                pageDetail: r,
              });
            });
        }
        render() {
          const {
              master: e,
              darkMode: t,
              isGlobal: a,
              isAdvancedOrderEnabled: n,
            } = this.props,
            { selectedMenu: i } = this.state;
          return (0, r.FD)("article", {
            style: { position: "relative" },
            children: [
              (0, r.Y)("span", {
                className: "tabB",
                children: (0, r.Y)("div", {
                  className: "chart",
                  children: (0, r.Y)("ul", {
                    className: "top",
                    children: s()(["depthChart", "chartiq"], (e) => {
                      const t = this.tabName(e);
                      return (0, r.Y)(
                        "li",
                        {
                          children: (0, r.Y)("a", {
                            href: "#",
                            className: o()({ on: i === e }),
                            onClick: this.handleClickMenu.bind(this, e),
                            title: t,
                            children: t,
                          }),
                        },
                        e
                      );
                    }),
                  }),
                }),
              }),
              {
                depthChart: (0, r.Y)("span", {
                  className: o()("miniPrice", { advancedOrder: n }),
                  children: (0, r.Y)(P, {
                    master: e,
                    width: 490,
                    height: n ? 263 : 258,
                    darkMode: t,
                    isGlobal: a,
                    t: this.props.t,
                  }),
                }),
                chartiq: (0, r.Y)("span", {
                  className: o()("miniChart", { advancedOrder: n }),
                  children: (0, r.Y)("div", {
                    id: `chartIQ${d.dI.MINI}`,
                    children: (0, r.Y)(u.lM, {
                      config: M,
                      pluginsToLoadLazy: {},
                      chartInitialized: p.dx,
                      pair: e.pair,
                      symbol: e.code,
                      container: d.dI.MINI,
                      children: (0, r.Y)("span", {
                        className: "range",
                        style: {
                          position: "absolute",
                          zIndex: 10,
                          top: -32.25,
                          right: 0,
                          marginRight: 24,
                          borderBottomColor: t ? "#263245" : "transparent",
                        },
                        children: (0, r.Y)(h.A, { items: M.menuPeriodicity }),
                      }),
                    }),
                  }),
                }),
              }[i],
            ],
          });
        }
      }
      var x = D;
    },
    81505: function (e, t, a) {
      "use strict";
      a.d(t, {
        kc: function () {
          return Ue;
        },
        M3: function () {
          return Oe;
        },
        Ay: function () {
          return Ie;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(61895),
        o = a(90372),
        l = a.n(o),
        s = a(67194),
        c = a.n(s),
        d = a(68382),
        u = a.n(d),
        m = a(87168),
        h = a.n(m),
        p = a(52604),
        g = a(6448),
        C = a(80460),
        T = a(4871),
        b = a(1467),
        f = a(95200),
        y = a(62007),
        v = a(35375),
        S = a(16510),
        k = a(26029),
        P = a(21253),
        w = a(60857),
        A = a(99583),
        U = a(83937),
        M = a(62205),
        D = a(97500),
        x = a.n(D),
        O = a(90099),
        I = a.n(O),
        B = a(41657),
        E = a.n(B),
        R = a(8622),
        L = a.n(R),
        F = a(82950),
        N = a.n(F),
        V = a(66086),
        z = a.n(V),
        q = a(40485),
        H = a(20727),
        _ = a(97172),
        Y = a(98871),
        j = a(83830),
        K = a(16565),
        W = a(80232),
        G = a(63701),
        Q = a(92265),
        Z = a(20975),
        J = a(31374),
        X = Object.defineProperty,
        $ = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? X(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      const ee = M.AH`
  line-height: 19px;
`,
        te = M.AH`
  line-height: 16px;
  color: #666666;
`;
      class ae extends n.Component {
        constructor(e) {
          super(e),
            $(this, "scrollbar"),
            $(this, "getOrderbookLength", () => j.gs),
            $(this, "getOrderbookData", () => {
              const {
                  master: e,
                  unit: t,
                  orderbook: a,
                  orders: r,
                  locale: n,
                } = this.props,
                i = J.Y.AMOUNT;
              return (0, Z.y)({
                master: e,
                unit: t,
                orderbook: a,
                orders: r,
                locale: n,
                orderbookLength: this.getOrderbookLength(),
                orderbookType: i,
              });
            }),
            $(this, "height", K.yz.orderbook),
            (this.scrollbar = n.createRef());
        }
        componentDidMount() {
          this.moveScrollToMiddle(),
            this.props.subscribeCrixTrade(
              "orderbook_trade_ticks",
              this.props.code
            );
        }
        componentDidUpdate(e) {
          e.code !== this.props.code &&
            (this.moveScrollToMiddle(),
            this.props.subscribeCrixTrade(
              "orderbook_trade_ticks",
              this.props.code
            ));
        }
        componentWillUnmount() {
          this.props.unsubscribeCrixTrade("orderbook_trade_ticks");
        }
        moveScrollToMiddle() {
          const e = this.scrollbar.current;
          e && e.scrollTop((e.getScrollHeight() - e.getClientHeight()) / 2);
        }
        render() {
          const {
              t: e,
              code: t,
              master: a,
              unit: n,
              orderbook: i,
              recent: o,
              isAuthenticated: l,
              locale: s,
              isAdvancedOrderEnabled: c,
            } = this.props,
            {
              handleClickPrice: d,
              handleClickCancelAll: u,
              handleClickCancelMultipleOrders: m,
            } = this.props;
          if (!(t && n && a && i)) return null;
          const {
              isFiat: h,
              askSizeMax: p,
              bidSizeMax: g,
              askOrderbookUnits: C,
              bidOrderbookUnits: T,
              greaterTotalSum: b,
            } = this.getOrderbookData(),
            f = (0, r.FD)("colgroup", {
              children: [
                (0, r.Y)("col", { width: "*" }),
                (0, r.Y)("col", { width: "95" }),
                (0, r.Y)("col", { width: "92" }),
                (0, r.Y)("col", { width: "95" }),
                (0, r.Y)("col", { width: "43" }),
              ],
            }),
            y = {
              ask: {
                barAlign: "left",
                trClassName: "down",
                sizeMax: p,
                orderbookUnits: C,
                getDataIndex: (e, t) => e - this.getOrderbookLength() + t,
                dropUnits: I(),
                getDropAmount: (e, t) => t,
                countOrderbook: (e) => z()(e.askSize * e.askPrice),
                getQuoteFields: (e) => ({ size: e.askSize, price: e.askPrice }),
              },
              bid: {
                barAlign: "right",
                trClassName: "up",
                sizeMax: g,
                orderbookUnits: T,
                getDataIndex: (e) => e,
                dropUnits: E(),
                getDropAmount: (e, t, a) => a - e - 1,
                countOrderbook: (e) => z()(e.bidSize * e.bidPrice),
                getQuoteFields: (e) => ({ size: e.bidSize, price: e.bidPrice }),
              },
            },
            v = (e) => (t) => {
              const n = `${e}-${t}`,
                {
                  barAlign: i,
                  trClassName: l,
                  orderbookUnits: c,
                  getDataIndex: u,
                  getQuoteFields: p,
                  sizeMax: g,
                  dropUnits: C,
                  getDropAmount: T,
                  countOrderbook: f,
                } = y[e],
                v = u(t, c.length),
                S = c[v];
              if (!S)
                return (0, r.FD)(
                  "tr",
                  {
                    className: l,
                    children: [
                      (0, r.Y)("td", {
                        className: x()("downB", {
                          usdVisibleAndNonFiat: "en" === s.language && !h,
                        }),
                      }),
                      (0, r.Y)("td", {
                        className: x()("bar left", {
                          usdVisibleAndNonFiat: "en" === s.language && !h,
                        }),
                        children: (0, r.FD)(Y.e, {
                          children: [
                            (0, r.Y)("div", { style: { width: "0%" } }),
                            (0, r.Y)("p", {}),
                          ],
                        }),
                      }),
                      (0, r.Y)("td", {
                        className: x()("DefaultHover", {
                          usdVisibleAndNonFiat: "en" === s.language && !h,
                        }),
                        children: (0, r.Y)("p", {}),
                      }),
                      (0, r.Y)("td", {
                        className: x()("bar", {
                          barAlign: i,
                          usdVisibleAndNonFiat: "en" === s.language && !h,
                        }),
                        children: (0, r.Y)(Y.e, {}),
                      }),
                      (0, r.Y)("td", {
                        className: x()("last", {
                          usdVisibleAndNonFiat: "en" === s.language && !h,
                        }),
                      }),
                    ],
                  },
                  n
                );
              const { size: k, price: P } = S,
                w = T(t, v, c.length),
                A = L()(C(c, w), (e) => e.total),
                U = S.orders,
                M = (null == o ? void 0 : o.tradePrice) === P,
                D = null == o ? void 0 : o.prevClosingPrice,
                O = D ? (P - D) / D : 0,
                I = "en" === s.language,
                B = "KRW" === a.quoteCurrencyCode,
                { dollarBasePrice: E } = this.props;
              return (0, r.FD)(
                "tr",
                {
                  className: l,
                  children: [
                    (0, r.Y)("td", {
                      className: x()({
                        upB: O > 0,
                        downB: O < 0,
                        drawB: 0 === O,
                        positionR: M,
                        usdVisibleAndNonFiat: "en" === s.language && !h,
                      }),
                      children: (0, r.FD)(Y.e, {
                        onClick: d.bind(this, P),
                        children: [
                          (0, r.FD)("div", {
                            className: h ? "ty03" : "ty01",
                            children: [
                              M &&
                                (0, r.Y)("span", {
                                  className: "selected",
                                  onClick: d.bind(this, o.tradePrice),
                                }),
                              (0, r.Y)("strong", {
                                css: I ? ee : null,
                                children: S.formattedPrice,
                              }),
                              I &&
                                (B
                                  ? (0, r.Y)("em", {
                                      css: te,
                                      children: `$${(0, Q.Yw)(P / E, 2)}`,
                                    })
                                  : (0, r.Y)(W.h, {
                                      master: a,
                                      price: P / E,
                                      viewType: "USD_PRICE",
                                      decimalPlace: 2,
                                    })),
                              !h &&
                                (0, r.Y)(W.h, {
                                  master: a,
                                  price: P,
                                  viewType: "EMI",
                                }),
                            ],
                          }),
                          (0, r.Y)("div", {
                            className: "ty02",
                            children: (0, Q.wj)(O),
                          }),
                        ],
                      }),
                    }),
                    (0, r.Y)(H.A, {
                      type: "bar",
                      price: k,
                      baseDigits: 13,
                      align: "left",
                      onClick: d.bind(this, P),
                      percent: (100 * k) / g,
                    }),
                    (0, r.Y)(H.A, {
                      type: "text",
                      price: P * k,
                      baseDigits: 9,
                    }),
                    (0, r.Y)(H.A, {
                      type: "bar",
                      price: A,
                      baseDigits: "KRW" === a.quoteCurrencyCode ? 0 : 13,
                      align: i,
                      onClick: d.bind(this, P),
                      percent: (100 * A) / b,
                    }),
                    U.length > 0
                      ? (0, r.Y)("td", {
                          className: x()("last", {
                            usdVisibleAndNonFiat: "en" === s.language && !h,
                          }),
                          onClick: m.bind(this, U),
                          children: (0, r.FD)(Y.e, {
                            className: "btn",
                            children: ["(", U.length, ")"],
                          }),
                        })
                      : (0, r.Y)("td", {
                          className: x()("last", {
                            usdVisibleAndNonFiat: "en" === s.language && !h,
                          }),
                        }),
                  ],
                },
                n
              );
            };
          return (0, r.Y)("div", {
            className: "orderContainer",
            children: (0, r.FD)("div", {
              className: x()("orderContainer__wrap", { advancedOrder: c }),
              children: [
                (0, r.Y)("div", {
                  className: "orderContainer__orderPrice",
                  children: (0, r.Y)("div", {
                    className: "orderPrice orderPrice--accumulate",
                    children: (0, r.Y)(q.default, {
                      ref: this.scrollbar,
                      children: (0, r.FD)("table", {
                        children: [
                          f,
                          (0, r.FD)("tbody", {
                            children: [
                              N()(this.getOrderbookLength(), v("ask")),
                              N()(this.getOrderbookLength(), v("bid")),
                            ],
                          }),
                        ],
                      }),
                    }),
                  }),
                }),
                (0, r.Y)("div", {
                  className: "orderContainer__orderTotal",
                  children: (0, r.Y)("div", {
                    className: "orderTotal",
                    children: (0, r.FD)("table", {
                      className: "total",
                      children: [
                        f,
                        (0, r.Y)("tbody", {
                          children: (0, r.FD)("tr", {
                            children: [
                              (0, r.Y)("td", {}),
                              (0, r.FD)("td", {
                                children: [
                                  e("amount"),
                                  "(",
                                  a.baseCurrencyCode,
                                  ")",
                                ],
                              }),
                              (0, r.FD)("td", {
                                children: [
                                  e("price"),
                                  "(",
                                  a.quoteCurrencyCode,
                                  ")",
                                ],
                              }),
                              (0, r.FD)("td", {
                                children: [
                                  e("total"),
                                  "(",
                                  a.quoteCurrencyCode,
                                  ")",
                                ],
                              }),
                              (0, r.Y)("td", {
                                className: "last",
                                children:
                                  l &&
                                  (0, G.FD)(a, s) &&
                                  (0, r.Y)(Y.e, {
                                    onClick: u,
                                    children: (0, r.Y)(_.Ay, {
                                      text: e("cancelAll"),
                                    }),
                                  }),
                              }),
                            ],
                          }),
                        }),
                      ],
                    }),
                  }),
                }),
              ],
            }),
          });
        }
      }
      var re = (0, p.C)("exchange", { keyPrefix: "orderbookTab.accumulative" })(
          ae
        ),
        ne = a(30133),
        ie = a(20699),
        oe = a(59170),
        le = a(50310),
        se = a(73601),
        ce = a(53692),
        de = a(87774),
        ue = a(49187),
        me = a(43036),
        he = a(56177),
        pe = a(58030),
        ge = a(97046),
        Ce = a(56923),
        Te = a(79150),
        be = a(48925),
        fe = a(89314),
        ye = Object.defineProperty,
        ve = Object.getOwnPropertySymbols,
        Se = Object.prototype.hasOwnProperty,
        ke = Object.prototype.propertyIsEnumerable,
        Pe = (e, t, a) =>
          t in e
            ? ye(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        we = (e, t) => {
          for (var a in t || (t = {})) Se.call(t, a) && Pe(e, a, t[a]);
          if (ve) for (var a of ve(t)) ke.call(t, a) && Pe(e, a, t[a]);
          return e;
        },
        Ae = (e, t, a) => (Pe(e, "symbol" != typeof t ? t + "" : t, a), a);
      class Ue extends n.PureComponent {
        constructor(e) {
          super(e),
            Ae(this, "scrollbar"),
            Ae(this, "getInitialState", () => ({
              unit: "Default",
              advantageousOrder: !1,
              volume: "",
              currency: this.props.locale.fiat,
            })),
            Ae(
              this,
              "state",
              we(
                {
                  orders: {},
                  isFirstLoaded: !1,
                  orderbookSelect: 0,
                  percentage: 100,
                  standard: 0,
                  price: "0",
                  basicPopup: void 0,
                  confirmPopup: void 0,
                  errorPopup: void 0,
                },
                this.getInitialState()
              )
            ),
            Ae(this, "setBasicPopup", (e) => {
              this.setState({ basicPopup: e });
            }),
            Ae(this, "setConfirmPopup", (e) => {
              this.setState({ confirmPopup: e });
            }),
            Ae(this, "setErrorPopup", (e) => {
              this.setState({ errorPopup: e });
            }),
            Ae(this, "gaEvent", (e, t, a, r) => {
              const n = a || "",
                i = { 0: "호가", 1: "누적호가", 2: "호가주문" }[
                  u()(this.state.orderbookSelect)
                ];
              (0, S.SO)("거래소", i, e, t, n, r, this.props.code);
            }),
            Ae(this, "handleClickPrice", (e, t) => {
              this.props.setPriceOrderbook({ price: e, size: t });
            }),
            Ae(
              this,
              "openPopupNoWaitOrders",
              (e) =>
                !(e.length > 0) &&
                (this.gaEvent(
                  "취소오류팝업",
                  "확인",
                  "미체결 주문이 없습니다."
                ),
                this.setBasicPopup({
                  setPayload: this.setBasicPopup,
                  title: this.props.t(
                    "investments:waitOrders.cancelOrderError"
                  ),
                  body: this.props.t("investments:waitOrders.empty"),
                }),
                !0)
            ),
            Ae(this, "handleClickCancelAllBids", () => {
              const { clearAllOrders: e, market: t } = this.props,
                { orders: a } = this.state,
                r = l()(a, (e) => "bid" === e.side);
              if (this.openPopupNoWaitOrders(r)) return !1;
              this.gaEvent("일괄취소", "버튼입력", "매수일괄취소"),
                this.setConfirmPopup({
                  setPayload: this.setConfirmPopup,
                  title: this.props.t(
                    "investments:waitOrders.cancelOrderConfirmTitle"
                  ),
                  body: this.props.t(
                    "exchange.orderbook.confirmCancelAllOrder"
                  ),
                  confirmBtn: this.props.t(
                    "investments:waitOrders.cancelOrderConfirm"
                  ),
                  onConfirm: () => {
                    this.gaEvent("취소확인팝업", "확인", ""),
                      e(t, "bid").then((e) => {
                        e.error
                          ? (this.gaEvent("취소오류", "", JSON.stringify(e)),
                            e.alreadyPopup ||
                              this.setErrorPopup({
                                setPayload: this.setErrorPopup,
                                title: this.props.t(
                                  "investments:waitOrders.cancelOrderError"
                                ),
                                error: e.error,
                              }))
                          : (this.gaEvent("취소완료", "", ""),
                            this.gaEvent("취소전문전송", "", JSON.stringify(e)),
                            this.setBasicPopup({
                              setPayload: this.setBasicPopup,
                              title: this.props.t(
                                "investments:waitOrders.cancelOrderSuccess"
                              ),
                              body: this.props.t(
                                "investments:waitOrders.cancelOrderSuccessBody"
                              ),
                            }),
                            this.fetchData());
                      });
                  },
                  onCancel: () => {
                    this.gaEvent("취소확인팝업", "취소");
                  },
                });
            }),
            Ae(this, "handleClickCancelAllAsks", () => {
              const { clearAllOrders: e, market: t } = this.props,
                { orders: a } = this.state,
                r = l()(a, (e) => "ask" === e.side);
              if (this.openPopupNoWaitOrders(r)) return !1;
              this.gaEvent("일괄취소", "버튼입력", "매도일괄취소"),
                this.setConfirmPopup({
                  setPayload: this.setConfirmPopup,
                  title: this.props.t(
                    "investments:waitOrders.cancelOrderConfirmTitle"
                  ),
                  body: this.props.t(
                    "exchange.orderbook.confirmCancelAllOrder"
                  ),
                  confirmBtn: this.props.t(
                    "investments:waitOrders.cancelOrderConfirm"
                  ),
                  onConfirm: () => {
                    this.gaEvent("취소확인팝업", "확인", ""),
                      e(t, "ask").then((e) => {
                        e.error
                          ? (this.gaEvent("취소오류", "", JSON.stringify(e)),
                            e.alreadyPopup ||
                              this.setErrorPopup({
                                setPayload: this.setErrorPopup,
                                title: this.props.t(
                                  "investments:waitOrders.cancelOrderError"
                                ),
                                error: e.error,
                              }))
                          : (this.gaEvent("취소완료", "", ""),
                            this.gaEvent("취소전문전송", "", JSON.stringify(e)),
                            this.setBasicPopup({
                              setPayload: this.setBasicPopup,
                              title: this.props.t(
                                "investments:waitOrders.cancelOrderSuccess"
                              ),
                              body: this.props.t(
                                "investments:waitOrders.cancelOrderSuccessBody"
                              ),
                            }),
                            this.fetchData());
                      });
                  },
                  onCancel: () => {
                    this.gaEvent("취소확인팝업", "취소");
                  },
                });
            }),
            Ae(this, "handleClickCancelAll", () => {
              const { clearAllOrders: e, market: t } = this.props,
                { orders: a } = this.state;
              if (this.openPopupNoWaitOrders(h()(a))) return !1;
              this.gaEvent("일괄취소", "버튼입력", "전체일괄취소"),
                this.setConfirmPopup({
                  setPayload: this.setConfirmPopup,
                  title: this.props.t(
                    "investments:waitOrders.cancelOrderConfirmTitle"
                  ),
                  body: this.props.t(
                    "exchange.orderbook.confirmCancelAllOrder"
                  ),
                  confirmBtn: this.props.t(
                    "investments:waitOrders.cancelOrderConfirm"
                  ),
                  onConfirm: () => {
                    this.gaEvent("취소확인팝업", "확인", ""),
                      e(t).then((e) => {
                        e.error
                          ? (this.gaEvent("취소오류", "", JSON.stringify(e)),
                            e.alreadyPopup ||
                              this.setErrorPopup({
                                setPayload: this.setErrorPopup,
                                title: this.props.t(
                                  "investments:waitOrders.cancelOrderError"
                                ),
                                error: e.error,
                              }))
                          : (this.gaEvent("취소완료", "", ""),
                            this.gaEvent("취소전문전송", "", JSON.stringify(e)),
                            this.setBasicPopup({
                              setPayload: this.setBasicPopup,
                              title: this.props.t(
                                "investments:waitOrders.cancelOrderSuccess"
                              ),
                              body: this.props.t(
                                "investments:waitOrders.cancelOrderSuccessBody"
                              ),
                            }),
                            this.fetchData());
                      });
                  },
                  onCancel: () => {
                    this.gaEvent("취소확인팝업", "취소");
                  },
                });
            }),
            Ae(this, "handleClickCancelMultipleOrders", (e) => {
              this.setConfirmPopup({
                setPayload: this.setConfirmPopup,
                title: this.props.t(
                  "investments:waitOrders.cancelOrderConfirmTitle"
                ),
                body: this.props.t("exchange.orderbook.confirmCancelOrder"),
                confirmBtn: this.props.t(
                  "investments:waitOrders.cancelOrderConfirm"
                ),
                onConfirm: () => {
                  this.gaEvent("취소확인팝업", "확인", "", "Order"),
                    this.props
                      .deleteMultipleOrders(c()(e, "uuid"))
                      .then((e) => {
                        setTimeout(() => {
                          this.fetchData();
                        }, 1e3),
                          e.error
                            ? (this.gaEvent(
                                "취소오류",
                                "",
                                JSON.stringify(e),
                                "Order"
                              ),
                              e.alreadyPopup ||
                                this.setErrorPopup({
                                  setPayload: this.setErrorPopup,
                                  title: this.props.t(
                                    "investments:waitOrders.cancelOrderError"
                                  ),
                                  error: e.error,
                                }))
                            : (this.gaEvent("취소완료", "", "", "Order"),
                              this.gaEvent(
                                "취소전문전송",
                                "",
                                JSON.stringify(e)
                              ),
                              this.setBasicPopup({
                                setPayload: this.setBasicPopup,
                                title: this.props.t(
                                  "investments:waitOrders.cancelOrderSuccess"
                                ),
                                body: this.props.t(
                                  "investments:waitOrders.cancelOrderSuccessBody"
                                ),
                              }));
                      });
                },
                onCancel: () => {
                  this.gaEvent("취소확인팝업", "취소");
                },
              });
            }),
            Ae(this, "handleOrderbookSelectChange", (e) => {
              this.setState({ orderbookSelect: e });
            }),
            Ae(this, "handleClickAdvantageousOrder", () => {
              this.setState({
                advantageousOrder: !this.state.advantageousOrder,
              });
            }),
            Ae(this, "changeQuoteUnit", (e) => {
              this.props.selectOrderbookUnit(e), this.setState({ unit: e });
            }),
            Ae(this, "handleChangePrice", (e) => {
              this.setState({ price: e });
            }),
            Ae(this, "handleChangeStandard", (e) => {
              this.setState({ standard: e });
            }),
            Ae(this, "handleChangeCurrency", (e) => {
              this.setState({ currency: e, price: "0" });
            }),
            Ae(this, "handleChangePercentage", (e) => {
              this.setState({ percentage: e });
            }),
            Ae(this, "getOrderbook", (e) =>
              (0, Z.P)(this.props.orderbooks, this.props.code, e)
            ),
            Ae(this, "fetchData", () => {
              this.props.isAuthenticated &&
                (this.props.fetchMarketStatus(this.props.market),
                this.props.fetchMyWaitOrdersAll(),
                this.props.fetchOrderChance(this.props.market));
            }),
            Ae(this, "renderPopup", () => {
              const {
                basicPopup: e,
                confirmPopup: t,
                errorPopup: a,
              } = this.state;
              return (0, r.FD)(r.FK, {
                children: [
                  e && (0, r.Y)(w.Ay, { payload: e }),
                  t && (0, r.Y)(A.Ay, { payload: t }),
                  a && (0, r.Y)(U.Ay, { payload: a }),
                ],
              });
            }),
            (this.scrollbar = n.createRef());
        }
        componentDidMount() {
          const e =
            "Default" === this.state.unit
              ? this.props.code
              : `${this.props.code}.${this.state.unit}`;
          this.props.subscribeCrixOrderbook("orderbook", e),
            this.props.isAuthenticated &&
              (this.props.subscribeCrixOrder("orderbook", [this.props.code]),
              this.props.fetchMyWaitOrdersAll());
        }
        componentDidUpdate(e, t) {
          if (e.code !== this.props.code || t.unit !== this.state.unit) {
            const e =
              "Default" === this.state.unit
                ? this.props.code
                : `${this.props.code}.${this.state.unit}`;
            this.props.subscribeCrixOrderbook("orderbook", e),
              this.props.isAuthenticated &&
                (this.props.subscribeCrixOrder("orderbook", [this.props.code]),
                this.props.fetchMyWaitOrdersAll());
          }
          if (!this.state || this.state.isFirstLoaded) {
            const e = this.scrollbar.current;
            e &&
              e.getScrollHeight() > 0 &&
              (e.scrollTop(138), this.setState({ isFirstLoaded: !1 }));
          }
          if (this.state.orderbookSelect !== t.orderbookSelect) {
            const e = "Default";
            this.changeQuoteUnit(e);
          }
          if (
            this.props.master &&
            e.master &&
            this.props.master.code !== e.master.code
          ) {
            const t = "Default";
            this.changeQuoteUnit(t),
              this.props.master.quoteCurrencyCode !==
                e.master.quoteCurrencyCode && this.setState({ price: "0" });
          }
          if (
            (!e.isAuthenticated &&
              this.props.isAuthenticated &&
              (this.props.subscribeCrixOrder("orderbook", [this.props.code]),
              this.props.fetchMyWaitOrdersAll()),
            e.allWaitOrders !== this.props.allWaitOrders ||
              e.market !== this.props.market)
          ) {
            const { allWaitOrders: e, market: t } = this.props;
            this.setState({
              orders: (0, fe.d)(e, { market: t, states: ["wait"] }),
            });
          }
          e.code !== this.props.code &&
            this.setState(we({ isFirstLoaded: !0 }, this.getInitialState()));
        }
        componentWillUnmount() {
          this.props.unsubscribeCrixOrderbook("orderbook"),
            this.props.unsubscribeCrixOrder("orderbook");
        }
        render() {
          const {
              initialPrice: e,
              code: t,
              master: a,
              recent: n,
              isAuthenticated: i,
              marketStatus: o,
              assets: l,
              orderChance: s,
              market: c,
              locale: d,
              subscribeCrixTrade: m,
              unsubscribeCrixTrade: h,
              orderbookType: p,
              dollarBasePrice: g,
              isAdvancedOrderEnabled: C,
            } = this.props,
            {
              orderbookSelect: T,
              advantageousOrder: b,
              unit: f,
              price: y,
              standard: v,
              currency: S,
              percentage: k,
            } = this.state,
            w = this.getOrderbook(f);
          if (!t || !f || !a)
            return (0, r.FD)(r.FK, {
              children: [this.renderPopup(), (0, r.Y)("article", {})],
            });
          const A = this.state.orders;
          return (0, r.FD)("article", {
            className: 1 === T ? "accumulate" : void 0,
            children: [
              this.renderPopup(),
              (0, r.Y)(P.d, {
                handleOrderbookSelectChange: this.handleOrderbookSelectChange,
                orderbookSelect: T,
                code: t,
                recent: n,
                master: a,
                price: y,
                standard: v,
                currency: S,
                percentage: k,
                handleChangeStandard: this.handleChangeStandard,
                handleChangePrice: this.handleChangePrice,
                handleChangePercentage: this.handleChangePercentage,
                handleChangeCurrency: this.handleChangeCurrency,
              }),
              {
                0: (0, r.Y)(ne.Ay, {
                  handleClickPrice: this.handleClickPrice,
                  handleClickCancelAllAsks: this.handleClickCancelAllAsks,
                  handleClickCancelAllBids: this.handleClickCancelAllBids,
                  handleClickCancelMultipleOrders:
                    this.handleClickCancelMultipleOrders,
                  code: t,
                  master: a,
                  orderbook: w,
                  recent: n,
                  unit: f,
                  orders: A,
                  isAuthenticated: i,
                  orderbookSelect: T,
                  advantageousOrder: b,
                  changeQuoteUnit: this.changeQuoteUnit,
                  orderbookType: p,
                  initialPrice: e,
                  locale: d,
                  dollarBasePrice: g,
                  isAdvancedOrderEnabled: C,
                }),
                1: (0, r.Y)(re, {
                  subscribeCrixTrade: m,
                  unsubscribeCrixTrade: h,
                  handleClickPrice: this.handleClickPrice,
                  handleClickCancelAll: this.handleClickCancelAll,
                  handleClickCancelMultipleOrders:
                    this.handleClickCancelMultipleOrders,
                  code: t,
                  master: a,
                  orderbook: w,
                  recent: n,
                  unit: f,
                  orders: A,
                  isAuthenticated: i,
                  changeQuoteUnit: this.changeQuoteUnit,
                  locale: d,
                  dollarBasePrice: g,
                  isAdvancedOrderEnabled: C,
                }),
                2: (0, r.Y)(ie.Ay, {
                  handleClickPrice: this.handleClickPrice,
                  handleClickCancelAllAsks: this.handleClickCancelAllAsks,
                  handleClickCancelAllBids: this.handleClickCancelAllBids,
                  handleClickCancelMultipleOrders:
                    this.handleClickCancelMultipleOrders,
                  handleChangeStandard: this.handleChangeStandard,
                  handleChangePrice: this.handleChangePrice,
                  handleChangePercentage: this.handleChangePercentage,
                  handleChangeCurrency: this.handleChangeCurrency,
                  code: t,
                  master: a,
                  orderbook: w,
                  recent: n,
                  unit: f,
                  orders: A,
                  isAuthenticated: i,
                  changeQuoteUnit: this.changeQuoteUnit,
                  assets: l,
                  marketStatus: o,
                  price: y,
                  currency: S,
                  standard: v,
                  orderChance: s,
                  market: c,
                  percentage: k,
                  createLimitOrder: this.props.createLimitOrder,
                  fetchData: this.fetchData,
                  orderbookType: p,
                  initialPrice: e,
                  locale: d,
                  dollarBasePrice: g,
                }),
              }[u()(T)],
            ],
          });
        }
      }
      const Me = (0, i.createSelector)(
          [
            ce.Sf,
            de.i,
            ue.lQ,
            Ce.FD,
            Ce.ef,
            ge.mM,
            Te.BQ,
            pe.b,
            oe.nJ,
            (e, t) => (0, se.hc)(e, (0, Ce.ef)(e, t)),
            he.G3,
            le.y,
            be.PR,
            me.V,
          ],
          (e, t, a, r, n, i, o, l, s, c, d, u, m, h) => ({
            orderbooks: t,
            code: r,
            recent: a[r],
            market: n,
            allWaitOrders: i,
            isAuthenticated: o,
            marketStatus: l[n],
            assets: s,
            orderChance: c,
            locale: d,
            estimateBaseCurrency: u,
            orderbookType: m,
            dollarBasePrice: h,
          })
        ),
        De = {
          setPriceOrderbook: y.xg,
          subscribeCrixOrderbook: v.c$,
          unsubscribeCrixOrderbook: v.Vx,
          subscribeCrixOrder: v.LT,
          unsubscribeCrixOrder: v.q$,
          subscribeCrixTrade: v.HC,
          unsubscribeCrixTrade: v.AR,
          fetchMyWaitOrdersAll: f.Yd,
          fetchMarketStatus: T.Tj,
          fetchInvestmentAssets: C.DO,
          clearAllOrders: f.ew,
          deleteMultipleOrders: f.rg,
          createLimitOrder: f.ig,
          selectOrderbookUnit: k.w1,
          fetchOrderChance: b.N6,
        },
        xe = (0, g.Ng)(Me, De),
        Oe = (e) => xe((0, p.C)()(e));
      var Ie = Oe(Ue);
    },
    11522: function (e, t, a) {
      "use strict";
      a.d(t, {
        vE: function () {
          return y;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(62205),
        o = a(2481),
        l = a(97500),
        s = a.n(l),
        c = a(6448),
        d = a(98871),
        u = a(80232),
        m = a(92265),
        h = a(50310),
        p = a(53692),
        g = a(49187),
        C = a(56177),
        T = a(39706);
      const b = i.AH`
  line-height: 19px;
`,
        f = i.AH`
  line-height: 16px;
  color: #666666;
`,
        y = ({ price: e, baseCurrency: t, master: a }) => {
          const r = (0, c.d4)(h.y),
            n = (0, c.d4)(g.lQ),
            i = (0, c.d4)(p.Sf),
            o = (0, c.d4)(C.G3),
            l = t || r,
            { first: s, second: d } = (0, T.hY)(a.quoteCurrencyCode, l, i, o),
            u = s.code,
            m = d.code,
            b = s.inversed,
            f = d.inversed,
            y = u && n[u],
            v = m && n[m];
          let S = e;
          return a.quoteCurrencyCode === l
            ? S
            : y
            ? (v &&
                (S = f ? v.tradePrice && e / v.tradePrice : e * v.tradePrice),
              b ? y.tradePrice && S / y.tradePrice : S * y.tradePrice)
            : S;
        };
      t.Ay = n.memo(
        ({
          isFiat: e,
          currentPrice: t,
          recent: a,
          master: n,
          price: l,
          handleClickPrice: h,
          handleOnMouseOver: p,
          handleOnMouseLeave: g,
          index: T,
          tradeType: v,
          quote: S,
          dollarBasePrice: k,
          language: P,
        }) => {
          const w = a && a.prevClosingPrice,
            A = S.price,
            U = w ? (A - w) / w : 0,
            M = "en" === P,
            D = (0, c.d4)(C.Eb),
            x = y({ price: l, baseCurrency: D, master: n });
          return (0, r.Y)("td", {
            className: s()({
              upB: U > 0,
              downB: U < 0,
              drawB: 0 === U,
              positionR: t,
              usdVisibleAndNonFiat: M && !e,
            }),
            children: (0, r.FD)(d.e, {
              onClick: h.bind(void 0, { value: l }),
              onMouseOver: p.bind(void 0, T, v),
              onMouseLeave: g,
              children: [
                (0, r.FD)(o.az, {
                  css: [
                    M &&
                      i.AH`
                line-height: 15px;
              `,
                  ],
                  className: s()({ ty03: e, ty01: !e }),
                  children: [
                    t && a && (0, r.Y)("span", { className: "selected" }),
                    (0, r.Y)("strong", {
                      css: M ? b : null,
                      children: S.formattedPrice,
                    }),
                    M &&
                      (0, r.Y)("em", {
                        css: f,
                        children: `$${(0, m.Yw)(x / k, 2)}`,
                      }),
                    !e &&
                      (0, r.Y)("p", {
                        children: (0, r.Y)(u.h, {
                          master: n,
                          price: l,
                          viewType: "EMI",
                        }),
                      }),
                  ],
                }),
                (0, r.Y)("div", { className: "ty02", children: (0, m.wj)(U) }),
              ],
            }),
          });
        }
      );
    },
    52862: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(97500),
        i = a.n(n),
        o = a(13409),
        l = a(92265),
        s = Object.defineProperty,
        c = Object.getOwnPropertySymbols,
        d = Object.prototype.hasOwnProperty,
        u = Object.prototype.propertyIsEnumerable,
        m = (e, t, a) =>
          t in e
            ? s(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        h = (e, t) => {
          for (var a in t || (t = {})) d.call(t, a) && m(e, a, t[a]);
          if (c) for (var a of c(t)) u.call(t, a) && m(e, a, t[a]);
          return e;
        };
      t.A = ({
        bunchInfo: e,
        master: t,
        tradeType: a,
        selectedBoxCount: n,
        isBothEnds: s,
        isGlobal: c = !1,
        isFiat: d,
      }) => {
        const {
            t: u,
            i18n: { language: m },
          } = (0, o.B)(),
          p = c ? 45 : "en" === m && !d ? 61 : 45,
          g = { top: "ask" === a && s, bottom: "bid" === a && s },
          C =
            "ask" === a
              ? { bottom: p * n + "px", marginBottom: s ? "-74px" : "-37px" }
              : { top: p * n + "px", marginTop: s ? "-74px" : "-37px" };
        return (0, r.Y)(r.FK, {
          children: (0, r.FD)("section", {
            className: i()("selectedBox", g),
            style: h({}, C),
            children: [
              (0, r.FD)("div", {
                className: "selectedBox__dl",
                children: [
                  (0, r.Y)("div", {
                    className: "selectedBox__dt",
                    children: u(
                      "exchange:orderbookTab.orderbookBunchTooltip.averagePrice"
                    ),
                  }),
                  (0, r.FD)("div", {
                    className: "selectedBox__dd",
                    children: [
                      (0, l.lp)(
                        e.averagePrice,
                        t.quoteCurrencyCode,
                        t.baseCurrencyCode
                      ),
                      " ",
                      (0, r.Y)("span", { children: t.quoteCurrencyCode }),
                    ],
                  }),
                ],
              }),
              (0, r.FD)("div", {
                className: "selectedBox__dl",
                children: [
                  (0, r.Y)("div", {
                    className: "selectedBox__dt",
                    children: u(
                      "exchange:orderbookTab.orderbookBunchTooltip.totalSize"
                    ),
                  }),
                  (0, r.FD)("div", {
                    className: "selectedBox__dd",
                    children: [
                      (0, l.Tu)(e.totalSize).overThreshold
                        ? `${(0, l.Tu)(e.totalSize).number} ${u(
                            "exchange.orderbookBunchTooltip.million"
                          )}`
                        : (0, l.Yw)(e.totalSize, 3),
                      " ",
                      (0, r.Y)("span", { children: t.baseCurrencyCode }),
                    ],
                  }),
                ],
              }),
              (0, r.FD)("div", {
                className: "selectedBox__dl",
                children: [
                  (0, r.Y)("div", {
                    className: "selectedBox__dt",
                    children: u(
                      "exchange:orderbookTab.orderbookBunchTooltip.totalPrice"
                    ),
                  }),
                  (0, r.FD)("div", {
                    className: "selectedBox__dd",
                    children: [
                      (0, l.Tu)(e.totalPrice).overThreshold
                        ? `${(0, l.Tu)(e.totalPrice).number} ${u(
                            "exchange.orderbookBunchTooltip.million"
                          )}`
                        : (0, l.lp)(
                            e.totalPrice,
                            t.quoteCurrencyCode,
                            t.baseCurrencyCode
                          ),
                      " ",
                      (0, r.Y)("span", { children: t.quoteCurrencyCode }),
                    ],
                  }),
                ],
              }),
            ],
          }),
        });
      };
    },
    30133: function (e, t, a) {
      "use strict";
      a.d(t, {
        Lv: function () {
          return j;
        },
        M3: function () {
          return G;
        },
        Ay: function () {
          return Q;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(61895),
        o = a(97500),
        l = a.n(o),
        s = a(82950),
        c = a.n(s),
        d = a(40485),
        u = a(52604),
        m = a(6448),
        h = a(16510),
        p = a(26029),
        g = a(97172),
        C = a(83830),
        T = a(16565),
        b = a(52862),
        f = a(48179),
        y = a(19192),
        v = a(72157),
        S = a(66086),
        k = a.n(S),
        P = a(98871),
        w = a(92265),
        A = a(56177),
        U = a(31374);
      var M = n.memo(
          ({
            quote: e,
            master: t,
            handleClickPrice: a,
            handleOnMouseOver: n,
            handleOnMouseLeave: i,
            tradeType: o,
            index: s,
            totalSize: c,
            maxSize: d,
            initialPrice: u,
            orderbookType: h,
            language: p,
            isFiat: g,
          }) => {
            const C = "en" === p,
              T = e.price,
              b = e.size,
              f = (0, m.d4)(A.G3);
            return (0, r.Y)("td", {
              className: l()("bar", { usdVisibleAndNonFiat: C && !g }),
              onMouseOver: n.bind(void 0, s, o),
              onMouseLeave: i,
              children: (0, r.FD)(P.e, {
                href: "#",
                onClick: a.bind(void 0, { value: T, size: c }),
                children: [
                  (0, r.Y)("div", {
                    style: {
                      width:
                        (100 * k()(h === U.Y.AMOUNT ? b : e.total)) / d + "%",
                    },
                    children: "-",
                  }),
                  (0, r.Y)("p", {
                    children:
                      h === U.Y.AMOUNT
                        ? (0, w.zX)(b, f.fiat, u)
                        : b * T === 0
                        ? "-"
                        : (0, w.rn)(e.total, t.quoteCurrencyCode),
                  }),
                ],
              }),
            });
          }
        ),
        D = a(11522),
        x = a(13409);
      var O = n.memo(({ recent: e }) => {
          const { t: t } = (0, x.B)("exchange", {
              keyPrefix: "orderbookTab.tradeTicks",
            }),
            a =
              e &&
              (e.accBidVolume / e.accAskVolume > 5
                ? 5
                : e.accBidVolume / e.accAskVolume);
          return (0, r.FD)("dl", {
            children: [
              (0, r.Y)("dt", { children: t("volumePower") }),
              (0, r.Y)("dd", { children: a ? (0, w.wj)(a) : "-" }),
            ],
          });
        }),
        I = a(63701),
        B = a(48925),
        E = a(20975),
        R = Object.defineProperty,
        L = Object.defineProperties,
        F = Object.getOwnPropertyDescriptors,
        N = Object.getOwnPropertySymbols,
        V = Object.prototype.hasOwnProperty,
        z = Object.prototype.propertyIsEnumerable,
        q = (e, t, a) =>
          t in e
            ? R(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        H = (e, t) => {
          for (var a in t || (t = {})) V.call(t, a) && q(e, a, t[a]);
          if (N) for (var a of N(t)) z.call(t, a) && q(e, a, t[a]);
          return e;
        },
        _ = (e, t) => L(e, F(t)),
        Y = (e, t, a) => (q(e, "symbol" != typeof t ? t + "" : t, a), a);
      class j extends n.PureComponent {
        constructor(e) {
          super(e),
            Y(this, "scrollbar"),
            Y(this, "gaEvent", (e, t, a, r) => {
              const n = a || "";
              (0, h.SO)("거래소", "호가", e, t, n);
            }),
            Y(this, "handleClickPrice", (e, t) => {
              null == t || t.preventDefault();
              const { value: a, size: r } = e;
              this.props.handleClickPrice(a, r);
            }),
            Y(this, "handleClickCancelAllBids", (e) => {
              null == e || e.preventDefault(),
                this.props.handleClickCancelAllBids();
            }),
            Y(this, "handleClickCancelAllAsks", (e) => {
              null == e || e.preventDefault(),
                this.props.handleClickCancelAllAsks();
            }),
            Y(this, "handleClickCancelMultipleOrders", (e, t) => {
              null == t || t.preventDefault(),
                this.props.handleClickCancelMultipleOrders(e);
            }),
            Y(this, "getOrderbookData", () => {
              const {
                master: e,
                unit: t,
                orderbook: a,
                orders: r,
                locale: n,
                estimateBaseCurrency: i,
                orderbookType: o,
              } = this.props;
              return (0, E.y)({
                master: e,
                unit: t,
                orderbook: a,
                orders: r,
                locale: n,
                estimateBaseCurrency: i,
                orderbookLength: C.gs,
                orderbookType: o,
              });
            }),
            Y(this, "handleOnMouseOver", (e, t, a) => {
              this.setState({
                mouseOverIndex: e,
                bunchTradeType: t,
                isBunchTooltipOpen: !0,
              });
            }),
            Y(this, "handleOnMouseLeave", (e) => {
              this.setState({ mouseOverIndex: -1, isBunchTooltipOpen: !1 });
            }),
            Y(this, "calculateAverage", () => {
              const { mouseOverIndex: e, bunchTradeType: t } = this.state,
                { askOrderbookUnits: a, bidOrderbookUnits: r } =
                  this.getOrderbookData();
              let n;
              return (
                (n = "ask" === t ? a[e - C.gs + a.length] : r[e]),
                n
                  ? {
                      totalPrice: n.accumulatedTotalPrice,
                      totalSize: n.accumulatedTotalSize,
                      averagePrice: n.averagePrice,
                    }
                  : { totalPrice: 0, totalSize: 0, averagePrice: NaN }
              );
            }),
            Y(this, "renderColGroup", () =>
              (0, r.FD)("colgroup", {
                children: [
                  (0, r.Y)("col", { width: "42" }),
                  (0, r.Y)("col", { width: "120" }),
                  (0, r.Y)("col", { width: "*" }),
                  (0, r.Y)("col", { width: "120" }),
                  (0, r.Y)("col", { width: "42" }),
                ],
              })
            ),
            Y(this, "height", T.yz.orderbook),
            (this.scrollbar = n.createRef()),
            (this.state = {
              mouseOverIndex: -1,
              bunchTradeType: "",
              isBunchTooltipOpen: !1,
              heightStyle: {
                height: this.props.isAdvancedOrderEnabled
                  ? T.yz.orderbookAdvancedOrderEnabled
                  : T.yz.orderbook,
              },
            });
        }
        componentDidMount() {
          this.moveScrollToMiddle();
        }
        componentDidUpdate(e) {
          e.code !== this.props.code && this.moveScrollToMiddle(),
            e.isAdvancedOrderEnabled !== this.props.isAdvancedOrderEnabled &&
              this.setState({
                heightStyle: {
                  height: this.props.isAdvancedOrderEnabled
                    ? T.yz.orderbookAdvancedOrderEnabled
                    : T.yz.orderbook,
                },
              });
        }
        moveScrollToMiddle() {
          const e = this.scrollbar.current;
          e && e.scrollTop((e.getScrollHeight() - e.getClientHeight()) / 2);
        }
        render() {
          const {
              code: e,
              master: t,
              unit: a,
              orderbook: n,
              recent: i,
              orders: o,
              isAuthenticated: s,
              locale: u,
              initialPrice: m,
              showBunchTooltip: h,
              dollarBasePrice: p,
              isAdvancedOrderEnabled: T,
            } = this.props,
            {
              mouseOverIndex: S,
              isBunchTooltipOpen: k,
              bunchTradeType: P,
              heightStyle: A,
            } = this.state;
          if (!(e && a && t && n)) return null;
          const { totalAskPrice: U, totalBidPrice: x } = n,
            {
              isFiat: B,
              askSizeMax: E,
              bidSizeMax: R,
              groupOrders: L,
              askOrderbookUnits: F,
              bidOrderbookUnits: N,
              greaterTotalSum: V,
              totalBidSize: z,
              totalAskSize: q,
              orderbookType: Y,
            } = this.getOrderbookData(),
            j = this.calculateAverage();
          return j
            ? (0, r.Y)("div", {
                className: "orderContainer",
                children: (0, r.FD)("div", {
                  className: l()("orderContainer__wrap", { advancedOrder: T }),
                  children: [
                    (0, r.Y)("div", {
                      className: "orderContainer__orderPrice",
                      children: (0, r.Y)("div", {
                        className: "orderPrice",
                        children: (0, r.Y)(d.default, {
                          ref: this.scrollbar,
                          style: A,
                          renderView: (e) =>
                            (0, r.Y)(
                              "div",
                              _(H({}, e), {
                                style: _(H({}, e.style), {
                                  marginBottom: 0,
                                  overflowX: "hidden",
                                }),
                              })
                            ),
                          children: (0, r.FD)("table", {
                            children: [
                              (0, r.FD)("colgroup", {
                                children: [
                                  (0, r.Y)("col", { width: "42" }),
                                  (0, r.Y)("col", { width: "120" }),
                                  (0, r.Y)("col", { width: "*" }),
                                  (0, r.Y)("col", { width: "120" }),
                                  (0, r.Y)("col", { width: "42" }),
                                ],
                              }),
                              (0, r.FD)("tbody", {
                                children: [
                                  c()(C.gs, (e) => {
                                    const a = F[e - C.gs + F.length],
                                      n = `ask-${e}`,
                                      o = () =>
                                        0 === e &&
                                        (0, r.Y)(f.Ay, {
                                          master: t,
                                          recent: i,
                                          children:
                                            h &&
                                            S >= 0 &&
                                            "ask" === P &&
                                            (0, r.Y)(b.A, {
                                              tradeType: P,
                                              selectedBoxCount: C.gs - S,
                                              isBothEnds: 0 === S,
                                              master: t,
                                              bunchInfo: j,
                                              isFiat: B,
                                            }),
                                        });
                                    if (a) {
                                      const s = a.orders,
                                        c = !!i && a.price === i.tradePrice;
                                      return (0, r.FD)(
                                        "tr",
                                        {
                                          className: l()("down", {
                                            selectedArea:
                                              S <= e && k && "ask" === P,
                                          }),
                                          children: [
                                            s.length > 0
                                              ? (0, r.FD)("td", {
                                                  className: l()({
                                                    usdVisibleAndNonFiat:
                                                      "en" === u.language && !B,
                                                  }),
                                                  onClick:
                                                    this.handleClickCancelMultipleOrders.bind(
                                                      this,
                                                      s
                                                    ),
                                                  children: [
                                                    "(",
                                                    s.length,
                                                    ")",
                                                  ],
                                                })
                                              : (0, r.Y)("td", {
                                                  className: l()({
                                                    usdVisibleAndNonFiat:
                                                      "en" === u.language && !B,
                                                  }),
                                                }),
                                            (0, r.Y)(M, {
                                              master: t,
                                              quote: a,
                                              index: e,
                                              tradeType: "ask",
                                              totalSize: j.totalSize,
                                              orderbookType: Y,
                                              maxSize: E,
                                              initialPrice: m,
                                              language: u.language,
                                              isFiat: B,
                                              handleOnMouseLeave:
                                                this.handleOnMouseLeave,
                                              handleOnMouseOver:
                                                this.handleOnMouseOver,
                                              handleClickPrice:
                                                this.handleClickPrice,
                                            }),
                                            (0, r.Y)(D.Ay, {
                                              dollarBasePrice: p,
                                              isFiat: B,
                                              master: t,
                                              recent: i,
                                              price: a.price,
                                              quote: a,
                                              currentPrice: c,
                                              index: e,
                                              tradeType: "ask",
                                              handleOnMouseLeave:
                                                this.handleOnMouseLeave,
                                              handleOnMouseOver:
                                                this.handleOnMouseOver,
                                              handleClickPrice:
                                                this.handleClickPrice,
                                              language: u.language,
                                            }),
                                            o(),
                                          ],
                                        },
                                        n
                                      );
                                    }
                                    return (0, r.FD)(
                                      "tr",
                                      {
                                        className: "down",
                                        children: [
                                          (0, r.Y)("td", {
                                            className: l()({
                                              usdVisibleAndNonFiat:
                                                "en" === u.language && !B,
                                            }),
                                          }),
                                          (0, r.Y)("td", {
                                            className: l()("bar", {
                                              usdVisibleAndNonFiat:
                                                "en" === u.language && !B,
                                            }),
                                            children: (0, r.FD)("a", {
                                              href: "#",
                                              children: [
                                                (0, r.Y)("div", {
                                                  style: { width: "0%" },
                                                  children: "-",
                                                }),
                                                (0, r.Y)("p", {}),
                                              ],
                                            }),
                                          }),
                                          (0, r.Y)("td", {
                                            className: l()("downB", {
                                              usdVisibleAndNonFiat:
                                                "en" === u.language && !B,
                                            }),
                                            children: (0, r.FD)("a", {
                                              href: "#",
                                              children: [
                                                (0, r.Y)("div", {
                                                  className: "ty03",
                                                  children: (0, r.Y)("strong", {
                                                    children: " ",
                                                  }),
                                                }),
                                                (0, r.Y)("div", {
                                                  className: "ty02",
                                                }),
                                              ],
                                            }),
                                          }),
                                          o(),
                                        ],
                                      },
                                      n
                                    );
                                  }),
                                  c()(C.gs, (e) => {
                                    const a = N[e],
                                      n = `bid-${e}`;
                                    if (a) {
                                      const o = !!i && a.price === i.tradePrice,
                                        s = a.orders;
                                      return (0, r.FD)(
                                        "tr",
                                        {
                                          className: l()("up", {
                                            selectedArea:
                                              S >= e && k && "bid" === P,
                                          }),
                                          children: [
                                            0 === e &&
                                              (0, r.FD)("td", {
                                                colSpan: 2,
                                                rowSpan: C.gs,
                                                className: "inner02",
                                                children: [
                                                  (0, r.Y)(O, { recent: i }),
                                                  (0, r.Y)(v.Ay, {
                                                    master: t,
                                                    initialPrice: m,
                                                    fiat: u.fiat,
                                                  }),
                                                  h &&
                                                    S >= 0 &&
                                                    "bid" === P &&
                                                    (0, r.Y)(b.A, {
                                                      tradeType: P,
                                                      selectedBoxCount: S + 1,
                                                      isBothEnds:
                                                        S === C.gs - 1,
                                                      master: t,
                                                      isFiat: B,
                                                      bunchInfo: j,
                                                    }),
                                                ],
                                              }),
                                            (0, r.Y)(D.Ay, {
                                              dollarBasePrice: p,
                                              isFiat: B,
                                              master: t,
                                              price: a.price,
                                              recent: i,
                                              quote: a,
                                              currentPrice: o,
                                              index: e,
                                              tradeType: a.side,
                                              handleOnMouseLeave:
                                                this.handleOnMouseLeave,
                                              handleOnMouseOver:
                                                this.handleOnMouseOver,
                                              handleClickPrice:
                                                this.handleClickPrice,
                                              language: u.language,
                                            }),
                                            (0, r.Y)(M, {
                                              master: t,
                                              isFiat: B,
                                              quote: a,
                                              index: e,
                                              tradeType: a.side,
                                              totalSize: j.totalSize,
                                              orderbookType: Y,
                                              maxSize: R,
                                              language: u.language,
                                              initialPrice: m,
                                              handleOnMouseLeave:
                                                this.handleOnMouseLeave,
                                              handleOnMouseOver:
                                                this.handleOnMouseOver,
                                              handleClickPrice:
                                                this.handleClickPrice,
                                            }),
                                            s.length > 0
                                              ? (0, r.FD)("td", {
                                                  className: l()("last", {
                                                    usdVisibleAndNonFiat:
                                                      "en" === u.language && !B,
                                                  }),
                                                  onClick:
                                                    this.handleClickCancelMultipleOrders.bind(
                                                      this,
                                                      s
                                                    ),
                                                  children: [
                                                    "(",
                                                    s.length,
                                                    ")",
                                                  ],
                                                })
                                              : (0, r.Y)("td", {
                                                  className: l()("last", {
                                                    usdVisibleAndNonFiat:
                                                      "en" === u.language && !B,
                                                  }),
                                                }),
                                          ],
                                        },
                                        n
                                      );
                                    }
                                    return (0, r.FD)(
                                      "tr",
                                      {
                                        className: "up",
                                        children: [
                                          0 === e
                                            ? (0, r.FD)("td", {
                                                colSpan: 2,
                                                rowSpan: C.gs,
                                                className: "inner02",
                                                children: [
                                                  (0, r.Y)(O, { recent: i }),
                                                  (0, r.Y)(v.Ay, {
                                                    master: t,
                                                    initialPrice: m,
                                                    fiat: u.fiat,
                                                  }),
                                                ],
                                              })
                                            : null,
                                          (0, r.Y)("td", {
                                            className: l()("upB", {
                                              usdVisibleAndNonFiat:
                                                "en" === u.language && !B,
                                            }),
                                            children: (0, r.FD)("a", {
                                              href: "#",
                                              children: [
                                                (0, r.Y)("div", {
                                                  className: "ty03",
                                                  children: (0, r.Y)(
                                                    "strong",
                                                    {}
                                                  ),
                                                }),
                                                (0, r.Y)("div", {
                                                  className: "ty02",
                                                }),
                                              ],
                                            }),
                                          }),
                                          (0, r.Y)("td", {
                                            className: l()("bar", {
                                              usdVisibleAndNonFiat:
                                                "en" === u.language && !B,
                                            }),
                                            children: (0, r.FD)("a", {
                                              href: "#",
                                              children: [
                                                (0, r.Y)("div", {
                                                  style: { width: "0%" },
                                                  children: "-",
                                                }),
                                                (0, r.Y)("p", {}),
                                              ],
                                            }),
                                          }),
                                          (0, r.Y)("td", {
                                            className: l()("last", {
                                              usdVisibleAndNonFiat:
                                                "en" === u.language && !B,
                                            }),
                                          }),
                                        ],
                                      },
                                      n
                                    );
                                  }),
                                ],
                              }),
                            ],
                          }),
                        }),
                      }),
                    }),
                    (0, r.Y)("div", {
                      className: "orderContainer__orderTotal",
                      children: (0, r.Y)("div", {
                        className: "orderTotal",
                        children: (0, r.FD)("table", {
                          className: "total",
                          children: [
                            (0, r.FD)("colgroup", {
                              children: [
                                (0, r.Y)("col", { width: "42" }),
                                (0, r.Y)("col", { width: "120" }),
                                (0, r.Y)("col", { width: "*" }),
                                (0, r.Y)("col", { width: "120" }),
                                (0, r.Y)("col", { width: "42" }),
                              ],
                            }),
                            (0, r.Y)("tbody", {
                              children: (0, r.FD)("tr", {
                                children: [
                                  (0, r.Y)("td", {
                                    children:
                                      s &&
                                      (0, I.FD)(t, u) &&
                                      (0, r.Y)("a", {
                                        href: "#",
                                        onClick: this.handleClickCancelAllAsks,
                                        children: (0, r.Y)(g.Ay, {
                                          text: this.props.t(
                                            "exchange.orderbookNormal.cancelAll"
                                          ),
                                        }),
                                      }),
                                  }),
                                  (0, r.Y)("td", {
                                    className: "rAlign",
                                    children:
                                      "amount" === Y
                                        ? (0, w.zX)(q, u.fiat, m)
                                        : (0, w.rn)(U, t.quoteCurrencyCode),
                                  }),
                                  (0, r.Y)(y.Ay, {
                                    master: t,
                                    changeQuoteUnit: this.props.changeQuoteUnit,
                                    unit: a,
                                    orderbookType: Y,
                                  }),
                                  (0, r.Y)("td", {
                                    className: "lAlign",
                                    style: { fontSize: 12 },
                                    children:
                                      "amount" === Y
                                        ? (0, w.zX)(z, u.fiat, m)
                                        : (0, w.rn)(x, t.quoteCurrencyCode),
                                  }),
                                  (0, r.Y)("td", {
                                    className: "last",
                                    children:
                                      s &&
                                      (0, I.FD)(t, u) &&
                                      (0, r.Y)("a", {
                                        href: "#",
                                        onClick: this.handleClickCancelAllBids,
                                        children: (0, r.Y)(g.Ay, {
                                          text: this.props.t(
                                            "exchange.orderbookNormal.cancelAll"
                                          ),
                                        }),
                                      }),
                                  }),
                                ],
                              }),
                            }),
                          ],
                        }),
                      }),
                    }),
                  ],
                }),
              })
            : null;
        }
      }
      const K = (0, i.createSelector)([B.le, A.KY], (e, t) => ({
          country: t,
          showBunchTooltip: "Y" === e,
        })),
        W = (0, m.Ng)(K, { dispatchOrderbookUnitType: p._b }),
        G = (e) => W(e);
      var Q = G((0, u.C)()(j));
    },
    20699: function (e, t, a) {
      "use strict";
      a.d(t, {
        Ay: function () {
          return Se;
        },
        vb: function () {
          return Ce;
        },
        aq: function () {
          return Te;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(62205),
        o = a(97500),
        l = a.n(o),
        s = a(69889),
        c = a(90372),
        d = a.n(c),
        u = a(82950),
        m = a.n(u),
        h = a(66086),
        p = a.n(h),
        g = a(40485),
        C = a(13409),
        T = a(6448),
        b = a(16510),
        f = a(29289),
        y = a(37343),
        v = a(83830),
        S = a(16565),
        k = a(80232),
        P = a(61895),
        w = a(25877),
        A = a(6690),
        U = a.n(A),
        M = a(68382),
        D = a.n(M),
        x = a(52604),
        O = a(93258),
        I = a(92265),
        B = a(67546),
        E = a(50310),
        R = a(31866),
        L = a(56177);
      class F extends n.PureComponent {
        componentDidMount() {
          this.props.master &&
            this.props.fetchCrixTradeDays(this.props.master.code, 2);
        }
        componentDidUpdate(e) {
          this.props.master !== e.master &&
            this.props.master &&
            this.props.fetchCrixTradeDays(this.props.master.code, 2);
        }
        render() {
          const { master: e, recent: t, trades: a, locale: n } = this.props;
          if (!e) return null;
          if (!t)
            return (0, r.Y)("td", { rowSpan: v.gs, className: "inner01" });
          const i = U()(a, ["tradeDate"], ["desc"]),
            o =
              (i.length >= 2 && i[1],
              l()({
                up: t.prevClosingPrice && t.highPrice > t.prevClosingPrice,
                down: t.prevClosingPrice && t.highPrice < t.prevClosingPrice,
              })),
            s = l()({
              up: t.prevClosingPrice && t.lowPrice > t.prevClosingPrice,
              down: t.prevClosingPrice && t.lowPrice < t.prevClosingPrice,
            });
          return (0, r.FD)("td", {
            rowSpan: v.gs,
            className: "inner01",
            children: [
              (0, r.FD)("dl", {
                className: "first mostL",
                children: [
                  (0, r.Y)("dt", {
                    children: this.props.t(
                      "exchange.orderbookMiniOverview.accTradePrice"
                    ),
                  }),
                  e.quoteCurrencyCode === n.fiat
                    ? (0, r.FD)("dd", {
                        children: [
                          (0, I.Yw)(t.accTradePrice24h / 1e6, 0),
                          " ",
                          (0, r.Y)("i", {
                            children: this.props.t(
                              "exchange.orderbookMiniOverview.krw1Million"
                            ),
                          }),
                          (0, r.FD)("em", {
                            children: [
                              "(",
                              this.props.t(
                                "exchange.orderbookMiniOverview.last24h"
                              ),
                              ")",
                            ],
                          }),
                        ],
                      })
                    : (0, r.FD)("dd", {
                        children: [
                          (0, I.Yw)(t.accTradePrice24h, 0),
                          " ",
                          (0, r.Y)("i", { children: e.quoteCurrencyCode }),
                          (0, r.FD)("em", {
                            children: [
                              "(",
                              this.props.t(
                                "exchange.orderbookMiniOverview.last24h"
                              ),
                              ")",
                            ],
                          }),
                        ],
                      }),
                ],
              }),
              (0, r.FD)("dl", {
                className: "mostL",
                children: [
                  (0, r.Y)("dt", {
                    children: this.props.t(
                      "exchange.orderbookMiniOverview.highest52WeekPrice"
                    ),
                  }),
                  (0, r.FD)("dd", {
                    className: "up",
                    children: [
                      (0, I.lp)(
                        t.highest52WeekPrice,
                        e.quoteCurrencyCode,
                        e.baseCurrencyCode
                      ),
                      t.highest52WeekDate &&
                        (0, r.FD)("em", {
                          children: [
                            "(",
                            (0, B.GP)(
                              (0, w.A)(
                                D()(t.highest52WeekDate),
                                "yyyyMMdd",
                                new Date()
                              ),
                              n.dateFormat
                            ),
                            ")",
                          ],
                        }),
                    ],
                  }),
                  (0, r.Y)("dt", {
                    children: this.props.t(
                      "exchange.orderbookMiniOverview.lowest52WeekPrice"
                    ),
                  }),
                  (0, r.FD)("dd", {
                    className: "down",
                    children: [
                      (0, I.lp)(
                        t.lowest52WeekPrice,
                        e.quoteCurrencyCode,
                        e.baseCurrencyCode
                      ),
                      t.lowest52WeekDate &&
                        (0, r.FD)("em", {
                          children: [
                            "(",
                            (0, B.GP)(
                              (0, w.A)(
                                D()(t.lowest52WeekDate),
                                "yyyyMMdd",
                                new Date()
                              ),
                              n.dateFormat
                            ),
                            ")",
                          ],
                        }),
                    ],
                  }),
                ],
              }),
              (0, r.FD)("dl", {
                className: "mostL",
                children: [
                  (0, r.Y)("dt", {
                    children: this.props.t(
                      "exchange.orderbookMiniOverview.prevClosingPrice"
                    ),
                  }),
                  (0, r.Y)("dd", {
                    children: (0, I.lp)(
                      t.prevClosingPrice,
                      e.quoteCurrencyCode,
                      e.baseCurrencyCode
                    ),
                  }),
                  (0, r.Y)("dt", {
                    children: this.props.t(
                      "exchange.orderbookMiniOverview.highPrice"
                    ),
                  }),
                  (0, r.FD)("dd", {
                    className: o,
                    children: [
                      (0, I.lp)(
                        t.highPrice,
                        e.quoteCurrencyCode,
                        e.baseCurrencyCode
                      ),
                      t.prevClosingPrice
                        ? (0, r.Y)("em", {
                            className: o,
                            children: (0, I.lH)(
                              (t.highPrice - t.prevClosingPrice) /
                                t.prevClosingPrice
                            ),
                          })
                        : null,
                    ],
                  }),
                  (0, r.Y)("dt", {
                    children: this.props.t(
                      "exchange.orderbookMiniOverview.lowPrice"
                    ),
                  }),
                  (0, r.FD)("dd", {
                    className: s,
                    children: [
                      (0, I.lp)(
                        t.lowPrice,
                        e.quoteCurrencyCode,
                        e.baseCurrencyCode
                      ),
                      t.prevClosingPrice
                        ? (0, r.Y)("em", {
                            className: s,
                            children: (0, I.lH)(
                              (t.lowPrice - t.prevClosingPrice) /
                                t.prevClosingPrice
                            ),
                          })
                        : null,
                    ],
                  }),
                ],
              }),
            ],
          });
        }
      }
      const N = (0, P.createSelector)([R.fq, L.G3, E.y], (e, t, a) => ({
        trades: e,
        locale: t,
        estimateBaseCurrency: a,
      }));
      var V = (0, T.Ng)(N, { fetchCrixTradeDays: O.i })((0, x.C)()(F)),
        z = a(67194),
        q = a.n(z),
        H = a(87009),
        _ = a.n(H),
        Y = a(35375),
        j = a(56923);
      class K extends n.PureComponent {
        componentDidMount() {
          this.fetchData();
        }
        componentDidUpdate(e) {
          e.code !== this.props.code && this.fetchData();
        }
        componentWillUnmount() {
          this.props.unsubscribeCrixTrade("orderbook_trade_ticks");
        }
        fetchData() {
          const { code: e } = this.props;
          this.props.fetchCrixTradeTicks(e),
            this.props.subscribeCrixTrade("orderbook_trade_ticks", e);
        }
        render() {
          const {
            master: e,
            trades: t,
            initialPrice: a,
            orderbookType: i,
            fiat: o,
          } = this.props;
          return e
            ? (0, r.Y)("div", {
                className: "overflow",
                children: (0, r.FD)("table", {
                  className: "mostT",
                  children: [
                    (0, r.FD)("colgroup", {
                      children: [
                        (0, r.Y)("col", { width: "50%" }),
                        (0, r.Y)("col", { width: "*" }),
                      ],
                    }),
                    (0, r.Y)("thead", {
                      children: (0, r.FD)("tr", {
                        children: [
                          (0, r.Y)("th", {
                            children: this.props.t(
                              "exchange.orderbookMiniTradeTicks.price"
                            ),
                          }),
                          (0, r.Y)("th", {
                            children:
                              "amount" === i
                                ? this.props.t(
                                    "exchange.orderbookMiniTradeTicks.volume"
                                  )
                                : this.props.t(
                                    "exchange.orderbookMiniTradeTicks.total"
                                  ),
                          }),
                        ],
                      }),
                    }),
                    (0, r.Y)("tbody", {
                      children: q()(_()(t, 9), (t, s) =>
                        (0, r.FD)(
                          n.Fragment,
                          {
                            children: [
                              (0, r.Y)("tr", {
                                children: (0, r.Y)("td", {
                                  colSpan: 2,
                                  className: "num",
                                  children: (0, I.lp)(
                                    t.tradePrice,
                                    e.quoteCurrencyCode,
                                    e.baseCurrencyCode
                                  ),
                                }),
                              }),
                              (0, r.Y)("tr", {
                                children: (0, r.Y)("td", {
                                  colSpan: 2,
                                  className: l()((0, I.LS)(t.askBid)),
                                  children:
                                    "amount" === i
                                      ? (0, I.zX)(t.tradeVolume, o, a)
                                      : (0, I.rn)(
                                          t.tradeVolume * t.tradePrice,
                                          e.quoteCurrencyCode
                                        ),
                                }),
                              }),
                            ],
                          },
                          t.id
                        )
                      ),
                    }),
                  ],
                }),
              })
            : null;
        }
      }
      const W = (0, P.createSelector)([R.VR, j.FD], (e, t) => ({
        trades: e,
        code: t,
      }));
      var G = (0, T.Ng)(W, {
          fetchCrixTradeTicks: O.D,
          subscribeCrixTrade: Y.HC,
          unsubscribeCrixTrade: Y.AR,
        })((0, x.C)()(K)),
        Q = a(45411),
        Z = a(19192),
        J = a(11522),
        X = a(2368),
        $ = a(63701),
        ee = a(17223),
        te = a(76517),
        ae = a(14047),
        re = a(48406),
        ne = a(48400),
        ie = a(20975),
        oe = a(4001),
        le = a(94252),
        se = Object.defineProperty,
        ce = Object.defineProperties,
        de = Object.getOwnPropertyDescriptors,
        ue = Object.getOwnPropertySymbols,
        me = Object.prototype.hasOwnProperty,
        he = Object.prototype.propertyIsEnumerable,
        pe = (e, t, a) =>
          t in e
            ? se(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        ge = (e, t) => {
          for (var a in t || (t = {})) me.call(t, a) && pe(e, a, t[a]);
          if (ue) for (var a of ue(t)) he.call(t, a) && pe(e, a, t[a]);
          return e;
        };
      const Ce = (e) => {
          const t = null == e ? void 0 : e.current;
          t && t.scrollTop((t.getScrollHeight() - t.getClientHeight()) / 2);
        },
        Te = (e) => {
          const {
            master: t,
            unit: a,
            orderbook: r,
            orders: n,
            locale: i,
            orderbookType: o,
          } = e;
          return (0, ie.y)({
            master: t,
            unit: a,
            orderbook: r,
            orders: n,
            locale: i,
            orderbookLength: be(),
            orderbookType: o,
          });
        },
        be = (S.yz.orderbook, () => v.gs),
        fe = (e) => {
          const {
              master: t,
              locale: a,
              orders: i,
              orderbook: o,
              isAuthenticated: l,
              unit: s,
              orderbookType: c,
              initialPrice: u,
              changeQuoteUnit: m,
            } = e,
            {
              totalBidSize: h,
              totalAskSize: p,
              totalAskPrice: g,
              totalBidPrice: T,
            } = o,
            { t: b, i18n: f } = (0, C.B)("exchange"),
            y = d()(i, (e) => "bid" === e.side),
            v = d()(i, (e) => "ask" === e.side),
            S = (0, n.useCallback)(
              (t) => {
                null == t || t.preventDefault(), e.handleClickCancelAllBids();
              },
              [e.handleClickCancelAllBids]
            ),
            k = (0, n.useCallback)(
              (t) => {
                null == t || t.preventDefault(), e.handleClickCancelAllAsks();
              },
              [e.handleClickCancelAllAsks]
            );
          return (0, r.Y)("div", {
            className: "orderContainer__orderTotal",
            children: (0, r.Y)("div", {
              className: "orderTotal",
              children: (0, r.FD)("table", {
                className: "total",
                children: [
                  (0, r.FD)("colgroup", {
                    children: [
                      (0, r.Y)("col", { width: "60" }),
                      (0, r.Y)("col", { width: "100" }),
                      (0, r.Y)("col", { width: "*" }),
                      (0, r.Y)("col", { width: "100" }),
                      (0, r.Y)("col", { width: "60" }),
                    ],
                  }),
                  (0, r.Y)("tbody", {
                    children: (0, r.FD)("tr", {
                      children: [
                        (0, r.Y)("td", {
                          children:
                            l &&
                            (0, $.FD)(t, a) &&
                            (0, r.FD)("a", {
                              href: "#",
                              onClick: k,
                              children: [
                                b("orderbookOrder.cancelAll"),
                                (0, r.Y)("br", {}),
                                "(",
                                v.length,
                                ")",
                              ],
                            }),
                        }),
                        (0, r.Y)("td", {
                          className: "rAlign",
                          children:
                            "amount" === c
                              ? (0, I.zX)(p, a.fiat, u)
                              : (0, I.rn)(g, t.quoteCurrencyCode),
                        }),
                        (0, r.Y)(Z.Ay, {
                          master: t,
                          changeQuoteUnit: m,
                          unit: s,
                          orderbookType: c,
                        }),
                        (0, r.Y)("td", {
                          className: "lAlign",
                          children:
                            "amount" === c
                              ? (0, I.zX)(h, a.fiat, u)
                              : (0, I.rn)(T, t.quoteCurrencyCode),
                        }),
                        (0, r.Y)("td", {
                          className: "last",
                          children:
                            l &&
                            (0, $.FD)(t, a) &&
                            (0, r.FD)("a", {
                              href: "#",
                              onClick: S,
                              children: [
                                b("orderbookOrder.cancelAll"),
                                (0, r.Y)("br", {}),
                                "(",
                                y.length,
                                ")",
                              ],
                            }),
                        }),
                      ],
                    }),
                  }),
                ],
              }),
            }),
          });
        },
        ye = (e) => {
          const { t: t, i18n: a } = (0, C.B)("exchange"),
            {
              code: i,
              master: o,
              unit: c,
              orderbook: d,
              recent: u,
              orders: h,
              isAuthenticated: g,
              locale: T,
              orderbookType: b,
              initialPrice: y,
            } = e,
            { handleOrder: v, popups: S } = (0, te.SC)(),
            k = (0, ae.j)(),
            [P, w] = (0, n.useState)(),
            A = "en" === e.locale.language,
            U = (0, n.useCallback)((e) => {
              null == e || e.preventDefault();
            }, []),
            M = (0, n.useCallback)(
              (t, a) => {
                null == a || a.preventDefault(),
                  e.handleClickCancelMultipleOrders(t);
              },
              [e]
            ),
            D = (0, n.useCallback)(
              (t, a) => {
                null == a || a.preventDefault(), e.handleClickPrice(t);
              },
              [e]
            ),
            x = (0, ae.G)(ne.s1),
            O = (0, n.useCallback)(
              (t, a, r) => {
                var n;
                if ((null == r || r.preventDefault(), !g))
                  return void w({
                    variant: "confirm",
                    closePopup: () => w(void 0),
                    title: "안내",
                    body: "로그인이 필요한 서비스입니다.\n로그인 후 사용해주세요.",
                    onConfirm: () => {
                      k((0, s.VC)(re.w9Z));
                    },
                    confirmBtn: "로그인",
                  });
                const {
                    price: i,
                    standard: l,
                    marketStatus: c,
                    assets: d,
                    orderChance: u,
                    market: m,
                    percentage: h,
                  } = e,
                  C = t ? c.bid.currency : c.ask.currency,
                  T = d[C],
                  b = t ? p()(u.bidFee) : p()(u.askFee),
                  f = (0, X.si)((0, I.jd)(i)),
                  y =
                    0 === l
                      ? (0, le.vL)({
                          ratio: h / 100,
                          fee: b,
                          currency: C,
                          balance:
                            null != (n = null == T ? void 0 : T.balance)
                              ? n
                              : "0",
                          price: a,
                          buySide: t,
                          marketOrder: !1,
                        })
                      : f.div(a).times(1 + b),
                  S = (0, I.yi)(y, o.baseCurrencyCode);
                var P, A;
                v({
                  givenOrderState:
                    ((P = ge({}, x)),
                    (A = {
                      buySide: t,
                      price: a.toString(),
                      volume: S,
                      isWatch: !1,
                      bestOrder: !1,
                      marketOrder: !1,
                    }),
                    ce(P, de(A))),
                });
              },
              [k, v, g, o.baseCurrencyCode, x, e]
            );
          if (!(i && c && o && d)) return null;
          const {
            isFiat: B,
            askSizeMax: E,
            bidSizeMax: R,
            askOrderbookUnits: L,
            bidOrderbookUnits: F,
          } = Te(e);
          return (0, r.FD)(r.FK, {
            children: [
              (0, r.Y)(oe.A, ge({}, S)),
              P && (0, r.Y)(f.A, { payload: P }),
              (0, r.Y)("div", {
                className: "orderContainer__orderPrice",
                children: (0, r.Y)("div", {
                  className: "orderPrice",
                  children: (0, r.FD)("table", {
                    children: [
                      (0, r.FD)("colgroup", {
                        children: [
                          (0, r.Y)("col", { width: "60" }),
                          (0, r.Y)("col", { width: "100" }),
                          (0, r.Y)("col", { width: "*" }),
                          (0, r.Y)("col", { width: "100" }),
                          (0, r.Y)("col", { width: "60" }),
                        ],
                      }),
                      (0, r.FD)("tbody", {
                        children: [
                          m()(be(), (a) => {
                            const n = L[a - be() + L.length],
                              i = `ask-${a}`;
                            if (n) {
                              const s = n.orders,
                                c = !!u && n.price === u.tradePrice,
                                d = u && u.prevClosingPrice,
                                m = d ? (n.price - d) / d : 0;
                              return (0, r.FD)(
                                "tr",
                                {
                                  className: "down",
                                  children: [
                                    s.length > 0
                                      ? (0, r.Y)("td", {
                                          className: l()("grabA", {
                                            usdVisibleAndNonFiat:
                                              "en" === T.language && !B,
                                          }),
                                          onKeyDown: U,
                                          onClick: M.bind(void 0, s),
                                          children: (0, r.FD)("a", {
                                            href: "#",
                                            className: "btn",
                                            children: ["(", s.length, ")"],
                                          }),
                                        })
                                      : (0, r.Y)("td", {
                                          className: l()("grabA", {
                                            usdVisibleAndNonFiat:
                                              "en" === T.language && !B,
                                          }),
                                          onKeyDown: U,
                                          onClick: O.bind(void 0, !1, n.price),
                                          children: (0, r.Y)("a", {
                                            href: "#",
                                            children: t("orderbookOrder.ask"),
                                          }),
                                        }),
                                    (0, r.Y)("td", {
                                      className: l()("bar", {
                                        usdVisibleAndNonFiat:
                                          "en" === T.language && !B,
                                      }),
                                      children: (0, r.FD)("a", {
                                        href: "#",
                                        onClick: D.bind(void 0, n.price),
                                        children: [
                                          (0, r.Y)("div", {
                                            style: {
                                              width:
                                                (100 *
                                                  p()(
                                                    "amount" === b
                                                      ? n.size
                                                      : n.total
                                                  )) /
                                                  E +
                                                "%",
                                            },
                                            children: "-",
                                          }),
                                          (0, r.Y)("p", {
                                            children:
                                              "amount" === b
                                                ? (0, I.zX)(n.size, T.fiat, y)
                                                : 0 === n.total
                                                ? "-"
                                                : (0, I.rn)(
                                                    n.total,
                                                    o.quoteCurrencyCode
                                                  ),
                                          }),
                                        ],
                                      }),
                                    }),
                                    (0, r.Y)("td", {
                                      className: l()({
                                        upB: m > 0,
                                        downB: m < 0,
                                        drawB: 0 === m,
                                        positionR: c,
                                        usdVisibleAndNonFiat:
                                          "en" === T.language && !B,
                                      }),
                                      children: (0, r.FD)("a", {
                                        href: "#",
                                        onClick: D.bind(void 0, n.price),
                                        children: [
                                          (0, r.Y)(ve, {
                                            isFiat: B,
                                            isCurrentPrice: c,
                                            isUsdVisible: A,
                                            master: o,
                                            price: n.price,
                                            dollarBasePrice: e.dollarBasePrice,
                                          }),
                                          (0, r.Y)("div", {
                                            className: "ty02",
                                            children: (0, I.wj)(m),
                                          }),
                                        ],
                                      }),
                                    }),
                                    0 === a
                                      ? (0, r.Y)(V, { master: o, recent: u })
                                      : null,
                                    (0, r.Y)("td", {
                                      className: l()("grabB", {
                                        usdVisibleAndNonFiat:
                                          "en" === T.language && !B,
                                      }),
                                      children: (0, r.Y)("a", {
                                        href: "#",
                                        onClick: O.bind(void 0, !0, n.price),
                                        children: t("orderbookOrder.bid"),
                                      }),
                                    }),
                                  ],
                                },
                                i
                              );
                            }
                            return (0, r.FD)(
                              "tr",
                              {
                                className: "down",
                                children: [
                                  (0, r.Y)("td", {
                                    className: l()("grabA", {
                                      usdVisibleAndNonFiat:
                                        "en" === T.language && !B,
                                    }),
                                    children: (0, r.Y)("a", {
                                      href: "#",
                                      onClick: U,
                                    }),
                                  }),
                                  (0, r.Y)("td", {
                                    className: l()("bar", {
                                      usdVisibleAndNonFiat:
                                        "en" === T.language && !B,
                                    }),
                                    children: (0, r.FD)("a", {
                                      href: "#",
                                      onClick: U,
                                      children: [
                                        (0, r.Y)("div", {
                                          style: { width: "0%" },
                                          children: "-",
                                        }),
                                        (0, r.Y)("p", {}),
                                      ],
                                    }),
                                  }),
                                  (0, r.Y)("td", {
                                    className: l()("downB", {
                                      usdVisibleAndNonFiat:
                                        "en" === T.language && !B,
                                    }),
                                    children: (0, r.FD)("a", {
                                      href: "#",
                                      onClick: U,
                                      children: [
                                        (0, r.Y)("div", {
                                          className: "ty03",
                                          children: (0, r.Y)("strong", {
                                            children: " ",
                                          }),
                                        }),
                                        (0, r.Y)("div", { className: "ty02" }),
                                      ],
                                    }),
                                  }),
                                  0 === a
                                    ? (0, r.Y)(V, { master: o, recent: u })
                                    : null,
                                  (0, r.Y)("td", {
                                    className: l()("grabB", {
                                      usdVisibleAndNonFiat:
                                        "en" === T.language && !B,
                                    }),
                                    children: (0, r.Y)("a", {
                                      href: "#",
                                      onClick: U,
                                    }),
                                  }),
                                ],
                              },
                              i
                            );
                          }),
                          m()(be(), (a) => {
                            const n = F[a],
                              i = `bid-${a}`,
                              s =
                                u &&
                                (u.accBidVolume / u.accAskVolume > 5
                                  ? 5
                                  : u.accBidVolume / u.accAskVolume);
                            if (n) {
                              const c = !!u && n.price === u.tradePrice,
                                d = n.orders,
                                m = u && u.prevClosingPrice,
                                h = m ? (n.price - m) / m : 0;
                              return (0, r.FD)(
                                "tr",
                                {
                                  className: "up",
                                  children: [
                                    (0, r.Y)("td", {
                                      className: l()("grabA", {
                                        usdVisibleAndNonFiat:
                                          "en" === T.language && !B,
                                      }),
                                      children: (0, r.Y)("a", {
                                        href: "#",
                                        onClick: O.bind(void 0, !1, n.price),
                                        children: t("orderbookOrder.ask"),
                                      }),
                                    }),
                                    0 === a
                                      ? (0, r.FD)("td", {
                                          rowSpan: be(),
                                          className: "inner02",
                                          children: [
                                            (0, r.FD)("dl", {
                                              className: "mostL",
                                              children: [
                                                (0, r.Y)("dt", {
                                                  children: t(
                                                    "orderbookOrder.tradeStrength"
                                                  ),
                                                }),
                                                (0, r.Y)("dd", {
                                                  children: s
                                                    ? (0, I.wj)(s)
                                                    : "-",
                                                }),
                                              ],
                                            }),
                                            (0, r.Y)(G, {
                                              master: o,
                                              orderbookType: b,
                                              initialPrice: y,
                                              fiat: T.fiat,
                                            }),
                                          ],
                                        })
                                      : null,
                                    (0, r.Y)("td", {
                                      className: l()({
                                        upB: h > 0,
                                        downB: h < 0,
                                        drawB: 0 === h,
                                        positionR: c,
                                        usdVisibleAndNonFiat:
                                          "en" === T.language && !B,
                                      }),
                                      children: (0, r.FD)("a", {
                                        href: "#",
                                        onClick: D.bind(void 0, n.price),
                                        children: [
                                          (0, r.Y)(ve, {
                                            isFiat: B,
                                            isCurrentPrice: c,
                                            isUsdVisible: A,
                                            master: o,
                                            price: n.price,
                                            dollarBasePrice: e.dollarBasePrice,
                                          }),
                                          (0, r.Y)("div", {
                                            className: "ty02",
                                            children: (0, I.wj)(h),
                                          }),
                                        ],
                                      }),
                                    }),
                                    (0, r.Y)("td", {
                                      className: l()("bar", {
                                        usdVisibleAndNonFiat:
                                          "en" === T.language && !B,
                                      }),
                                      children: (0, r.FD)("a", {
                                        href: "#",
                                        onClick: D.bind(void 0, n.price),
                                        children: [
                                          (0, r.Y)("div", {
                                            style: {
                                              width:
                                                (100 *
                                                  p()(
                                                    "amount" === b
                                                      ? n.size
                                                      : n.total
                                                  )) /
                                                  R +
                                                "%",
                                            },
                                            children: "-",
                                          }),
                                          (0, r.Y)("p", {
                                            children:
                                              "amount" === b
                                                ? (0, I.zX)(n.size, T.fiat, y)
                                                : 0 === n.total
                                                ? "-"
                                                : (0, I.rn)(
                                                    n.total,
                                                    o.quoteCurrencyCode
                                                  ),
                                          }),
                                        ],
                                      }),
                                    }),
                                    d.length > 0
                                      ? (0, r.Y)("td", {
                                          className: l()("grabB", {
                                            usdVisibleAndNonFiat:
                                              "en" === T.language && !B,
                                          }),
                                          onKeyDown: U,
                                          onClick: M.bind(void 0, d),
                                          children: (0, r.FD)("a", {
                                            href: "#",
                                            className: "btn",
                                            children: ["(", d.length, ")"],
                                          }),
                                        })
                                      : (0, r.Y)("td", {
                                          className: l()("grabB", {
                                            usdVisibleAndNonFiat:
                                              "en" === T.language && !B,
                                          }),
                                          onKeyDown: U,
                                          onClick: O.bind(void 0, !0, n.price),
                                          children: (0, r.Y)("a", {
                                            href: "#",
                                            children: t("orderbookOrder.bid"),
                                          }),
                                        }),
                                  ],
                                },
                                i
                              );
                            }
                            return (0, r.FD)(
                              "tr",
                              {
                                className: "up",
                                children: [
                                  (0, r.Y)("td", {
                                    className: l()("grabA", {
                                      usdVisibleAndNonFiat:
                                        "en" === T.language && !B,
                                    }),
                                    children: (0, r.Y)("a", {
                                      href: "#",
                                      onClick: U,
                                    }),
                                  }),
                                  0 === a
                                    ? (0, r.FD)("td", {
                                        rowSpan: be(),
                                        className: "inner02",
                                        children: [
                                          (0, r.FD)("dl", {
                                            className: "mostL",
                                            children: [
                                              (0, r.Y)("dt", {
                                                children: t(
                                                  "orderbookOrder.tradeStrength"
                                                ),
                                              }),
                                              (0, r.Y)("dd", {
                                                children: s
                                                  ? (0, I.wj)(s)
                                                  : "-",
                                              }),
                                            ],
                                          }),
                                          (0, r.Y)(G, {
                                            master: o,
                                            orderbookType: b,
                                            initialPrice: y,
                                            fiat: T.fiat,
                                          }),
                                        ],
                                      })
                                    : null,
                                  (0, r.Y)("td", {
                                    className: l()("downB", {
                                      usdVisibleAndNonFiat:
                                        "en" === T.language && !B,
                                    }),
                                    children: (0, r.FD)("a", {
                                      href: "#",
                                      onClick: U,
                                      children: [
                                        (0, r.Y)("div", {
                                          className: "ty03",
                                          children: (0, r.Y)("strong", {
                                            children: " ",
                                          }),
                                        }),
                                        (0, r.Y)("div", { className: "ty02" }),
                                      ],
                                    }),
                                  }),
                                  (0, r.Y)("td", {
                                    className: l()("bar", {
                                      usdVisibleAndNonFiat:
                                        "en" === T.language && !B,
                                    }),
                                    children: (0, r.FD)("a", {
                                      href: "#",
                                      onClick: U,
                                      children: [
                                        (0, r.Y)("div", {
                                          style: { width: "0%" },
                                          children: "-",
                                        }),
                                        (0, r.Y)("p", {}),
                                      ],
                                    }),
                                  }),
                                  (0, r.Y)("td", {
                                    className: l()("grabB", {
                                      usdVisibleAndNonFiat:
                                        "en" === T.language && !B,
                                    }),
                                    children: (0, r.Y)("a", {
                                      href: "#",
                                      onClick: U,
                                    }),
                                  }),
                                ],
                              },
                              i
                            );
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              }),
            ],
          });
        },
        ve = ({
          isFiat: e,
          isCurrentPrice: t,
          isUsdVisible: a,
          master: n,
          dollarBasePrice: o,
          price: s,
        }) => {
          const c = (0, T.d4)(L.Eb),
            d = (0, J.vE)({ price: s, baseCurrency: c, master: n });
          return (0, r.FD)("div", {
            className: l()({ ty03: e, ty01: !e }),
            css: [
              a &&
                i.AH`
            line-height: 15px;
          `,
            ],
            children: [
              t && (0, r.Y)("span", { className: "selected" }),
              (0, r.Y)("strong", {
                css: [
                  a &&
                    i.AH`
              line-height: 19px;
            `,
                ],
                children: (0, I.lp)(s, n.quoteCurrencyCode, n.baseCurrencyCode),
              }),
              a &&
                (0, r.Y)("em", {
                  css: i.AH`
            line-height: 16px;
            color: #666666;
          `,
                  children: `$${(0, I.Yw)(d / o, 2)}`,
                }),
              !e && (0, r.Y)(k.h, { master: n, price: s, viewType: "EMI" }),
            ],
          });
        };
      var Se = (e) => {
        const t = (0, n.useRef)(),
          { t: a, i18n: i } = (0, C.B)("exchange"),
          { isAdvancedOrderEnabled: o } = (0, ee.A)(),
          {
            code: s,
            master: c,
            standard: d,
            currency: u,
            price: m,
            percentage: h,
            locale: p,
          } = e;
        (0, n.useEffect)(() => {
          Ce(t);
        }, [s]);
        (0, n.useCallback)(
          (e, t, a, r, n) => {
            const i = a || "";
            (0, b.SO)("거래소", "호가", e, t, i, r, s);
          },
          [s]
        );
        return (0, r.FD)("div", {
          className: "orderContainer",
          children: [
            (0, r.Y)(y.w, {}),
            (0, r.FD)("div", {
              className: l()("orderContainer__wrap", { advancedOrder: o }),
              children: [
                (0, r.Y)(Q.A, {
                  master: c,
                  standard: d,
                  currency: u,
                  price: m,
                  percentage: h,
                  handleChangeCurrency: e.handleChangeCurrency,
                  handleChangePrice: e.handleChangePrice,
                  handleChangeStandard: e.handleChangeStandard,
                  handleChangePercentage: e.handleChangePercentage,
                  locale: p,
                }),
                (0, r.Y)(g.default, {
                  ref: t,
                  children: (0, r.Y)(ye, ge({}, e)),
                }),
                (0, r.Y)(fe, ge({}, e)),
              ],
            }),
          ],
        });
      };
    },
    45411: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474),
        i = a(97500),
        o = a.n(i),
        l = a(82645),
        s = a.n(l),
        c = a(62249),
        d = a.n(c),
        u = a(67194),
        m = a.n(u),
        h = a(18402),
        p = a.n(h),
        g = a(19560),
        C = a.n(g),
        T = a(66086),
        b = a.n(T),
        f = a(87168),
        y = a.n(f),
        v = a(52604),
        S = a(16510),
        k = a(98871),
        P = a(83830),
        w = a(92265),
        A = a(19064),
        U = Object.defineProperty,
        M = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? U(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class D extends n.PureComponent {
        constructor(e) {
          super(e),
            M(this, "state", {
              inputDirect: !1,
              marketCurrency: !0,
              movingSlider: !1,
              sliderPercentage: 0,
              inputedDirect: !1,
            }),
            M(this, "sliderDom"),
            M(this, "componentWillUnmount", () => {
              document.removeEventListener("mousemove", this.handleMoveSlider),
                document.removeEventListener(
                  "mouseup mouseleave",
                  this.handleLeaveSlider
                );
            }),
            M(this, "handleChangePrice", (e) => {
              this.setPriceString(e.target.value);
            }),
            M(this, "handleChangeStandard", (e, t) => {
              this.props.handleChangeStandard(e),
                this.props.handleChangeCurrency(
                  this.props.master.quoteCurrencyCode
                ),
                null == t || t.preventDefault();
            }),
            M(this, "handleChangeStandardRadio", (e) => {
              const t = e.target.value;
              this.props.handleChangeStandard(b()(t)),
                this.props.handleChangeCurrency(
                  this.props.master.quoteCurrencyCode
                );
            }),
            M(this, "handleChangeMarketCurrency", (e) => {
              this.setState(
                { marketCurrency: !this.state.marketCurrency },
                () => {
                  const e = this.state.marketCurrency
                    ? this.props.master.quoteCurrencyCode
                    : this.props.locale.fiat;
                  this.props.handleChangeCurrency(e);
                }
              ),
                null == e || e.preventDefault();
            }),
            M(this, "handleChangeInputDirect", (e) => {
              this.setState({ inputDirect: !this.state.inputDirect }),
                this.setState({ inputedDirect: !0 }),
                null == e || e.preventDefault();
            }),
            M(this, "handleClickPercentage", (e, t) => {
              this.props.handleChangePercentage(e),
                this.setState({ inputedDirect: !1 }),
                null == t || t.preventDefault(),
                (0, S.SO)(
                  "거래소",
                  "호가",
                  "호가주문",
                  "설정값입력",
                  `${e}%`,
                  null,
                  this.props.master.code
                );
            }),
            M(this, "handleClickAddPrice", (e, t) => {
              const { quoteCurrencyCode: a } = this.props.master,
                { marketCurrency: r } = this.state,
                n = r ? a : this.props.locale.fiat,
                i = C()(
                  b()(e) + (0, w.Hl)((0, w.Mk)(this.props.price)),
                  (0, A.TN)(n)
                );
              this.setPriceString(i), null == t || t.preventDefault();
            }),
            M(
              this,
              "logPriceEvent",
              s()((e) => {
                (0, S.SO)(
                  "거래소",
                  "호가",
                  "호가주문",
                  "설정값입력",
                  e,
                  null,
                  this.props.master.code
                );
              }, 300)
            ),
            M(this, "setPriceString", (e) => {
              const { master: t } = this.props,
                a = (0, w.BE)(e, t.quoteCurrencyCode, t.baseCurrencyCode);
              this.props.handleChangePrice(a), this.logPriceEvent(a);
            }),
            M(this, "handleStartSlider", (e) => {
              this.setState({ movingSlider: !0 }),
                this.updateSliderPercentage(e);
            }),
            M(this, "handleMoveSlider", (e) => {
              this.state.movingSlider && this.updateSliderPercentage(e);
            }),
            M(this, "handleLeaveSlider", (e) => {
              this.state.movingSlider &&
                (this.updateSliderPercentage(e),
                this.setState({ movingSlider: !1 }));
            }),
            M(this, "updateSliderPercentage", (e) => {
              null == e || e.preventDefault();
              const t = this.getSliderCoordinates(e),
                a = this.calculateSliderPercentage(t),
                r = p()([C()(100 * a), 1]);
              this.props.handleChangePercentage(r),
                r &&
                  (this.setState({ sliderPercentage: r }),
                  this.logSliderEvent(r));
            }),
            M(this, "getSliderCoordinates", (e) => {
              const t = { x: !1, y: !1 },
                a = (e.originalEvent && e.originalEvent.touches) || !1;
              if (a) {
                const e = a[0];
                (t.x = e.pageX), (t.y = e.pageY);
              } else e.clientX && ((t.x = e.clientX), (t.y = e.clientY));
              return t;
            }),
            M(this, "calculateSliderPercentage", (e) => {
              const t = this.sliderDom.current;
              let a = e.x - t.getClientRects()[0].left;
              a < 0 && (a = 0), a > t.clientWidth && (a = t.clientWidth);
              return a / t.clientWidth;
            }),
            M(
              this,
              "logSliderEvent",
              s()((e) => {
                (0, S.SO)(
                  "거래소",
                  "호가",
                  "호가주문",
                  "설정값입력",
                  `${e}%`,
                  null,
                  this.props.master.code
                );
              }, 300)
            ),
            M(this, "renderProgressbar", () => {
              const { sliderPercentage: e } = this.state,
                { percentage: t } = this.props,
                a = e;
              return (0, r.Y)("div", {
                className: "navigation__controlBox",
                children: (0, r.Y)("div", {
                  className: "sort-valueBar sort-valueBar--valueBar",
                  children: (0, r.FD)("div", {
                    className: "valueBar",
                    children: [
                      (0, r.FD)("div", {
                        className: "valueBar__wrapper",
                        ref: this.sliderDom,
                        onTouchStart: this.handleStartSlider,
                        onMouseDown: this.handleStartSlider,
                        onTouchMove: this.handleMoveSlider,
                        onMouseMove: this.handleMoveSlider,
                        onTouchEnd: this.handleLeaveSlider,
                        onMouseUp: this.handleLeaveSlider,
                        onTouchCancel: this.handleLeaveSlider,
                        children: [
                          (0, r.Y)("div", {
                            className: "valueBar__lineBox",
                            children: (0, r.Y)("div", {
                              className: "valueBar__value",
                              style: { width: `${a}%` },
                              children: "-",
                            }),
                          }),
                          (0, r.Y)(k.e, {
                            href: "#",
                            className: "valueBar__scroll",
                            style: { left: `${a}%` },
                            children: (0, r.FD)("div", {
                              className: "valueBar__scroll__tooltip",
                              children: [t, "%"],
                            }),
                          }),
                        ],
                      }),
                      (0, r.Y)("a", {
                        href: "#",
                        className: "valueBar__button",
                        onClick: this.handleChangeInputDirect,
                        children: this.props.t(
                          "exchange.orderbookOrdertab.confirm"
                        ),
                      }),
                    ],
                  }),
                }),
              });
            }),
            M(this, "renderSelectPrice", () => {
              const { quoteCurrencyCode: e, baseCurrencyCode: t } =
                  this.props.master,
                { locale: a, t: n } = this.props,
                { marketCurrency: i } = this.state,
                o = i ? e : a.fiat,
                l = P.zm[o],
                s = n("exchange:orderbookTab.express.units", {
                  returnObjects: !0,
                });
              return (0, r.Y)("div", {
                className: "navigation__controlBox",
                children: (0, r.Y)("div", {
                  className: "sort-valueInput",
                  children: (0, r.FD)("div", {
                    className: "valueInput",
                    children: [
                      (0, r.Y)("div", {
                        className: "valueInput__button",
                        children: m()(l, (e) => {
                          var t;
                          return (0, r.Y)(
                            "a",
                            {
                              href: "#",
                              className: "valueInput__button__link",
                              onClick: this.handleClickAddPrice.bind(
                                this,
                                b()(y()(e))
                              ),
                              children:
                                null != (t = s[d()(e)[0]]) ? t : d()(e)[0],
                            },
                            d()(e)[0]
                          );
                        }),
                      }),
                      (0, r.FD)("div", {
                        className: "valueInput__Input",
                        children: [
                          (0, r.Y)("input", {
                            onChange: this.handleChangePrice,
                            type: "text",
                            className: "valueInput__Input__input",
                            value: (0, w.Hb)(this.props.price, o, t),
                          }),
                          (0, r.Y)("a", {
                            href: "#",
                            className: "valueInput__Input__btn",
                            onClick: this.handleChangeMarketCurrency,
                            children: o,
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              });
            }),
            M(this, "renderSelectPercentage", () => {
              const { percentage: e } = this.props,
                { inputedDirect: t } = this.state;
              return (0, r.Y)("div", {
                className: "navigation__controlBox",
                children: (0, r.Y)("div", {
                  className: "sort-valueBar sort-valueBar--valueButton",
                  children: (0, r.FD)("div", {
                    className: "valueButton valueButton--unit",
                    children: [
                      m()([10, 25, 50, 100], (a) =>
                        (0, r.FD)(
                          "a",
                          {
                            className: o()("valueButton__link", {
                              "valueButton__input--active": !t && e === a,
                            }),
                            href: "#",
                            onClick: this.handleClickPercentage.bind(this, a),
                            children: [a, "%"],
                          },
                          a
                        )
                      ),
                      (0, r.Y)("input", {
                        type: "text",
                        placeholder: this.props.t(
                          "exchange:orderbookTab.express.manual"
                        ),
                        value:
                          t && e
                            ? `${e}`
                            : this.props.t(
                                "exchange:orderbookTab.express.manual"
                              ),
                        readOnly: !0,
                        className: o()("valueButton__input", {
                          "valueButton__input--active": t,
                        }),
                        onClick: this.handleChangeInputDirect,
                      }),
                    ],
                  }),
                }),
              });
            }),
            M(this, "renderFunctionBar", () =>
              1 === this.props.standard
                ? this.renderSelectPrice()
                : 0 === this.props.standard
                ? this.state.inputDirect
                  ? this.renderProgressbar()
                  : this.renderSelectPercentage()
                : void 0
            ),
            (this.sliderDom = n.createRef());
        }
        componentDidMount() {
          this.props.handleChangeCurrency(this.props.master.quoteCurrencyCode),
            this.setState({ sliderPercentage: this.props.percentage }),
            document.addEventListener("mousemove", this.handleMoveSlider),
            document.addEventListener(
              "mouseup mouseleave",
              this.handleLeaveSlider
            );
        }
        componentDidUpdate(e) {
          e.percentage !== this.props.percentage &&
            this.setState({ sliderPercentage: this.props.percentage });
        }
        render() {
          const { standard: e } = this.props;
          return (0, r.FD)("div", {
            className: "orderContainer__navigation",
            children: [
              (0, r.FD)("div", {
                className: "navigation__option",
                children: [
                  (0, r.FD)("div", {
                    className: "sort-radioBox",
                    children: [
                      (0, r.Y)("input", {
                        onChange: this.handleChangeStandardRadio,
                        type: "radio",
                        name: "chk_info01",
                        id: "type01",
                        value: "0",
                        className: "radio",
                        checked: 0 === e,
                      }),
                      (0, r.Y)("label", {
                        htmlFor: "type01",
                        className: "radio__radiolabel",
                        children: this.props.t(
                          "exchange:orderbookTab.express.available"
                        ),
                      }),
                    ],
                  }),
                  (0, r.FD)("div", {
                    className: "sort-radioBox",
                    children: [
                      (0, r.Y)("input", {
                        onChange: this.handleChangeStandardRadio,
                        type: "radio",
                        name: "chk_info01",
                        id: "type02",
                        value: "1",
                        className: "radio",
                        checked: 1 === e,
                      }),
                      (0, r.Y)("label", {
                        htmlFor: "type02",
                        className: "radio__radiolabel",
                        children: this.props.t(
                          "exchange:orderbookTab.express.price"
                        ),
                      }),
                    ],
                  }),
                ],
              }),
              this.renderFunctionBar(),
            ],
          });
        }
      }
      t.A = (0, v.C)()(D);
    },
    48179: function (e, t, a) {
      "use strict";
      a.d(t, {
        M3: function () {
          return y;
        },
        v1: function () {
          return C;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(61895),
        o = a(52604),
        l = a(6448),
        s = a(93258),
        c = a(70042),
        d = a(88900),
        u = a(61293),
        m = a(83830),
        h = a(64178),
        p = a(50310),
        g = a(56177);
      class C extends n.PureComponent {
        componentDidMount() {
          this.props.master &&
            this.props.fetchCrixTradeDays(
              this.props.master.code,
              2,
              void 0,
              this.props.estimateBaseCurrency
            );
        }
        componentDidUpdate(e) {
          this.props.master !== e.master &&
            this.props.master &&
            this.props.fetchCrixTradeDays(
              this.props.master.code,
              2,
              void 0,
              this.props.estimateBaseCurrency
            );
        }
        render() {
          const { master: e, recent: t, locale: a, darkMode: n } = this.props;
          return e && t
            ? (0, r.FD)("td", {
                colSpan: 2,
                rowSpan: m.gs,
                className: "inner01",
                children: [
                  (0, r.Y)(u.A, {
                    accTradePrice24h: t.accTradePrice24h,
                    accTradeVolume24h: t.accTradeVolume24h,
                    quoteCurrencyCode: e.quoteCurrencyCode,
                    baseCurrencyCode: e.baseCurrencyCode,
                    darkMode: n,
                    fiat: a.fiat,
                  }),
                  (0, r.Y)(c.A, {
                    highest52WeekPrice: t.highest52WeekPrice,
                    lowest52WeekPrice: t.lowest52WeekPrice,
                    highest52WeekDate: t.highest52WeekDate,
                    lowest52WeekDate: t.lowest52WeekDate,
                    quoteCurrencyCode: e.quoteCurrencyCode,
                    baseCurrencyCode: e.baseCurrencyCode,
                    dateFormat: a.dateFormat,
                  }),
                  (0, r.Y)(d.A, {
                    prevClosingPrice: t.prevClosingPrice,
                    highPrice: t.highPrice,
                    lowPrice: t.lowPrice,
                    quoteCurrencyCode: e.quoteCurrencyCode,
                    baseCurrencyCode: e.baseCurrencyCode,
                  }),
                  this.props.children,
                ],
              })
            : null;
        }
      }
      const T = (0, i.createSelector)([g.G3, p.y], (e, t) => ({
          locale: e,
          estimateBaseCurrency: t,
        })),
        b = { fetchCrixTradeDays: s.i },
        f = (0, l.Ng)(T, b),
        y = (e) => f(e);
      t.Ay = y((0, h.U)((0, o.C)()(C)));
    },
    19192: function (e, t, a) {
      "use strict";
      a.d(t, {
        M3: function () {
          return k;
        },
        m1: function () {
          return y;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(57960),
        o = a.n(i),
        l = a(67113),
        s = a.n(l),
        c = a(97266),
        d = a.n(c),
        u = a(52604),
        m = a(6448),
        h = a(16510),
        p = a(26029),
        g = a(92265),
        C = a(19064),
        T = Object.defineProperty,
        b = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? T(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      const f = ["Default", "1E-7", "1E-6", "1E-5", "1E-4", "1E-3"];
      class y extends n.PureComponent {
        constructor() {
          super(...arguments),
            b(this, "state", { selectedUnit: this.props.unit }),
            b(this, "handleClickPlus", (e) => {
              const { selectedUnit: t } = this.state;
              if (t !== d()(f)) {
                const e = s()(f, t),
                  a = f[e + 1];
                this.props.changeQuoteUnit(a),
                  this.setState({ selectedUnit: a });
              }
              e.preventDefault();
            }),
            b(this, "handleClickMinus", (e) => {
              const { selectedUnit: t } = this.state;
              if (t !== o()(f)) {
                const e = s()(f, t),
                  a = f[e - 1];
                this.props.changeQuoteUnit(a),
                  this.setState({ selectedUnit: a });
              }
              e.preventDefault();
            }),
            b(this, "toggleOrderbookUnitType", (e) => {
              e.preventDefault();
              const { master: t, orderbookType: a } = this.props,
                r = "amount" === a ? "수량" : "총액";
              (0, h.SO)(
                "거래소",
                "호가",
                "호가",
                "수량/총액_토글",
                r,
                "Order",
                t.code
              ),
                this.props.dispatchOrderbookUnitType(
                  "amount" === a ? "total" : "amount"
                );
            });
        }
        componentDidUpdate(e, t) {
          if (
            this.props.master &&
            e.master &&
            this.props.master.code !== e.master.code
          ) {
            const e = "Default";
            this.props.changeQuoteUnit(e), this.setState({ selectedUnit: e });
          }
        }
        unitText(e) {
          return "Default" === e
            ? this.props.t("exchange.orderbookSummary.none")
            : (0, g.Yw)(e, 8);
        }
        render() {
          const { master: e, orderbookType: t } = this.props,
            { selectedUnit: n } = this.state;
          return this.props.emptyDefault
            ? (0, r.Y)("td", { className: "askPrice" })
            : (0, C.nV)(e.quoteCurrencyCode)
            ? (0, r.FD)("td", {
                className: "askPrice",
                children: [
                  (0, r.Y)("a", {
                    href: "#",
                    className: "minus",
                    title: "-",
                    onClick: this.handleClickMinus,
                    children: "-",
                  }),
                  (0, r.FD)("p", {
                    children: [
                      this.unitText(n),
                      (0, r.Y)("i", {
                        children: this.props.t(
                          "exchange.orderbookSummary.summary"
                        ),
                      }),
                    ],
                  }),
                  (0, r.Y)("a", {
                    href: "#",
                    className: "plus",
                    title: "+",
                    onClick: this.handleClickPlus,
                    children: "+",
                  }),
                ],
              })
            : (0, r.Y)("td", {
                className: "AmountToggle",
                children: (0, r.FD)("a", {
                  href: "#",
                  onClick: this.toggleOrderbookUnitType,
                  children: [
                    (0, r.Y)("b", {
                      children: this.props.t(`exchange.orderbookSummary.${t}`),
                    }),
                    (0, r.FD)("i", {
                      children: [
                        "(",
                        "amount" === t
                          ? e.baseCurrencyCode
                          : e.quoteCurrencyCode,
                        ")",
                      ],
                    }),
                    (0, r.Y)("img", { src: a(96981), alt: "" }),
                  ],
                }),
              });
        }
      }
      const v = { dispatchOrderbookUnitType: p._b },
        S = (0, m.Ng)(null, v),
        k = (e) => S(e);
      t.Ay = k((0, u.C)()(y));
    },
    72157: function (e, t, a) {
      "use strict";
      a.d(t, {
        CB: function () {
          return y;
        },
        M3: function () {
          return w;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(61895),
        o = a(97500),
        l = a.n(o),
        s = a(67194),
        c = a.n(s),
        d = a(87009),
        u = a.n(d),
        m = a(52604),
        h = a(6448),
        p = a(93258),
        g = a(35375),
        C = a(79175),
        T = a(31866),
        b = a(56923),
        f = a(48925);
      class y extends n.Component {
        componentDidUpdate(e) {
          this.props.code !== e.code &&
            (this.props.fetchCrixTradeTicks(this.props.code),
            this.props.subscribeCrixTrade(
              "orderbook_trade_ticks",
              this.props.code
            ));
        }
        componentDidMount() {
          this.props.fetchCrixTradeTicks(this.props.code),
            this.props.subscribeCrixTrade(
              "orderbook_trade_ticks",
              this.props.code
            );
        }
        componentWillUnmount() {
          this.props.unsubscribeCrixTrade("orderbook_trade_ticks");
        }
        shouldComponentUpdate(e) {
          const { initialPrice: t, orderbookType: a } = this.props;
          return e.initialPrice === t || "amount" === e.orderbookType;
        }
        render() {
          const {
            master: e,
            trades: t,
            orderbookType: a,
            fiat: n,
            initialPrice: i,
          } = this.props;
          return e
            ? (0, r.Y)("div", {
                className: "overflow",
                children: (0, r.FD)("table", {
                  children: [
                    (0, r.FD)("colgroup", {
                      children: [
                        (0, r.Y)("col", { width: "50%" }),
                        (0, r.Y)("col", { width: "*" }),
                      ],
                    }),
                    (0, r.Y)("thead", {
                      children: (0, r.FD)("tr", {
                        children: [
                          (0, r.Y)("th", {
                            children: this.props.t(
                              "exchange:orderbookTab.tradeTicks.price"
                            ),
                          }),
                          (0, r.Y)("th", {
                            children:
                              "amount" === a
                                ? this.props.t(
                                    "exchange:orderbookTab.tradeTicks.volume"
                                  )
                                : this.props.t(
                                    "exchange:orderbookTab.tradeTicks.total"
                                  ),
                          }),
                        ],
                      }),
                    }),
                    (0, r.Y)("tbody", {
                      children: c()(u()(t, 30), (e) =>
                        (0, r.Y)(
                          v,
                          {
                            trade: e,
                            isAmount: "amount" === a,
                            fiat: n,
                            initialPrice: i,
                          },
                          e.id
                        )
                      ),
                    }),
                  ],
                }),
              })
            : null;
        }
      }
      const v = n.memo(
          ({ trade: e, isAmount: t, fiat: a, initialPrice: n }) => {
            const i = (0, C.Y)(e, n);
            if (!i) return null;
            const {
              askBidClass: o,
              formattedMiniVolume: s,
              formattedAmount: c,
              formattedPrice: d,
            } = i;
            return (0, r.FD)("tr", {
              children: [
                (0, r.Y)("td", { children: d }),
                (0, r.Y)("td", { className: l()(o), children: t ? s : c }),
              ],
            });
          }
        ),
        S = (0, i.createSelector)([T.VR, b.FD, f.PR], (e, t, a) => ({
          trades: e,
          code: t,
          orderbookType: a,
        })),
        k = {
          fetchCrixTradeTicks: p.D,
          subscribeCrixTrade: g.HC,
          unsubscribeCrixTrade: g.AR,
        },
        P = (0, h.Ng)(S, k),
        w = (e) => P((0, m.C)()(e));
      t.Ay = w(y);
    },
    21529: function (e, t, a) {
      "use strict";
      a.d(t, {
        u: function () {
          return m;
        },
        M3: function () {
          return g;
        },
        Ay: function () {
          return C;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(61895),
        o = a(6448);
      a(16510), Object.defineProperty;
      n.PureComponent;
      var l = a(28358),
        s = a(56177),
        c = a(79150),
        d = Object.defineProperty,
        u = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? d(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class m extends n.Component {
        constructor() {
          super(...arguments),
            u(this, "renderTickers", () =>
              (0, r.Y)(l.Ay, {
                selectedMaster: this.props.master,
                pathname: this.props.pathname,
              })
            );
        }
        render() {
          const { pathname: e, master: t, locale: a } = this.props;
          !!t && t.marketState;
          return (0, r.FD)("section", {
            className: "ty02",
            style: { position: "sticky", top: 72 },
            children: [this.renderTickers(), !1],
          });
        }
      }
      const h = (0, i.createSelector)([c.BQ, s.G3], (e, t) => ({
          isAuthenticated: e,
          locale: t,
        })),
        p = (0, o.Ng)(h, {}),
        g = (e) => p(e);
      var C = g(m);
    },
    89975: function (e, t, a) {
      "use strict";
      a.d(t, {
        yQ: function () {
          return S;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(97500),
        o = a.n(i),
        l = a(97266),
        s = a.n(l),
        c = a(67194),
        d = a.n(c),
        u = a(80462),
        m = a.n(u),
        h = a(13409),
        p = a(6448),
        g = a(93258),
        C = a(35375),
        T = a(8521),
        b = a(79175),
        f = a(71494),
        y = a(31866),
        v = a(9559);
      const S = (e, t) => {
          const a = (0, p.wA)(),
            r = (0, p.d4)(v.iO),
            i = (0, p.d4)(y.Hw)[e],
            o = null == t ? void 0 : t.maxTick;
          (0, n.useEffect)(() => {
            a((0, g.D)(e)), a((0, C.HC)("trade_ticks", e));
          }, [e]),
            (0, n.useEffect)(
              () => () => {
                a((0, C.AR)("trade_ticks"));
              },
              []
            );
          const l = (0, n.useCallback)(
              m()(
                () => {
                  if (r && (!o || i.length < o)) {
                    const t = s()(i);
                    t && a((0, g.D)(e, t.sequentialId));
                  }
                },
                500,
                { trailing: !1 }
              ),
              [o, e, r, i]
            ),
            { t: c } = (0, h.B)("exchange", { keyPrefix: "tradeTicks" });
          return { trades: i, nt: c, handleLoadMore: l };
        },
        k = n.memo(({ trade: e }) => {
          const t = (0, b.f)(e);
          if (!t) return null;
          const {
            askBidClass: a,
            changeClass: n,
            formattedTradeDate: i,
            formattedTradeTime: l,
            formattedPrice: s,
            formattedVolume: c,
            formattedAmount: d,
          } = t;
          return (0, r.FD)(
            "tr",
            {
              className: o()(a),
              children: [
                (0, r.Y)("td", {
                  className: "lAlign",
                  children: (0, r.FD)("p", {
                    children: [i, " ", (0, r.Y)("i", { children: l })],
                  }),
                }),
                (0, r.Y)("td", {
                  children: (0, r.Y)("strong", {
                    className: o()(n),
                    children: s,
                  }),
                }),
                (0, r.Y)("td", { children: c }),
                (0, r.Y)("td", { className: "rAlign", children: d }),
              ],
            },
            e.id
          );
        });
      t.Ay = ({ master: e }) => {
        const t = e.code,
          { trades: a, nt: n, handleLoadMore: i } = S(t, { maxTick: 200 }),
          {
            firstCellIndex: o,
            lastCellIndex: l,
            handleOnScroll: s,
          } = (0, f.E)({
            items: a,
            containerHeight: 360,
            rowHeight: 32,
            scrollTop: 0,
          });
        return (0, r.FD)("div", {
          children: [
            (0, r.FD)("table", {
              className: "ty01",
              children: [
                (0, r.FD)("colgroup", {
                  children: [
                    (0, r.Y)("col", { width: "120" }),
                    (0, r.Y)("col", { width: "280" }),
                    (0, r.Y)("col", { width: "280" }),
                    (0, r.Y)("col", { width: "*" }),
                  ],
                }),
                (0, r.Y)("thead", {
                  children: (0, r.FD)("tr", {
                    children: [
                      (0, r.Y)("th", {
                        className: "lAlign",
                        children: n("createdAt"),
                      }),
                      (0, r.FD)("th", {
                        children: [
                          n("tradePrice"),
                          "(",
                          e.quoteCurrencyCode,
                          ")",
                        ],
                      }),
                      (0, r.FD)("th", {
                        children: [
                          n("tradeVolume"),
                          "(",
                          e.baseCurrencyCode,
                          ")",
                        ],
                      }),
                      (0, r.FD)("th", {
                        className: "rAlign",
                        children: [
                          n("tradeAmount"),
                          "(",
                          e.quoteCurrencyCode,
                          ")",
                        ],
                      }),
                    ],
                  }),
                }),
              ],
            }),
            (0, r.Y)("div", {
              className: "scrollB",
              style: { height: 360 },
              children: (0, r.Y)(T.A, {
                style: { height: 360 },
                loadMore: i,
                onScrollFrame: s,
                children: (0, r.FD)("table", {
                  className: "ty01",
                  children: [
                    (0, r.FD)("colgroup", {
                      children: [
                        (0, r.Y)("col", { width: "120" }),
                        (0, r.Y)("col", { width: "280" }),
                        (0, r.Y)("col", { width: "280" }),
                        (0, r.Y)("col", { width: "*" }),
                      ],
                    }),
                    (0, r.Y)("tbody", {
                      children: d()(a, (e, t) =>
                        (o && o - 4 > t) || l + 4 < t
                          ? (0, r.Y)(
                              "tr",
                              { style: { height: "32px" } },
                              `${e.id}-empty`
                            )
                          : (0, r.Y)(k, { trade: e }, e.id)
                      ),
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      };
    },
    67060: function (e, t, a) {
      "use strict";
      function r(e) {
        return new Promise((t, a) => {
          try {
            t(JSON.parse(e));
          } catch (e) {
            a(e);
          }
        });
      }
      a.d(t, {
        A: function () {
          return r;
        },
      });
    },
    4050: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return F;
        },
      });
      var r = a(66521),
        n = a.n(r),
        i = a(57717),
        o = a.n(i),
        l = a(29250),
        s = a.n(l),
        c = a(67194),
        d = a.n(c),
        u = a(62249),
        m = a.n(u),
        h = a(86019),
        p = a.n(h),
        g = a(69785),
        C = a.n(g),
        T = a(35421),
        b = Object.defineProperty,
        f = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? b(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      const y = C().com.dunamu.crix.front.protobuf,
        {
          DoubleValue: v,
          FloatValue: S,
          Int64Value: k,
          UInt64Value: P,
          Int32Value: w,
          UInt32Value: A,
          BoolValue: U,
          StringValue: M,
          BytesValue: D,
        } = C().google.protobuf,
        x = [v, S, k, P, w, A, U, M, D].filter((e) => null != e);
      class O {
        constructor(e, t, a) {
          f(this, "typeName"),
            f(this, "typeId"),
            f(this, "messageClass"),
            (this.typeName = e),
            (this.typeId = t),
            (this.messageClass = a);
        }
        parse(e) {
          const t = this.messageClass.decode(e);
          let a = this.messageClass.toObject(t, {
            enums: String,
            defaults: !0,
          });
          (a = this.unwrap(a, t)), (a.type = this.typeName);
          for (let e = a.frontModelInfo; e; e = e.frontModelInfo)
            Object.assign(a, e);
          return delete a.frontModelInfo, a;
        }
        unwrap(e, t) {
          const a = typeof e;
          if (
            "string" === a ||
            "boolean" === a ||
            "undefined" === a ||
            "number" === a ||
            null === a
          )
            return e;
          if (n()(e) && n()(t))
            return d()(p()(e, t), ([e, t]) => this.unwrap(e, t));
          if (o()(e) && o()(t)) {
            if (
              (function (e) {
                for (let t = 0; t < x.length; t++)
                  if (e instanceof x[t]) return !0;
                return !1;
              })(t)
            ) {
              const t = e.value;
              return null == t ? null : t;
            }
            return (
              s()(m()(e), (a) => {
                const r = e[a],
                  n = this.unwrap(e[a], t[a]);
                n !== r && (e[a] = n);
              }),
              e
            );
          }
          return e;
        }
      }
      const I = {};
      function B(e) {
        I[e.typeId.toString()] = e;
      }
      function E(e) {
        if (!(e instanceof ArrayBuffer))
          return Promise.reject(new Error("ArrayBuffer expected"));
        const t = new Uint8Array(e),
          a = t[0],
          r = (function (e) {
            return I[e.toString()];
          })(a);
        if (126 === a)
          return Promise.reject(new Error("socket server error response"));
        if (!r)
          return (
            (0, T.s)("999-1-DEBUG-SOCKET-ERROR", {
              message: `Unknown prtbuf frame type id: ${a}`,
              bytes: t,
            }),
            Promise.reject(new Error(`Unknown prtbuf frame type id: ${a}`))
          );
        const n = t.slice(1);
        try {
          const e = r.parse(n);
          return Promise.resolve(e);
        } catch (e) {
          return Promise.reject(e);
        }
      }
      B(new O("forex", 0, y.Forex)),
        B(new O("recentCrix", 1, y.RecentCrix)),
        B(new O("crixTrade", 2, y.CrixTrade)),
        B(new O("crixOrderbook", 3, y.CrixOrderbook)),
        B(new O("crixOrder", 4, y.CrixOrder)),
        B(new O("shortRecentCrix", 5, y.ShortRecentCrix)),
        B(new O("crixEvent", 6, y.CrixEvent)),
        B(new O("baseCandle", 7, y.BaseCandle)),
        B(new O("frontError", 126, y.FrontError)),
        B(new O("pingMessage", 127, y.PingMessage));
      a(57803), a(16511);
      var R = (e, t, a) =>
        new Promise((r, n) => {
          var i = (e) => {
              try {
                l(a.next(e));
              } catch (e) {
                n(e);
              }
            },
            o = (e) => {
              try {
                l(a.throw(e));
              } catch (e) {
                n(e);
              }
            },
            l = (e) =>
              e.done ? r(e.value) : Promise.resolve(e.value).then(i, o);
          l((a = a.apply(e, t)).next());
        });
      function L(e) {
        let t = e[0];
        for (let a = 1; a < 4; a++) (t *= 256), (t += e[a]);
        return t;
      }
      function F(e) {
        return R(this, null, function* () {
          if (!(e instanceof ArrayBuffer))
            return Promise.reject(new Error("ArrayBuffer expected"));
          const t = new Uint8Array(e),
            a = [],
            r = t.length;
          let n = 0;
          for (; n < r; ) {
            const r = L(t.slice(n, n + 4));
            n += 4;
            const i = e.slice(n, r + n);
            a.push(i), (n += r);
          }
          return yield Promise.all(a.map((e) => E(e)));
        });
      }
    },
    83004: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return g;
        },
      });
      var r = a(29250),
        n = a.n(r),
        i = a(66521),
        o = a.n(i),
        l = a(57717),
        s = a.n(l),
        c = a(62249),
        d = a.n(c),
        u = a(67194),
        m = a.n(u),
        h = a(27317);
      function p(e, t) {
        const a = typeof e;
        if (
          "string" === a ||
          "boolean" === a ||
          "undefined" === a ||
          "number" === a ||
          null === a
        )
          return e;
        if (o()(e)) return m()(e, (e) => p(e, t));
        if (s()(e)) {
          const a = {};
          return (
            n()(d()(e), (r) => {
              const n = e[r],
                i = (function (e, t) {
                  return h.CA.common[e] || (t && h.CA[t] && h.CA[t][e]) || e;
                })(r, t),
                o = p(n, t);
              a[i] = o;
            }),
            a
          );
        }
        return e;
      }
      function g(e) {
        let t = null;
        switch (e.ty || e.type) {
          case "crixOrderbook":
            t = "orderbook";
            break;
          case "crixOrder":
            t = "order";
        }
        const a = p(e, t);
        return Promise.resolve(a);
      }
    },
    71106: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return d;
        },
        W: function () {
          return c;
        },
      });
      var r = a(67060),
        n = a(4050),
        i = a(83004),
        o = a(74909),
        l = a(82535),
        s = a(32659);
      const c = 250;
      function d(e, t = !0) {
        let a;
        s.A.isSupported()
          ? ((a = new l.A(e.apiHosts.QUOTATION_WITHOUT_ORDER_WEBSOCKET_URL)),
            a.useFormat("PRTBUF_LIST"),
            a.addDataLoader(n.A))
          : ((a = new s.A(e.apiHosts.QUOTATION_WITHOUT_ORDER_WEBSOCKET_URL)),
            a.addDataLoader(r.A),
            a.useFormat("SIMPLE"),
            a.addDataLoader(i.A));
        return new o.Ay({
          decorated: a,
          realtimeBatch: !!(null == window ? void 0 : window.Worker),
          interval: c,
        });
      }
    },
    15920: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return S;
        },
      });
      var r = a(79474),
        n = a(61895),
        i = a(859),
        o = a.n(i),
        l = a(6448),
        s = a(35375),
        c = a(67060),
        d = a(4050),
        u = a(83004),
        m = a(74909),
        h = a(82535),
        p = a(32659);
      var g = a(71106),
        C = (a(57803), a(33819), a(60027)),
        T = a(56177),
        b = a(982),
        f = a(79150);
      const y = o()("realtime:QuotationSocket"),
        v = (0, n.createSelector)(
          [T.KY, b.F0, b.bb, b.Qw, b.bh, b.eE, b.IR, b.qD, f.BQ, f.sg, b.j6],
          (e, t, a, r, n, i, o, l, s, c, d) => ({
            country: e,
            recentCrixSubscribers: t,
            shortRecentCrixSubscribers: a,
            crixTradeSubscribers: r,
            crixOrderbookSubscribers: n,
            crixOrderSubscribers: i,
            crixEventSubscribers: o,
            baseCandleSubscribers: l,
            isAuthenticated: s,
            tokens: c,
            levels: d,
          })
        );
      var S = ({ disableSharedData: e = !0 }) => {
        const t = (0, l.d4)(T.G3),
          a = (0, r.useRef)(null),
          n = (0, r.useRef)(null),
          i = (0, l.wA)(),
          o = (0, l.d4)(v),
          { isAuthenticated: b } = o,
          f = (0, r.useCallback)((e) => {
            const t = (0, s.BU)(e);
            i(t);
          }, []),
          S = (0, r.useCallback)((e) => {
            const t = (0, s.BU)(e);
            i(t);
          }, []);
        return (
          (0, r.useEffect)(() => {
            if (
              (y("[!] QuotationSocket: disableSharedData", e),
              (0, C.uV)("USE_SHARED_DATA", e ? "false" : "true"),
              null === a.current && (a.current = (0, g.A)(t, e)),
              a.current)
            ) {
              const e = a.current;
              e.addMessageListener(f), e.connect();
            }
            return () => {
              a.current && (a.current.close(), (a.current = null));
            };
          }, [t, e, f]),
          (0, r.useEffect)(() => {
            if (
              (b &&
                null === n.current &&
                (n.current = (function (e) {
                  let t;
                  return (
                    p.A.isSupported()
                      ? ((t = new h.A(
                          e.apiHosts.QUOTATION_ONLY_ORDER_WEBSOCKET_URL
                        )),
                        t.useFormat("PRTBUF_LIST"),
                        t.addDataLoader(d.A))
                      : ((t = new p.A(
                          e.apiHosts.QUOTATION_ONLY_ORDER_WEBSOCKET_URL
                        )),
                        t.addDataLoader(c.A),
                        t.useFormat("SIMPLE"),
                        t.addDataLoader(u.A)),
                    new m.Ay({
                      decorated: t,
                      realtimeBatch: !!(null == window
                        ? void 0
                        : window.Worker),
                      interval: 100,
                    })
                  );
                })(t, e)),
              n.current)
            ) {
              const e = n.current;
              e.addMessageListener(S), e.connect();
            }
            return () => {
              n.current && (n.current.close(), (n.current = null));
            };
          }, [t, e, S, b]),
          (0, r.useEffect)(() => {
            a.current &&
              a.current.subscribeWithProps({
                country: o.country,
                recentCrixSubscribers: o.recentCrixSubscribers,
                shortRecentCrixSubscribers: o.shortRecentCrixSubscribers,
                crixTradeSubscribers: o.crixTradeSubscribers,
                crixOrderbookSubscribers: o.crixOrderbookSubscribers,
                baseCandleSubscribers: o.baseCandleSubscribers,
                crixEventSubscribers: o.crixEventSubscribers,
                tokens: o.tokens,
                isAuthenticated: o.isAuthenticated,
                levels: o.levels,
                subscribeCrixOrder: !1,
              }),
              n.current &&
                n.current.subscribeWithProps({
                  country: o.country,
                  crixOrderSubscribers: o.crixOrderSubscribers,
                  tokens: o.tokens,
                  isAuthenticated: o.isAuthenticated,
                  levels: o.levels,
                  subscribeCrixOrder: !0,
                });
          }, [JSON.stringify(o), t]),
          null
        );
      };
    },
    25018: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return l;
        },
      });
      var r = a(29250),
        n = a.n(r),
        i = Object.defineProperty,
        o = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? i(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class l {
        constructor() {
          o(this, "currentProps", {
            country: "kr",
            recentCrixSubscribers: {},
            shortRecentCrixSubscribers: {},
            crixTradeSubscribers: {},
            crixOrderbookSubscribers: {},
            crixOrderSubscribers: {},
            crixEventSubscribers: {},
            baseCandleSubscribers: {},
            isAuthenticated: !1,
            tokens: null,
            levels: {},
            subscribeCrixOrder: !1,
          }),
            o(this, "cbs", []),
            o(this, "allowedTypeNames", [
              "recentCrix",
              "shortRecentCrix",
              "crixTrade",
              "crixOrderbook",
              "crixOrder",
              "crixEvent",
              "baseCandle",
            ]);
        }
        connect() {
          throw "not implemented";
        }
        close() {
          throw "not implemented";
        }
        isConnecting() {
          throw "not implemented";
        }
        isOpen() {
          throw "not implemented";
        }
        isClosing() {
          throw "not implemented";
        }
        isClosed() {
          throw "not implemented";
        }
        addMessageListener(e) {
          this.cbs.push(e);
        }
        broadcastMessage(e) {
          n()(this.cbs, (t) => {
            try {
              t(e);
            } catch (e) {
              console.error(e);
            }
          });
        }
        subscribeWithProps(e) {
          return this.willSubscribe(e)
            .then(() => ((this.currentProps = e), this.doSubscribe()))
            .then(() => this.didSubscribe());
        }
        willSubscribe(e) {
          return Promise.resolve();
        }
        doSubscribe() {
          throw "not implemented";
        }
        didSubscribe() {
          return Promise.resolve();
        }
      }
    },
    74909: function (e, t, a) {
      "use strict";
      a.d(t, {
        Ay: function () {
          return T;
        },
      });
      var r = a(29250),
        n = a.n(r),
        i = a(62249),
        o = a.n(i),
        l = a(25018),
        s = Object.defineProperty,
        c = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? s(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class d extends l.A {
        constructor(e) {
          super(),
            c(this, "decorated"),
            (this.decorated = e.decorated),
            this.decorated.addMessageListener((e) => this.messageReceived(e));
        }
        connect() {
          return this.decorated.connect();
        }
        close() {
          this.decorated.close();
        }
        isConnecting() {
          return this.decorated.isConnecting();
        }
        isOpen() {
          return this.decorated.isOpen();
        }
        isClosing() {
          return this.decorated.isClosing();
        }
        isClosed() {
          return this.decorated.isClosed();
        }
        doSubscribe() {
          if (!this.currentProps) return Promise.resolve();
          const e = this.mapProps(this.currentProps);
          return e ? this.decorated.subscribeWithProps(e) : Promise.resolve();
        }
        mapProps(e) {
          return e;
        }
        processMessage(e) {
          return e;
        }
        messageReceived(e) {
          this.broadcastMessage(e);
        }
      }
      var u = Object.defineProperty,
        m = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? u(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class h {
        constructor(e, t) {
          m(this, "cb"),
            m(this, "interval"),
            m(this, "isRunning", !1),
            (this.cb = e),
            (this.interval = t),
            this.didInit();
        }
        start() {
          this.isRunning || (this.doStart(), (this.isRunning = !0));
        }
        terminate() {
          this.isRunning && (this.doTerminate(), (this.isRunning = !1));
        }
        didInit() {}
        doStart() {}
        doTerminate() {}
        invoke() {}
      }
      class p extends h {
        constructor() {
          super(...arguments), m(this, "intervalId", null);
        }
        doStart() {
          this.intervalId = setInterval(this.cb, this.interval);
        }
        doTerminate() {
          null !== this.intervalId && clearInterval(this.intervalId),
            (this.intervalId = null);
        }
      }
      const g = class e extends h {
        constructor() {
          super(...arguments), m(this, "worker", null);
        }
        didInit() {
          try {
            this.start();
          } catch (e) {
            throw (console.error(e), e);
          } finally {
            this.terminate();
          }
        }
        doStart() {
          this.worker && this.worker.terminate(),
            (this.worker = new Worker(
              "data:application/javascript," + encodeURIComponent(e.SOURCE_CODE)
            )),
            (this.worker.onmessage = this.cb),
            this.worker.postMessage(this.interval);
        }
        doTerminate() {
          this.worker && (this.worker.terminate(), (this.worker = null));
        }
      };
      m(
        g,
        "SOURCE_CODE",
        "onmessage=function(e){setInterval(function(){postMessage(null)},e.data)}"
      );
      let C = g;
      class T extends d {
        constructor(e) {
          super({ decorated: e.decorated }),
            m(this, "timer"),
            m(this, "buffersByType", {}),
            m(this, "doBatchJob", () => {
              this.ensureConnectivity(), this.flushBuffer();
            });
          const t = this.doBatchJob,
            a = e.interval || 100;
          if (e.timerClass) this.timer = new e.timerClass(t, a);
          else if (e.realtimeBatch)
            try {
              this.timer = new C(t, a);
            } catch (e) {
              console.warn(
                "Realtime batch requested, but worker seems to be not supported. Failing back to interval batch timer"
              ),
                (this.timer = new p(t, a));
            }
          else this.timer = new p(t, a);
        }
        close() {
          super.close(), this.timer.terminate();
        }
        connect() {
          return this.timer.start(), super.connect();
        }
        messageReceived(e) {
          this.storeToBuffer(e);
        }
        storeToBuffer(e) {
          n()(o()(e), (t) => {
            this.buffersByType[t] || (this.buffersByType[t] = []),
              (this.buffersByType[t] = this.buffersByType[t].concat(e[t]));
          });
        }
        ensureConnectivity() {
          this.decorated.isClosed() && this.decorated.connect();
        }
        flushBuffer() {
          if (
            this.allowedTypeNames.some(
              (e) => (this.buffersByType[e] || []).length > 0
            )
          ) {
            const e = {};
            n()(
              this.allowedTypeNames,
              (t) => (e[t] = this.buffersByType[t] || [])
            ),
              this.broadcastMessage(e),
              (this.buffersByType = {});
          }
        }
      }
    },
    82535: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return n;
        },
      });
      var r = a(32659);
      class n extends r.A {
        consumeQueueData() {
          if (this.queueConsumer) return;
          const e = this.dataQueue.shift();
          e &&
            (this.queueConsumer = this.buildDataConsumer(e)
              .then((e) => {
                (this.queueConsumer = null),
                  e.forEach((e) => this.onMessage(e)),
                  this.consumeQueueData();
              })
              .catch((e) => {
                console.error(e),
                  (this.queueConsumer = null),
                  this.consumeQueueData();
              }));
        }
      }
    },
    32659: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return y;
        },
      });
      var r = a(80400),
        n = a.n(r),
        i = a(82874),
        o = a.n(i),
        l = a(51703),
        s = a.n(l),
        c = a(87168),
        d = a.n(c),
        u = a(25018),
        m = a(71666),
        h = a(1366),
        p = Object.defineProperty,
        g = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? p(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      const C = `upbit_web-4.84.3-${(0, m.Ji)()}`;
      class T extends u.A {
        constructor(e) {
          super(),
            g(this, "ws", null),
            g(this, "url"),
            g(this, "dataLoaders", []),
            g(this, "format", null),
            g(this, "dataQueue", new (n())()),
            g(this, "queueConsumer", null),
            g(this, "ticket", C),
            g(this, "intervalId", null),
            (this.url = e);
        }
        useTicket(e) {
          this.ticket = e;
        }
        useFormat(e) {
          this.format = e;
        }
        addDataLoader(e) {
          this.dataLoaders.push(e);
        }
        getWSLike() {
          throw "Not implemented error";
        }
        getTypeName() {
          return "";
        }
        send(e) {
          this.isOpen() && this.ws && this.ws.send(e);
        }
        connect() {
          if (this.isOpen()) return Promise.resolve();
          const e = () => {
            "visible" === document.visibilityState && this.send("PING");
          };
          return new Promise((t, a) => {
            try {
              (this.ws = this.getWSLike()),
                (this.ws.onopen = () => {
                  this.doSubscribe().then(() => t()),
                    this.send("PING"),
                    (this.intervalId = setInterval(() => {
                      this.send("PING");
                    }, 6e4)),
                    document.addEventListener("visibilitychange", e);
                }),
                (this.ws.onmessage = (e) => {
                  (0, h.od)(e.data) || this.handleIncomingData(e.data);
                }),
                (this.ws.onerror = (e) => {
                  a(
                    new Error(
                      `Failed to establish a ${this.getTypeName()} connection`
                    )
                  );
                }),
                (this.ws.onclose = () => {
                  this.onClose(),
                    document.removeEventListener("visibilitychange", e),
                    this.intervalId &&
                      (clearInterval(this.intervalId),
                      (this.intervalId = null));
                });
            } catch (e) {
              a(e);
            }
            this.dataQueue.clear();
          });
        }
        close() {
          this.ws && this.ws.close();
        }
        isConnecting() {
          return !this.ws || 0 === this.ws.readyState;
        }
        isOpen() {
          return !!this.ws && 1 === this.ws.readyState;
        }
        isClosing() {
          return !!this.ws && 2 === this.ws.readyState;
        }
        isClosed() {
          return !!this.ws && 3 === this.ws.readyState;
        }
        doSubscribe() {
          if (!this.isOpen()) return Promise.resolve();
          const {
              country: e,
              recentCrixSubscribers: t,
              shortRecentCrixSubscribers: a,
              crixTradeSubscribers: r,
              crixOrderbookSubscribers: n,
              crixOrderSubscribers: i,
              crixEventSubscribers: l,
              baseCandleSubscribers: c,
              isAuthenticated: u,
              tokens: m,
              levels: h,
              subscribeCrixOrder: p,
            } = this.currentProps,
            g = s()(o()(d()(t))),
            C = s()(o()(d()(a))),
            T = s()(d()(r)),
            b = s()(d()(n)),
            f = (s()(o()(d()(i))), s()(o()(d()(l)))),
            y = s()(o()(d()(c))),
            v = [{ ticket: this.ticket }];
          if (
            (this.format && v.push({ format: this.format }),
            T.length > 0 && v.push({ type: "crixTrade", codes: T }),
            b.length > 0)
          ) {
            const t = {};
            b.forEach((e) => {
              const a = (!!e && h[e]) || "0";
              t[a] || (t[a] = []), t[a].push(e);
            }),
              Object.keys(t).forEach(function (a) {
                const r = t[a];
                "kr" === e
                  ? v.push({ type: "crixOrderbook", codes: r, level: a })
                  : v.push({ type: "crixOrderbook", codes: r });
              });
          }
          return (
            u &&
              m &&
              m.access_key &&
              p &&
              v.push({
                type: "crixOrder",
                codes: ["ALL"],
                accessKey: m.access_key,
              }),
            g.length > 0 && v.push({ type: "recentCrix", codes: g }),
            C.length > 0 && v.push({ type: "shortRecentCrix", codes: C }),
            f.length > 0 && v.push({ type: "crixEvent", codes: f }),
            y.length > 0 && v.push({ type: "baseCandle", codes: y }),
            this.send(JSON.stringify(v)),
            Promise.resolve()
          );
        }
        handleIncomingData(e) {
          this.dataQueue.push(e), this.consumeQueueData();
        }
        consumeQueueData() {
          if (this.queueConsumer) return;
          const e = this.dataQueue.shift();
          e &&
            (this.queueConsumer = this.buildDataConsumer(e)
              .then((e) => {
                (this.queueConsumer = null),
                  this.onMessage(e),
                  this.consumeQueueData();
              })
              .catch((e) => {
                console.error(e),
                  (this.queueConsumer = null),
                  this.consumeQueueData();
              }));
        }
        onMessage(e) {
          const t = e,
            a = t.type;
          if (this.allowedTypeNames.indexOf(a) < 0) return;
          const r = { [a]: [t] };
          this.allowedTypeNames.forEach((e) => {
            r[e] || (r[e] = []);
          }),
            this.broadcastMessage(r);
        }
        onClose() {}
        buildDataConsumer(e) {
          let t = Promise.resolve(e);
          return this.dataLoaders.forEach((e) => (t = t.then(e))), t;
        }
      }
      var b = Object.defineProperty,
        f = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? b(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class y extends T {
        constructor(e, t = {}) {
          super(e),
            f(this, "binaryType"),
            (this.binaryType = t.binaryType || "arraybuffer");
        }
        static isSupported() {
          return !!(
            window &&
            window.WebSocket &&
            window.ArrayBuffer &&
            window.Blob
          );
        }
        getTypeName() {
          return "WebSocket";
        }
        getWSLike() {
          const e = new WebSocket(this.url);
          return (e.binaryType = this.binaryType), e;
        }
      }
    },
    73758: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(52604),
        i = a(49876),
        o = a(9716),
        l = a(92265),
        s = Object.defineProperty,
        c = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? s(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class d extends i.AP {
        constructor() {
          super(...arguments),
            c(this, "formattedValue", (e, t) => {
              if (!(0, o.zT)(t)) return null;
              if ("KRW" === t) {
                const t = (0, l.Tu)(e);
                return t.overThreshold
                  ? (0, r.FD)("em", {
                      children: [
                        t.number,
                        (0, r.Y)("i", {
                          children: this.props.t(
                            "exchange:tickers.estimatePrice.million"
                          ),
                        }),
                      ],
                    })
                  : (0, r.Y)("em", { children: t.number });
              }
              {
                const { prefix: a, number: n } = (0, l.mT)(e);
                return (0, r.FD)("em", {
                  children: [
                    `${n}${null != a ? a : ""} `,
                    (0, r.Y)("i", { children: t }),
                  ],
                });
              }
            });
        }
      }
      t.A = (0, i.M3)((0, n.C)()(d));
    },
    93356: function (e, t, a) {
      "use strict";
      a.d(t, {
        c7: function () {
          return C;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(95915),
        o = a.n(i),
        l = a(13409),
        s = a(6448),
        c = a(77789),
        d = a(61821),
        u = a(63701),
        m = a(48406),
        h = a(98637),
        p = a(79150);
      const g = ({ master: e }) => {
          const t = (0, s.wA)(),
            { i18n: a, t: i } = (0, l.B)("popup"),
            g = (0, s.d4)(p.BQ),
            C = (0, s.d4)(h.j),
            [T, b] = (0, n.useState)(),
            f = (0, n.useCallback)(() => {
              b({
                title: i("favoriteCoinRequireLogin.title"),
                body: i("favoriteCoinRequireLogin.body"),
                confirmBtn: i("favoriteCoinRequireLogin.confirm"),
                needStopPropagation: !0,
                href: m.w9Z,
              });
            }, []),
            y = (0, n.useCallback)((a) => {
              a.stopPropagation(), a.preventDefault();
              const r = (0, u.v3)(e);
              r && t((0, c.jg)([r]));
            }, []),
            v = (0, n.useCallback)((a) => {
              if ((a.stopPropagation(), a.preventDefault(), g)) {
                const a = (0, u.v3)(e);
                a && t((0, c.n9)([a]));
              } else f();
            }, []);
          return (0, r.FD)(r.FK, {
            children: [
              (0, r.Y)(d.A, { payload: T }),
              o()(C, (0, u.v3)(e)) && g
                ? (0, r.Y)("td", {
                    onClick: y,
                    children: (0, r.Y)("span", {
                      className: "bookmark",
                      children: (0, r.Y)("a", {
                        href: "#",
                        className: "on",
                        children: "즐겨찾기",
                      }),
                    }),
                  })
                : (0, r.Y)("td", {
                    onClick: v,
                    children: (0, r.Y)("span", {
                      className: "bookmark",
                      children: (0, r.Y)("a", {
                        href: "#",
                        children: "즐겨찾기",
                      }),
                    }),
                  }),
            ],
          });
        },
        C = n.memo(g);
      t.Ay = g;
    },
    85496: function (e, t, a) {
      "use strict";
      var r = a(65613),
        n = a(79474),
        i = a(61895),
        o = a(97500),
        l = a.n(o),
        s = a(67194),
        c = a.n(s),
        d = a(6690),
        u = a.n(d),
        m = a(57862),
        h = a.n(m),
        p = a(68382),
        g = a.n(p),
        C = a(40485),
        T = a(13409),
        b = a(6448),
        f = a(69202),
        y = a(80460),
        v = a(16510),
        S = a(81714),
        k = a.n(S),
        P = a(29874),
        w = a.n(P),
        A = a(96981),
        U = a.n(A),
        M = a(83763),
        D = a.n(M),
        x = a(83961),
        O = a(60857),
        I = a(31681),
        B = a(63701),
        E = a(80113),
        R = a(92265),
        L = a(91049),
        F = a(9299),
        N = a(43902),
        V = a(22766),
        z = a(48406),
        q = a(59170),
        H = a(50310),
        _ = a(53692),
        Y = a(28424),
        j = a(43190),
        K = a(56177),
        W = a(79150),
        G = a(53685);
      const Q = (e, t, a, r) => {
          const n = a || "";
          let i = "";
          window.location.pathname.includes("exchange")
            ? (i = "거래소")
            : window.location.pathname.includes("balances")
            ? (i = "입출금")
            : window.location.pathname.includes("investments") &&
              (i = "투자내역"),
            (0, v.SO)(i, "코인목록", e, t, n);
        },
        Z = ({ darkMode: e, height: t, t: a }) => {
          const n = e ? k() : U(),
            i = e ? w() : D();
          return (0, r.FD)("div", {
            children: [
              (0, r.FD)("table", {
                className: "highlight",
                children: [
                  (0, r.FD)("colgroup", {
                    children: [
                      (0, r.Y)("col", { width: "105" }),
                      (0, r.Y)("col", { width: "100" }),
                      (0, r.Y)("col", { width: "100" }),
                      (0, r.Y)("col", { width: "*" }),
                    ],
                  }),
                  (0, r.Y)("thead", {
                    children: (0, r.FD)("tr", {
                      children: [
                        (0, r.Y)("th", {
                          children: (0, r.FD)(G.e, {
                            href: "#",
                            children: [
                              a("summary.myBalance.coinName"),
                              " ",
                              (0, r.Y)("img", { src: n, alt: "" }),
                            ],
                          }),
                        }),
                        (0, r.Y)("th", {
                          children: (0, r.FD)(G.e, {
                            href: "#",
                            children: [
                              a("exchange:tickers.balance.estimatedAsset"),
                              " ",
                              (0, r.Y)("img", { src: i, alt: "" }),
                            ],
                          }),
                        }),
                        (0, r.Y)("th", {
                          children: (0, r.FD)(G.e, {
                            href: "#",
                            children: [
                              a("exchange:tickers.balance.avgBuyPrice"),
                              " ",
                              (0, r.Y)("img", { src: i, alt: "" }),
                            ],
                          }),
                        }),
                        (0, r.Y)("th", {
                          children: (0, r.FD)(G.e, {
                            href: "#",
                            children: [
                              a("summary.myBalance.profitRate"),
                              " ",
                              (0, r.Y)("img", { src: i, alt: "" }),
                            ],
                          }),
                        }),
                      ],
                    }),
                  }),
                ],
              }),
              (0, r.Y)("div", {
                className: "scrollB",
                children: (0, r.Y)(C.default, {
                  style: { height: t + 52 },
                  children: (0, r.Y)("div", {
                    className: "emptyText",
                    children: (0, r.FD)("i", {
                      children: [a("exchange:tickers.balance.login"), " "],
                    }),
                  }),
                }),
              }),
            ],
          });
        },
        J = n.memo(
          ({
            asset: e,
            fiat: t,
            handleClickCoin: a,
            isNewListedMarked: n,
            handleClickDelistedCoin: i,
          }) => {
            if (!e.estimatable)
              return (0, r.Y)(X, {
                asset: e,
                fiat: t,
                isNewListedMarked: n,
                handleClickDelistedCoin: i,
              });
            const {
                currency: o,
                unitCurrency: s,
                originalProfit: c,
                formattedBalance: d,
                formattedAvgBuyPrice: u,
                formattedEstimatedAsset: m,
                formattedProfitRate: h,
                formattedProfit: p,
              } = e,
              g = o === s;
            return (0, r.FD)(
              "tr",
              {
                className: l()((0, R.Qo)(c.toNumber())),
                onClick: (e) => a(o, e),
                children: [
                  (0, r.FD)("th", {
                    className: "tit",
                    children: [
                      (0, r.Y)(I.A, { currency: o }),
                      (0, r.Y)("a", {
                        href: "#",
                        children: (0, r.FD)("strong", {
                          children: [
                            o,
                            n(e) &&
                              (0, r.Y)("i", {
                                className: "NewIco",
                                children: "new",
                              }),
                          ],
                        }),
                      }),
                    ],
                  }),
                  (0, r.FD)("td", {
                    className: "price",
                    children: [
                      (0, r.Y)("strong", { className: "black", children: d }),
                      !g &&
                        (0, r.FD)("em", {
                          children: [m, " ", (0, r.Y)("i", { children: s })],
                        }),
                    ],
                  }),
                  (0, r.Y)("td", {
                    className: "price",
                    children: (0, r.FD)("em", {
                      children: [
                        g ? "-" : u,
                        " ",
                        (0, r.Y)("i", { children: s }),
                      ],
                    }),
                  }),
                  (0, r.Y)("td", {
                    className: "rAlign",
                    children: g
                      ? "-"
                      : (0, r.FD)(r.FK, {
                          children: [
                            (0, r.FD)("strong", {
                              className: "PriceRate--Ratio",
                              children: [h, "%"],
                            }),
                            (0, r.Y)("em", {
                              className: "PriceRate--Measure",
                              children: p,
                            }),
                          ],
                        }),
                  }),
                ],
              },
              o
            );
          }
        ),
        X = ({
          asset: e,
          fiat: t,
          isNewListedMarked: a,
          handleClickDelistedCoin: n,
        }) => {
          const { currency: i, formattedBalance: o } = e;
          return (0, r.FD)(
            "tr",
            {
              onClick: n,
              children: [
                (0, r.FD)("th", {
                  className: "tit",
                  children: [
                    (0, r.Y)(I.A, { currency: i }),
                    (0, r.Y)("a", {
                      href: "#",
                      children: (0, r.FD)("strong", {
                        children: [
                          i,
                          a(e) &&
                            (0, r.Y)("i", {
                              className: "NewIco",
                              children: "new",
                            }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, r.Y)("td", {
                  className: "price",
                  children: (0, r.Y)("strong", {
                    className: "black",
                    children: o,
                  }),
                }),
                (0, r.Y)("td", {
                  className: "price",
                  children: (0, r.FD)("em", {
                    children: ["- ", (0, r.Y)("i", { children: t })],
                  }),
                }),
                (0, r.Y)("td", {
                  className: "rAlign",
                  children: (0, r.Y)("em", { children: "-" }),
                }),
              ],
            },
            i
          );
        },
        $ = (0, i.createSelector)([q.nJ], (e) => c()(e, (e) => e.currency)),
        ee = (0, i.createSelector)(
          [_.Sf, W.BQ, q.nJ, K.G3, H.y, Y.ix, $],
          (e, t, a, r, n, i, o) => ({
            masters: e,
            isAuthenticated: t,
            assets: a,
            locale: r,
            estimateCurrency: n,
            currencyMarketInfos: i,
            currencies: o,
          })
        );
      t.Ay = ({ handleClickCoin: e, height: t, searchText: a }) => {
        const {
            masters: i,
            isAuthenticated: o,
            assets: l,
            locale: s,
            estimateCurrency: d,
            currencyMarketInfos: m,
            currencies: p,
          } = (0, b.d4)(ee),
          [v, S] = (0, n.useState)(),
          k = (0, F.qz)(p),
          P = (0, b.d4)(j.bg),
          { t: w } = (0, T.B)(),
          { fiat: A } = s,
          U = (0, b.wA)(),
          [M, D] = (0, n.useState)(1),
          [I, R] = (0, n.useState)(!1),
          q = k || {};
        (0, n.useEffect)(() => {
          o && U((0, y.DO)());
        }, [o]);
        const H = (0, n.useCallback)(
            (e, t) => {
              M === t
                ? (Q("정렬", e), R(!I))
                : (Q("정렬", e), D(t), R(0 === t));
            },
            [M, I]
          ),
          _ = (0, n.useCallback)(
            (t, a) => {
              const r = (0, x.Py)(i, t),
                n = (0, x.KV)(r, A)[0];
              n && (Q("코인선택", null, n.code), e(n, a));
            },
            [i, A, e]
          ),
          Y = (0, n.useCallback)(() => {
            S({
              setPayload: S,
              title: w("summary.myBalance.notice"),
              body: w("summary.myBalance.delistedNotice"),
            });
          }, []),
          K = (0, n.useCallback)((e) => {
            var t, a;
            return (
              e.estimatedAsset.eq(0) &&
              (0, E.zP)(
                null == (a = null == (t = m[e.currency]) ? void 0 : t.master)
                  ? void 0
                  : a.listingDate
              )
            );
          }, []),
          W = (0, n.useMemo)(() => {
            const e = h()(l, (e) => e && e.currency !== s.fiat),
              t = c()(e, (e) => {
                const t = q[e.currency];
                return (0, V.wC)(e, d, t);
              }),
              r = u()(
                t,
                [
                  (e) => (K(e) ? 1 : 0),
                  (e) => {
                    var t;
                    return (0, B.yL)(
                      null == (t = m[e.currency]) ? void 0 : t.master,
                      s
                    )
                      ? 1
                      : 0;
                  },
                  (e) =>
                    ({
                      0: e.currency,
                      1: e.estimatedAsset.toNumber(),
                      2: e.avgBuyPrice.toNumber(),
                      3: e.profitRate.toNumber(),
                    }[g()(M)]),
                ],
                ["desc", "desc", I ? "asc" : "desc"]
              );
            return (0, L.XK)(r, a);
          }, [M, I, s, l, d, q, a]);
        return o
          ? l
            ? (0, r.FD)(r.FK, {
                children: [
                  v && (0, r.Y)(O.Bg, { payload: v }),
                  (0, r.FD)("table", {
                    className: "highlight",
                    children: [
                      (0, r.FD)("colgroup", {
                        children: [
                          (0, r.Y)("col", { width: "100" }),
                          (0, r.Y)("col", { width: "120" }),
                          (0, r.Y)("col", { width: "100" }),
                          (0, r.Y)("col", { width: "*" }),
                        ],
                      }),
                      (0, r.Y)("thead", {
                        children: (0, r.Y)("tr", {
                          children: c()(
                            [
                              w("summary.myBalance.coinName"),
                              w("exchange.tickers.balance.estimatedAsset"),
                              w("exchange:tickers.balance.avgBuyPrice"),
                              w("summary.myBalance.profitRate"),
                            ],
                            (e, t) =>
                              (0, r.Y)(
                                "th",
                                {
                                  children: (0, r.FD)(G.e, {
                                    href: "#",
                                    onClick: () => H(e, t),
                                    children: [
                                      e,
                                      " ",
                                      (0, r.Y)("img", {
                                        src: (0, N.QR)(t, M, I, P),
                                        alt: "",
                                      }),
                                    ],
                                  }),
                                },
                                e
                              )
                          ),
                        }),
                      }),
                    ],
                  }),
                  (0, r.Y)("div", {
                    className: "scrollB",
                    children: (0, r.Y)(C.default, {
                      style: { height: t },
                      children: (0, r.FD)("table", {
                        className: "highlight holdings",
                        children: [
                          (0, r.FD)("colgroup", {
                            children: [
                              (0, r.Y)("col", { width: "100" }),
                              (0, r.Y)("col", { width: "110" }),
                              (0, r.Y)("col", { width: "100" }),
                              (0, r.Y)("col", { width: "*" }),
                            ],
                          }),
                          (0, r.Y)("tbody", {
                            children: c()(W, (e) =>
                              (0, r.Y)(
                                J,
                                {
                                  handleClickCoin: _,
                                  fiat: A,
                                  asset: e,
                                  isNewListedMarked: K,
                                  handleClickDelistedCoin: Y,
                                },
                                e.currency
                              )
                            ),
                          }),
                        ],
                      }),
                    }),
                  }),
                  (0, r.FD)("div", {
                    className: "exB",
                    style: { marginTop: 0 },
                    children: [
                      (0, r.FD)("p", {
                        children: [
                          (0, r.Y)("i", { children: "!" }),
                          w("exchange:tickers.balance.guide"),
                        ],
                      }),
                      (0, r.Y)(f.N_, {
                        to: z.YV4,
                        title: w("summary.myBalance.detail"),
                        children: w("summary.myBalance.detail"),
                      }),
                    ],
                  }),
                ],
              })
            : null
          : (0, r.Y)(Z, { darkMode: P, height: t, t: w });
      };
    },
    69717: function (e, t, a) {
      "use strict";
      a.d(t, {
        gD: function () {
          return d;
        },
        u: function () {
          return c;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(61895),
        o = a(6448),
        l = a(28358),
        s = a(79150);
      class c extends n.Component {
        render() {
          return (0, r.Y)("section", {
            className: "ty02",
            children: (0, r.Y)(l.Ay, {}),
          });
        }
      }
      const d = (0, i.createSelector)([s.BQ], (e) => ({ isAuthenticated: e }));
      t.Ay = (0, o.Ng)(d, {})(c);
    },
    51611: function (e, t, a) {
      "use strict";
      a.d(t, {
        Oj: function () {
          return A;
        },
        Oz: function () {
          return U;
        },
      });
      var r = a(65613),
        n = a(79474),
        i = a(97500),
        o = a.n(i),
        l = a(13409),
        s = a(9716),
        c = a(80232),
        d = a(73758),
        u = a(93356),
        m = a(92265),
        h = a(75568),
        p = a(33037),
        g = a(45966),
        C = Object.defineProperty,
        T = Object.defineProperties,
        b = Object.getOwnPropertyDescriptors,
        f = Object.getOwnPropertySymbols,
        y = Object.prototype.hasOwnProperty,
        v = Object.prototype.propertyIsEnumerable,
        S = (e, t, a) =>
          t in e
            ? C(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        k = (e, t) => {
          for (var a in t || (t = {})) y.call(t, a) && S(e, a, t[a]);
          if (f) for (var a of f(t)) v.call(t, a) && S(e, a, t[a]);
          return e;
        },
        P = (e, t) => T(e, b(t));
      const w = n.memo(
          ({ accTradePrice24h: e, quoteCurrencyCode: t, fiat: a }) => {
            const { t: n } = (0, l.B)("exchange");
            if (t === a) {
              const t = (0, m.Tu)(e);
              return t.overThreshold
                ? (0, r.FD)("p", {
                    children: [
                      t.number,
                      (0, r.Y)("i", { children: n("tickers.item.million") }),
                    ],
                  })
                : (0, r.Y)("p", { children: t.number });
            }
            return (0, r.Y)("p", { children: (0, m.Ym)(e, t) });
          }
        ),
        A = n.memo(
          ({
            formattedPercentageValue: e,
            showChange: t,
            isFiatFormat: a,
            price: n,
            signedChangePrice: i,
            quoteCurrencyCode: o,
            baseCurrencyCode: l,
          }) =>
            (0, r.FD)(r.FK, {
              children: [
                (0, r.Y)("p", { children: e }),
                t &&
                  a &&
                  (0, r.Y)("em", {
                    children: (0, m.hx)({
                      price: n,
                      signedChangePrice: i,
                      quoteCurrencyCode: o,
                      baseCurrencyCode: l,
                    }),
                  }),
              ],
            })
        ),
        U = n.memo(({ recent: e }) =>
          (0, r.Y)("a", {
            href: "#",
            children: (0, r.FD)("div", {
              className: o()((0, p.PA)(e)),
              children: [
                (0, r.Y)("span", {
                  className: "line",
                  style: (0, p.g4)(e),
                  children: "-",
                }),
                (0, r.Y)("span", {
                  className: "box",
                  style: (0, p.nP)(e),
                  children: "-",
                }),
              ],
            }),
          })
        );
      t.Ay = (e) => {
        const {
            showKoreanName: t,
            selectedMasterCode: a,
            fiat: n,
            master: i,
            showChange: C,
            showEstimatedTradeValue: T,
            isFiatFormat: b,
            handleClickCoin: f,
            dollarBasePrice: y,
            currency: v,
            language: S,
          } = e,
          {
            highlight: M,
            isPreparing: D,
            badgeIconProps: x,
            displayRecent: O,
            getSignedChangePrice: I,
            getPrice: B,
          } = (0, h.$)(e),
          {
            quoteCurrencyCode: E,
            baseCurrencyCode: R,
            localName: L,
            englishName: F,
            code: N,
          } = i,
          { t: V } = (0, l.B)(),
          z = (e) => {
            f(i, e);
          },
          q = t ? L : F,
          H = () =>
            (0, r.FD)(r.FK, {
              children: [R, (0, r.FD)("span", { children: ["/", E] })],
            }),
          _ = O();
        if (!(null == _ ? void 0 : _.tradePrice))
          return (0, r.FD)("tr", {
            className: o()({ on: a === N }),
            onClick: z,
            children: [
              (0, r.Y)(u.c7, { master: i }),
              (0, r.Y)("td", {
                className: "cAlign",
                children: (0, r.Y)("a", {
                  href: "#",
                  children: (0, r.FD)("div", {
                    children: [
                      (0, r.Y)("span", { className: "line", children: "-" }),
                      (0, r.Y)("span", { className: "box", children: "-" }),
                    ],
                  }),
                }),
              }),
              (0, r.FD)("td", {
                className: "tit",
                children: [
                  (0, r.Y)("a", {
                    href: "#",
                    children: (0, r.FD)("strong", {
                      children: [
                        q,
                        (0, r.Y)(g.A, P(k({}, x), { isMobile: !1 })),
                      ],
                    }),
                  }),
                  (0, r.Y)("em", { children: H() }),
                ],
              }),
              (0, r.Y)("td", {
                className: "price",
                children: (0, r.Y)("strong", { children: "-" }),
              }),
              (0, r.Y)("td", {
                className: "percent",
                children: (0, r.Y)("p", { children: "-" }),
              }),
              (0, r.Y)("td", {
                className: "rAlign",
                children: (0, r.Y)("p", { children: "0" }),
              }),
            ],
          });
        const Y = B(_),
          j = I(_),
          { accTradePrice24h: K } = _,
          W = (0, m.lH)((0, p.Q$)(_)),
          G = "en" === S;
        return (0, r.FD)("tr", {
          className: o()((0, m.xP)((0, p.KX)(_)), { on: a === N }),
          onClick: z,
          children: [
            (0, r.Y)(u.c7, { master: i }),
            (0, r.Y)("td", {
              className: "cAlign",
              children: (0, r.Y)(U, { recent: _ }),
            }),
            (0, r.FD)("td", {
              className: "tit",
              children: [
                (0, r.Y)("a", {
                  href: "#",
                  children: (0, r.FD)("strong", {
                    children: [q, (0, r.Y)(g.A, P(k({}, x), { isMobile: !1 }))],
                  }),
                }),
                (0, r.Y)("em", { children: H() }),
              ],
            }),
            (0, r.FD)("td", {
              className: "price",
              children: [
                (0, r.FD)("strong", {
                  children: [
                    D && n === E && (0, r.Y)("i", { children: "≈" }),
                    (0, m.lp)(Y, E, R),
                  ],
                }),
                (0, r.Y)(c.h, { master: i, price: Y, viewType: "EMI" }),
                "KRW" === v &&
                  G &&
                  (0, r.FD)("em", { children: ["$", (0, m.Yw)(Y / y, 2)] }),
                (0, r.Y)("span", {
                  className: o()(M, { highlight: null !== M }),
                }),
              ],
            }),
            (0, r.Y)("td", {
              className: "percent",
              children: (0, r.Y)(A, {
                price: Y,
                formattedPercentageValue: W,
                showChange: C,
                isFiatFormat: b,
                signedChangePrice: j,
                quoteCurrencyCode: E,
                baseCurrencyCode: R,
              }),
            }),
            (0, r.Y)("td", {
              className: "rAlign",
              children: D
                ? (0, r.Y)("p", {
                    className: "ready",
                    children: V("balances.coinList.ready"),
                  })
                : (0, r.FD)(r.FK, {
                    children: [
                      (0, r.Y)(w, {
                        accTradePrice24h: K,
                        quoteCurrencyCode: E,
                        fiat: n,
                      }),
                      (0, s.zT)(n) &&
                        !b &&
                        T &&
                        (0, r.Y)(d.A, { master: i, price: K, baseCurrency: n }),
                    ],
                  }),
            }),
          ],
        });
      };
    },
    28358: function (e, t, a) {
      "use strict";
      a.d(t, {
        R7: function () {
          return u;
        },
      });
      var r = a(65613),
        n = a(62205),
        i = a(16790),
        o = a(13409),
        l = a(41638),
        s = a(85496),
        c = a(43902),
        d = a(90802);
      t.Ay = (e) => {
        const {
            currency: t,
            quoteCurrencies: a,
            focusingSearchText: n,
            searchText: i,
            showSettingMenu: m,
            height: h,
            handleClickCoin: p,
            handleCoinFilterChange: g,
            handleSearchTextChange: C,
            handleSearchTextFocus: T,
            handleSearchTextBlur: b,
            handleClickResetSearchText: f,
            handleClickSearchButton: y,
            headerConvertMap: v,
            renderPreviewPopup: S,
            handleClickSettingButton: k,
            handleHideSettingMenu: P,
            isCurrencyTab: w,
            renderSetting: A,
            renderTickersHeader: U,
            renderTickers: M,
            renderRequireAuthPopup: D,
            calcHeight: x,
          } = (0, c.tr)(e),
          { t: O } = (0, o.B)();
        return (0, r.FD)(r.FK, {
          children: [
            S(),
            D(),
            (0, r.FD)("article", {
              children: [
                (0, r.FD)("span", {
                  className: "favoritesOn searchB",
                  children: [
                    (0, r.FD)("div", {
                      className: "search",
                      children: [
                        (0, r.Y)("input", {
                          type: "text",
                          placeholder: n ? "" : O("exchange:tickers.search"),
                          value: i,
                          onChange: C,
                          onFocus: T,
                          onBlur: b,
                        }),
                        i
                          ? (0, r.Y)("a", {
                              href: "#",
                              className: "btnX",
                              onClick: f,
                              children: "X",
                            })
                          : null,
                        (0, r.Y)("a", {
                          href: "#",
                          className: "btn",
                          title: O("summary.tickers.search"),
                          onClick: y,
                          children: O("summary.tickers.search"),
                        }),
                      ],
                    }),
                    (0, r.FD)(l.h, {
                      handleClickClosePopup: P,
                      className: "setting",
                      children: [
                        (0, r.Y)("a", {
                          href: "#",
                          className: "",
                          title: "화면설정",
                          onClick: k,
                          children: "화면설정",
                        }),
                        m ? A() : null,
                      ],
                    }),
                  ],
                }),
                (0, r.FD)("span", {
                  className: "tabB",
                  css: u.tickers,
                  children: [
                    (0, r.Y)(d.A, { currency: t }),
                    t === O("summary.tickers.balance") &&
                      (0, r.Y)(s.Ay, {
                        searchText: i,
                        handleClickCoin: p,
                        height: x() - 52,
                      }),
                    (t === O("summary.tickers.favoriteCoin") || w) &&
                      (0, r.FD)(r.FK, { children: [U(), M()] }),
                  ],
                }),
              ],
            }),
          ],
        });
      };
      const u = {
        tickers: (0, n.AH)({
          tr: {
            "&:hover, &.on": {
              backgroundColor: `${i.default.colors.bg_sg1} !important`,
            },
          },
          "td span.highlight": {
            "&.up": {
              borderColor: `${i.default.colors.market_contents_up} !important`,
            },
            "&.down": {
              borderColor: `${i.default.colors.market_contents_down} !important`,
            },
            "&.same": {
              borderColor: `${i.default.colors.market_even} !important`,
            },
          },
        }),
      };
    },
    55638: function (e, t, a) {
      "use strict";
      a.d(t, {
        z: function () {
          return g;
        },
      });
      var r = a(65613),
        n = a(4633),
        i = a.n(n),
        o = a(48088),
        l = a(34125),
        s = a(94771),
        c = a(36963),
        d = a(16919);
      let u;
      i()(localStorage.getItem("userLanguage"))
        ? ((u =
            "en" === (null == navigator ? void 0 : navigator.language)
              ? "en"
              : "ko"),
          localStorage.setItem("userLanguage", u))
        : (u = localStorage.getItem("userLanguage"));
      const m = {
        exchange: "UPBIT",
        fiat: "KRW",
        language: (0, d.AA)(d.wl.SELECTED_LANGUAGE, u) || "ko",
        dateFormat: "yyyy.MM.dd",
        apiHosts: s.A,
        country: "kr",
      };
      (0, c.s)(m, "ko");
      const h = (0, c.v)(m),
        p = document.getElementById("root"),
        g = (e) => {
          null !== p &&
            o
              .createRoot(p)
              .render(
                (0, r.Y)(e, {
                  store: h,
                  locale: m,
                  history: l.A,
                  gaTrackingCode: "G-06DYP5R5CN",
                  cumaClientId: "6LfuYhEiAAAAAJfLcBQt1O-Y3K6nrJucvxMwzrGx",
                  recaptchaSiteKey: "6Lff-LQiAAAAAOvHSZx3yKrSq0TefrqI44FJ72jC",
                  invisibleRecaptchaSiteKey:
                    "6LcBuhYpAAAAAGjywkclHMzzrL_vRB15jEipx8s9",
                  amplitudeTotalApiKey: "5f3aa052f4cc92657d57c39eba45a896",
                })
              );
        };
      t.A = g;
    },
    94771: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return n;
        },
      });
      var r = {
        KR: "https://api-manager.upbit.com",
        ID: "https://id-api-manager.upbit.com",
        SG: "https://sg-api-manager.upbit.com",
        TH: "https://th-api-manager.upbit.com",
      };
      a(91671);
      var n = {
        NO_HOST: "__NO_HOST__",
        CCX_HOST: "https://ccx.upbit.com",
        CCX_OAUTH_HOST: "https://accounts.upbit.com",
        MANAGER_HOST: r.KR,
        MANAGER_S3_HOST: "https://api-manager-s3.upbit.com",
        CRIX_MASTER: "crix_master",
        CS_HOST: "https://cs-hc.upbit.com",
        STATIC_HOST: "https://static.upbit.com",
        PANDA_HOST: "https://panda.upbitit.cool",
        QUOTATION_MASTER_BASE: "https://crix-static.upbit.com",
        QUOTATION_API_HOST: "https://crix-api-cdn.upbit.com",
        CRIX_TV_API_HOST: "https://crix-api-tv.upbit.com",
        QUOTATION_WEBSOCKET_URL: "wss://crix-ws-web.upbit.com/websocket",
        LISTING_HOST: "https://kr-druid-listing.upbitit.cool/api/kr/listing",
        LISTING_INQUIRY_HOST: "https://ulm.upbit.com",
        NFT_HOST: "https://ccx.upbit.com",
        NFT_RESOURCE_HOST: "https://kr-bookshelf.upbitit.cool",
        STATIC_STAKING_HOST: "https://staking-static.upbit.com",
        ATTRACTION_HOST: "https://attraction.upbit.com",
        QUOTATION_WITHOUT_ORDER_WEBSOCKET_URL:
          "wss://crix-ws-first.upbit.com/websocket",
        QUOTATION_ONLY_ORDER_WEBSOCKET_URL:
          "wss://crix-ws-second.upbit.com/websocket",
        RACCOON_HOST: "https://raccoon.upbit.com/api/v1",
        CMS_NEWS_API_HOST: "https://cms-news-api.upbit.com/api",
        CRIX_DATA_API_HOST: "https://crix-data-api.upbit.com",
      };
    },
    91671: function (e, t, a) {
      "use strict";
    },
    36963: function (e, t, a) {
      "use strict";
      a.d(t, {
        s: function () {
          return T;
        },
        v: function () {
          return b;
        },
      });
      var r = a(89763),
        n = a.n(r),
        i = a(19523),
        o = a(90930),
        l = a(53958),
        s = a(26319),
        c = Object.defineProperty,
        d = Object.defineProperties,
        u = Object.getOwnPropertyDescriptors,
        m = Object.getOwnPropertySymbols,
        h = Object.prototype.hasOwnProperty,
        p = Object.prototype.propertyIsEnumerable,
        g = (e, t, a) =>
          t in e
            ? c(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        C = (e, t) => {
          for (var a in t || (t = {})) h.call(t, a) && g(e, a, t[a]);
          if (m) for (var a of m(t)) p.call(t, a) && g(e, a, t[a]);
          return e;
        };
      const T = (e, t) => {
          (0, i.L)(e, t);
        },
        b = (e, t) => {
          const a = localStorage.getItem("sessions_guid"),
            r = localStorage.getItem("sessions_hash"),
            i = window.__PRELOADED_STATE__ || {},
            c =
              ((m = C({}, i)),
              (h = {
                locale: e,
                sessions: n()({}, l.ue, { guid: a, hash: r }),
              }),
              d(m, u(h)));
          var m, h;
          const p = (0, s.A)(C(C({}, c), t)),
            g = (0, o.z)(p);
          return (
            localStorage.setItem("locale", JSON.stringify(c.locale)),
            window.addEventListener("storage", g),
            p
          );
        };
    },
    94280: function (e, t, a) {
      "use strict";
      a.d(t, {
        A: function () {
          return i;
        },
      });
      var r = a(79474),
        n = a(62552);
      class i extends r.PureComponent {
        render() {
          const { items: e } = this.props;
          if (!e) return null;
          const t = e.map(
            ({ label: e, periodicity: t, interval: a, timeUnit: n }, i) =>
              t
                ? r.createElement(
                    "cq-item",
                    {
                      stxtap: `Layout.setPeriodicity(${t},${a},'${n}')`,
                      key: i,
                    },
                    e
                  )
                : r.createElement("cq-separator", { key: i })
          );
          return r.createElement(
            "cq-menu",
            { class: "ciq-menu ciq-period" },
            r.createElement(
              "span",
              null,
              r.createElement(
                "cq-clickable",
                { stxbind: "Layout.periodicity" },
                "1D"
              )
            ),
            r.createElement("cq-menu-dropdown", null, t)
          );
        }
      }
      i.contextType = n.u;
    },
    67201: function (e, t, a) {
      "use strict";
      a.d(t, {
        lM: function () {
          return Fa;
        },
      });
      var r = a(71597),
        n = (a(97831), a(66086)),
        i = a.n(n),
        o = a(19560),
        l = a.n(o);
      (r.CIQ.I18N.languages = {
        en: "English",
        ar: "عربى",
        fr: "Français",
        de: "Deutsche",
        hu: "Magyar",
        it: "Italiano",
        pt: "Português",
        ru: "русский",
        es: "Español",
        zh: "中文",
        ja: "日本語",
        kr: "한국어",
      }),
        (r.CIQ.I18N.wordLists = {
          en: {
            메로나: "Green",
            "1s": "1s",
            "1 Sec": "1 second",
            "1 Min": "1 minute",
            "3 Min": "3 minutes",
            "5 Min": "5 minutes",
            "10 Min": "10 minutes",
            "15 Min": "15 minutes",
            "30 Min": "30 minutes",
            "1H": "1h",
            "4H": "4h",
            "1 Hour": "1 hour",
            "4 Hour": "4 hours",
            "1D": "D",
            "1 D": "1 day",
            "1W": "W",
            "1 W": "1 week",
            "1M": "M",
            "1 Mo": "1 month",
            "1Y": "1 year",
            "12M": "Y",
          },
          ar: {
            "-DI": "-DI",
            "-VI": "-VI",
            "(Scroll for more options)": "(انتقل لمزيدٍ من الخيارات)",
            "(UTC-01:00) Azores": "(UTC-01: 00) أزوريس",
            "(UTC-01:00) Cape Verde Islands": "(UTC-01: 00) جزر الرأس الأخضر",
            "(UTC-02:00) Mid-Atlantic": "(UTC-02: 00) الأطلسي الأوسط",
            "(UTC-03:00) Buenos Aires": "(UTC-03: 00) بوينس آيرس",
            "(UTC-03:00) Montevideo": "(UTC-03: 00) مونتيفيديو",
            "(UTC-03:00) Punta Arenas": "(UTC-03: 00) بونتا أريناس",
            "(UTC-03:00) Sao Paulo": "(UTC-03: 00) ساو باولو",
            "(UTC-03:30) Newfoundland and Labrador":
              "(UTC-03: 30) نيوفاوندلاند ولابرادور",
            "(UTC-04:00) Asuncion": "(UTC-04: 00) أسونسيون",
            "(UTC-04:00) Atlantic Time (Canada)":
              "(UTC-04: 00) توقيت الأطلسي (كندا)",
            "(UTC-04:00) Caracas": "(UTC-04: 00) كراكاس",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "(UTC-04: 00) جورج تاون، لاباز، ماناوس، سان خوان",
            "(UTC-04:00) Santiago": "(UTC-04: 00) سانتياغو",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "(UTC-05: 00) بوغوتا، ليما، كيتو، ريو برانكو",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "(UTC-05: 00) التوقيت الشرقي (الولايات المتحدة وكندا)",
            "(UTC-05:00) Indiana (East)": "(UTC-05: 00) إإنديانا (شرق)",
            "(UTC-06:00) Central America": "(UTC-06: 00) أمريكا الوسطى",
            "(UTC-06:00) Central Time (US and Canada)":
              "(UTC-06: 00) التوقيت المركزي (الولايات المتحدة وكندا)",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "(UTC-06: 00) غوادالاخارا، مكسيكو سيتي، مونتيري",
            "(UTC-06:00) Saskatchewan": "(UTC-06: 00) ساسكاتشيوان",
            "(UTC-07:00) Arizona": "(UTC-07: 00) أريزونا",
            "(UTC-07:00) Chihuahua, Mazatlan":
              "(UTC-07: 00) تشيهواهوا، مازاتلان",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "(UTC-07: 00) التوقيت الجبلي (الولايات المتحدة وكندا)",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "(UTC-08: 00) توقيت المحيط الهادي (الولايات المتحدة وكندا)",
            "(UTC-08:00) Tijuana": "(UTC-08: 00) تيخوانا",
            "(UTC-09:00) Alaska": "(UTC-09: 00) ألاسكا",
            "(UTC-10:00) Hawaii": "(UTC-10: 00) هاواي",
            "(UTC-11:00) American Samoa, Midway Island":
              "(UTC-11: 00) ساموا الأمريكية، جزيرة ميدواي",
            "(UTC) Casablanca": "(UTC) الدار البيضاء",
            "(UTC) Dublin": "(UTC) دوبلين",
            "(UTC) Lisbon, London": "(UTC) ليزبون، لندن",
            "(UTC) Greenwich Mean Time, Reykjavik":
              "(UTC) توقيت غرينتش، ريكيافيك",
            "(UTC+01:00) Algiers, Tunis": "(UTC + 01: 00) الجزائر، تونس",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "(UTC + 01: 00) أمستردام، برلين، برن، روما، ستوكهولم، فيينا",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "(UTC + 01: 00) بلغراد، براتيسلافا، بودابست، ليوبليانا، براغ",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "(UTC + 01: 00) بروكسل، كوبنهاغن، مدريد، باريس",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "(UTC + 01: 00) سراييفو، سكوبيي، وارسو، زاغرب",
            "(UTC+02:00) Athens, Bucharest": "(UTC + 02: 00) أثينا، بوخارست",
            "(UTC+02:00) Cairo": "(UTC + 02: 00) القاهرة",
            "(UTC+02:00) Cyprus": "(UTC + 02: 00) قبرص",
            "(UTC+02:00) Harare, Johannesburg":
              "(UTC + 02: 00) هراري، جوهانسبرغ",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "(UTC + 02: 00) هلسنكي، كييف، ريغا، صوفيا، تالين، فيلنيوس",
            "(UTC+02:00) Jerusalem": "(UTC + 02: 00) القدس",
            "(UTC+02:00) Kaliningrad": "(UTC + 02: 00) كالينينغراد",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "(UTC + 03: 00) بغداد، الكويت، قطر، الرياض",
            "(UTC+03:00) Istanbul": "(UTC + 03: 00) اسطنبول",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "(UTC + 03: 00) مينسك، موسكو، كيروف، فولغوغراد",
            "(UTC+03:00) Nairobi": "(UTC + 03: 00) نيروبي",
            "(UTC+03:00) Simferopol": "(UTC + 03: 00) سيمفيروبول",
            "(UTC+03:30) Tehran": "(UTC + 03: 30) طهران",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "(UTC + 04: 00) أستراخان، سمارة، ساراتوف، أوليانوفسك",
            "(UTC+04:00) Baku": "(UTC + 04: 00) باكو",
            "(UTC+04:00) Dubai, Muscat": "(UTC + 04: 00) دبي، مسقط",
            "(UTC+04:30) Kabul": "(UTC + 04: 30) كابول",
            "(UTC+05:00) Karachi, Tashkent": "(UTC + 05: 00) كراتشي، طشقند",
            "(UTC+05:00) Yekaterinburg": "(UTC + 05: 00) يكاترينبورغ",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "(UTC + 05: 30) تشيناي، كولكاتا، مومباي، نيودلهي",
            "(UTC+05:45) Kathmandu": "(UTC + 05: 45) كاتماندو",
            "(UTC+06:00) Almaty": "(UTC + 06: 00) ألماتي",
            "(UTC+06:00) Astana, Dhaka": "(UTC + 06: 00) أستانا، داكا",
            "(UTC+06:00) Omsk": "(UTC + 06: 00) أومسك",
            "(UTC+06:30) Yangon": "(UTC + 06: 30) يانغون",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "(UTC + 07: 00) بانكوك، جاكرتا، فيتنام",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "(UTC + 07: 00) بارنول، نوفوسيبيرسك، تومسك",
            "(UTC+07:00) Hovd": "(UTC + 07: 00) هوفد",
            "(UTC+07:00) Krasnoyarsk": "(UTC + 07: 00) كراسنويارسك",
            "(UTC+07:00) Novokuznetsk": "(UTC + 07: 00) نوفوكوزنيتسك",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "(UTC + 08: 00) بكين، تشونغتشينغ، هونغ كونغ",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "(UTC + 08: 00) بروناي، كوالالمبور، سنغافورة",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "(UTC + 08: 00) تشويبالسان، أولانباتار",
            "(UTC+08:00) Irkutsk": "(UTC + 08: 00) إيركوتسك",
            "(UTC+08:00) Manila, Taipei": "(UTC + 08: 00) مانيلا، تايبيه",
            "(UTC+08:00) Perth": "(UTC + 08: 00) بيرث",
            "(UTC+08:45) Eucla": "(UTC + 08: 45) يوكلا",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "(UTC + 09: 00) تشيتا، خانديجا، ياكوتسك",
            "(UTC+09:00) Osaka, Sapporo, Tokyo":
              "(UTC + 09: 00) أوساكا، سابورو، طوكيو",
            "(UTC+09:00) Pyongyang": "(UTC + 09: 00) بيونغ يانغ",
            "(UTC+09:00) Seoul": "(UTC + 09: 00) سيول",
            "(UTC+09:30) Adelaide": "(UTC + 09: 30) أديلايد",
            "(UTC+09:30) Darwin": "(UTC + 09: 30) داروين",
            "(UTC+10:00) Brisbane": "(UTC + 10: 00) بريسبان",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "(UTC + 10: 00) كانبيرا، ملبورن، سيدني",
            "(UTC+10:00) Guam, Port Moresby":
              "(UTC + 10: 00) غوام، بورت مورسبي",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "(UTC + 10: 00) أوست-نيرا، فلاديفوستوك",
            "(UTC+11:00) Magadan": "(UTC + 11: 00) ماغدان",
            "(UTC+11:00) Noumea, Solomon Islands":
              "(UTC + 11: 00) نوميا، جزر سليمان",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "(UTC + 11: 00) ساخالين، سريدنيكوليمسك",
            "(UTC+12:00) Anadyr, Kamchatka": "(UTC + 12: 00) أنادير، كامشاتكا",
            "(UTC+12:00) Auckland, Wellington":
              "(UTC + 12: 00) أوكلاند، ولينغتون",
            "(UTC+12:45) Chatham": "(UTC + 12: 45) شاثام",
            "(UTC+13:00) Samoa": "(UTC + 13: 00) ساموا",
            "(UTC+13:00) Tonga": "(UTC + 13: 00) تونغا",
            "(UTC+14:00) Kiritimati": "(UTC + 14: 00) كيريتيماتي",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "نوع المتوسط المتحرك %D",
            "%D Periods": "فترات %D",
            "%K": "%K",
            "%K Double Smoothing Periods": "فترات التنعيم المزدوجة %K",
            "%K Periods": "فترات %K",
            "%K Smoothing Periods": "فترات التنعيم %K",
            "+DI": "+DI",
            "+VI": "+VI",
            "1 D": "1ي",
            "1 Hour": "1 ساعة",
            "1 Min": "1د",
            "1 Mo": "1ش",
            "1 Standard Deviation (1σ)": "1 الانحراف المعياري (1σ)",
            "1 W": "أ1",
            "10 Min": "10د",
            "10m": "10د",
            "13px": "13px",
            "15 Min": "15د",
            "15m": "15د",
            "1D": "1يوم",
            "1H": "1ساعة",
            "1m": "1د",
            "1M": "1شهر",
            "1W": "أ1",
            "1Y": "1عام",
            "2 Standard Deviation (1σ)": "2 الانحراف المعياري (1σ)",
            "2 Standard Deviation (2σ)": "2 الانحراف المعياري (1σ)",
            "3 Standard Deviation (1σ)": "3 الانحراف المعياري (1σ)",
            "3 Standard Deviation (3σ)": "3 الانحراف المعياري (1σ)",
            "30 Min": "30د",
            "30m": "30د",
            "3M": "3أشهر",
            "4 Hour": "4 ساعة",
            "4H": "4ساعة",
            "5 Min": "5د",
            "5D": "5أيام",
            "5m": "5د",
            "5Y": "5أعوام",
            "6M": "6أشهر",
            Abstract: "الملخص",
            "Acc Swing": "مؤشر التأرجح التراكمي",
            "Accumulation/Distribution": "مؤشر التوزيع المتراكم",
            "Accumulative Swing Index": "مؤشر التأرجح التراكمي",
            Add: "إضافة",
            ADD: "أضف",
            "Add Stop Loss": "أضف وقف الخسارة",
            "Add Take Profit": "الحصول على الربح",
            ADX: "ADX",
            "ADX/DMS": "ADX/DMS",
            ALL: "الكل",
            "All-Time High Lookback Period": "مراجعة كل أوقات الفترة الماضية",
            Alligator: "مؤشر التمساح",
            Annotation: "تعليق توضيحي",
            Arc: "قوس",
            Aroon: "مؤشر أرون",
            "Aroon Down": "مؤشر أرون الهابط",
            "Aroon Osc": "مذبذب أرون",
            "Aroon Oscillator": "مذبذب أرون",
            "Aroon Up": "مؤشر أرون الصاعد",
            Arrow: "السهم",
            "ATH Lookback Period": "فترة ATH حلقية",
            ATR: "ATR",
            "ATR Bands": "حدود متوسط المدى الحقيقي",
            "ATR Bands Bottom": "أسفل حدود متوسط المدى الحقيقي",
            "ATR Bands Channel": "حدود متوسط المدى الحقيقي",
            "ATR Bands Top": "أعلى حدود متوسط المدى الحقيقي",
            "ATR Trailing Stop": "التوقف المتحرك لمتوسط المدى الحقيقي",
            "ATR Trailing Stops": "التوقفات المتحركة لمتوسط المدى الحقيقي",
            "Auto Select": "اختيار تلقائي",
            Average: "المتوسط",
            "Average Line": "خط المتوسط",
            "Average True Range": "متوسط المدى الحقيقي",
            "Average Type": "نوع المتوسط",
            Awesome: "رائع",
            "Awesome Oscillator": "المتذبذب الرائع",
            "Axis Label": "تسمية المحور",
            "Axis Label:": "اسم المحور:",
            "Axis Text": "نص المحور",
            B: "سميك",
            Background: "الخلفية",
            "Background Color": "لون الخلفية",
            "Balance of Power": "توازن القوى",
            Bandwidth: "عرض نطاق",
            Bar: "الأعمدة",
            Bars: "أعمدة",
            "Bars Color": "لون الأشرطة",
            "Base Line": "الخط الأساسي",
            "Base Line Period": "فترة الخط الأساسي",
            Baseline: "خط الأساس",
            "Baseline Delta": "التغيير من خط الأساس",
            "BATS BZX real-time.": ".في الوقت الحقيقي BATS BZX",
            Bearish: "هبوطي",
            Beta: "تجريبي",
            "Beta Callouts Candle Border": "حدود شمعة Beta Callouts",
            Black: "أسود",
            "Boll %b": "بولنجر %b",
            "Boll BW": "عرض نطاق بولنجر",
            "Bollinger %b": "بولنجر %b",
            "Bollinger Bands": "حدود بولنجر",
            "Bollinger Bands Bottom": "أسفل حدود بولنجر",
            "Bollinger Bands Median": "متوسط حدود بولنجر",
            "Bollinger Bands Top": "أعلى حدود بولنجر",
            "Bollinger Bandwidth": "مؤشر عرض حدود بولنجر",
            Border: "الحدود",
            "Bulge Threshold": "عتبة الارتفاع المفاجئ",
            Bullish: "صعودي",
            "Buy Stops": "أوامر توقف الشراء",
            "by Xignite.": "Xignite بواسطة",
            Callout: "طلب",
            Callouts: "وسائل الشرح",
            cancel: "إلغاء",
            Candle: "الشموع",
            "Candle Border": "حد الشمعة",
            "Candle Borders": "حدود الشمعة",
            "Candle Color": "لون الشمعة",
            "Candle Wick": "فتيل الشمعة",
            Candles: "شموع",
            "Center Of Gravity": "مؤشر مركز الجاذبية",
            "Chaikin MF": "مؤشر سيولة تشايكن",
            "Chaikin Money Flow": "مؤشر سيولة تشايكن",
            "Chaikin Vol": "مؤشر التقلب تشايكن",
            "Chaikin Volatility": "مؤشر التقلب تشايكن",
            "Chande Fcst": "تنبؤ شاندي",
            "Chande Forecast Oscillator": "مذبذب تنبؤ شاندي",
            "Chande Momentum Oscillator": "مذبذب زخم شاندي",
            "Chande Mtm": "زخم شاندي",
            "Change Timezone": "تغيير المنطقة الزمنية",
            Channel: "قناة",
            "Channel Fill": "تعبئة القناة",
            Chart: "الرسم البياني",
            "Chart Preferences": "تفضيلات الرسم البياني",
            "Chart Scale": "مقياس الرسم البياني",
            "Chart Shared Successfully!": "تم مشاركة الرسم البياني بنجاح!",
            "Chart Style": "أسلوب الرسم البياني",
            "Chart Type": "نوع الرسم البياني",
            Check: "شيك",
            "Choose language": "اختر اللغة",
            "Choose Timezone": "اختر منطقة زمنية",
            "Choppiness Index": "مؤشر الاضطراب",
            Clear: "مسح",
            "Clear All": "مسح الكل",
            "Clear Drawings": "مسح الرسومات",
            Close: "إغلاق",
            close: "إغلاق",
            Color: "اللون",
            "Colored Bar": "الأعمدة الملونة",
            "Colored Line": "الخطوط الملونة",
            COMMODITIES: "السلع",
            "Commodity Channel Index": "مؤشر قناة السلع",
            Compare: "مقارنة",
            "Comparison Symbol": "رمز المقارنة",
            Composite: "مركب",
            "Composite RSI": "مؤشر القوة النسبية المُرّكب",
            Continuous: "متصل",
            "Conversion Line": "خط التحويل",
            "Conversion Line Period": "فترة خط التحويل",
            Coppock: "كوبوك",
            "Coppock Curve": "منحنى كوبوك",
            Correl: "الارتباط",
            Correlation: "ترابط",
            "Correlation Coefficient": "معامل الارتباط",
            Courier: "Courier",
            Create: "إنشاء",
            "Create a New Custom Theme": "إنشاء نسق جديد",
            "Create Custom Theme": "إنشاء مظهر مخصص",
            "Create Image": "إنشاء صورة",
            Cross: "الصليب",
            Crosshair: "التقاطع",
            Crosshairs: "علامات",
            Crossline: "خط التقاطع",
            CURRENCIES: "العملات",
            "Current Studies": "الدراسات الحالية",
            "Current Symbols": "الرموز الحالية",
            "Current TimeZone is": "الفترة الزمنية الحالية",
            "Custom Themes": "أنساق مخصصة",
            "Cycle 1": "الدورة 1",
            "Cycle 2": "الدورة 2",
            "Cycle 3": "الدورة 3",
            D: "ي",
            daily: "اليومي",
            Darvas: "دارفاس",
            "Darvas Box": "صندوق دارفاس",
            "Data delayed 15 min.": ".جميع البيانات متأخرة 15 دقيقة",
            "Data is randomized.": ".البيانات غير العشوائية",
            "Data is real-time.": ".البيانات هو الوقت الحقيقي",
            "Date Dividers": "فواصل التاريخ",
            "Date/Time": "التاريخ/الوقت",
            "Date/Time:": "التاريخ/الوقت:",
            Day: "نهاري",
            "Days Per Year": "يوم في السنة",
            "Decreasing Bar": "شريط الهبوط",
            Default: "افتراضي",
            "Default Themes": "الأنساق الافتراضية",
            Delete: "مسح",
            "Delete Study": "حذف الدراسة",
            "Demo data.": ".البيانات تجريبي",
            Detrended: "بدون اتجاه",
            "Detrended Price Oscillator": "مذبذب السعر بدون اتجاه",
            Directional: "اتجاهي",
            "Disparity Index": "مؤشر التفاوت",
            Display: "عرض",
            "Display 1 Standard Deviation (1σ)": "عرض 1 الانحراف المعياري (1σ)",
            "Display 2 Standard Deviation (2σ)": "عرض 2 الانحراف المعياري (2σ)",
            "Display 3 Standard Deviation (3σ)": "عرض 3 الانحراف المعياري (3σ)",
            "Display Average": "عرض المتوسط",
            "Distance(%)": "مسافة (%)",
            Divergence: "الانحراف",
            "Don't see your study below? Type in your search here.":
              "ألا ترى دراستك أدناه؟ اطبع البحث الخاص بك هنا.",
            "Donchian Channel": "قناة دونكان",
            "Donchian High": "دونكان مرتفع",
            "Donchian Low": "دونكان منخفض",
            "Donchian Median": "دونكان متوسط",
            "Donchian Width": "عرض دونكان",
            Done: "تم",
            Doodle: "شكل حر",
            "Double Exponential": "الآسي المضاعف",
            "Double Smoothing Period": "فترات التنعيم المزدوجة %K",
            "Down Volume": "حجم هابط",
            Downtrend: "إتجاه منخفض",
            Draw: "رسم",
            "Ease of Movement": "مؤشر سهولة الحركة",
            Edit: "تعديل",
            "Edit Settings...": "تحرير الإعدادات...",
            EF: "EF",
            "EF Trigger": "محرك عامل تصفية الأحداث",
            "Ehler Fisher": "إيلر فيشر",
            "Ehler Fisher Transform": "مؤشر تحويل إيلر فيشر",
            "Elder Bear Power": "مؤشر القوة الهابطة الأكبر",
            "Elder Bull Power": "مؤشر القوة الصاعدة الأكبر",
            "Elder Force": "مؤشر القوة الأكبر",
            "Elder Force Index": "مؤشر القوة الأكبر",
            "Elder Impulse System": "نظام الدفاع الأكبر",
            "Elder Ray Index": "مؤشر الشعاع الأكبر",
            Ellipse: "قطع ناقص",
            ema: "ema",
            "End of day data.": ".البيانات من نهاية اليوم",
            'Enter box size and hit "Enter"':
              'ادخل حجم المربع واضغط على ""إدخال""',
            "Enter name of view:": "ادخل اسم العرض:",
            'Enter reversal and hit "Enter"': 'ادخل انعكاس واضغط على ""إدخال""',
            "Enter Symbol": "أدخل رمزًا",
            'Enter value and hit "Enter"': 'ادخل القيمة واضغط على ""إدخال""',
            Events: "أحداث",
            "Exit Field": "حقل الخروج",
            Exponential: "الآسي",
            "Extended Hours": "الساعات الممتدة",
            Fade: "متلاشي",
            Fake: "مزيف",
            Fan: "معجب",
            Fast: "سريع",
            "Fast MA Period": "فترة المتوسط المتحرك السريع",
            "Fib Arc": "أقواس فيبوناتشي",
            "Fib Fan": "مراوح فيبوناتشي",
            "Fib Time Zone": "منطقة فيبوناتشي الزمنية",
            Fibonacci: "فيبوناتشي",
            fibonacci: "فيبوناتشي",
            Field: "المجال",
            field: "حقل",
            Fill: "التعبئة",
            "Focus Arrow": "سهم التركيز",
            Forecast: "التنبؤ",
            FOREX: "فوركس",
            "Formula courtesy": "صيغة بفضل",
            "Fractal Channel": "قناة كسيرية",
            "Fractal Chaos": "فوضة كسيرية",
            "Fractal Chaos Bands": "مؤشر حدود الفوضى الكسيرية",
            "Fractal Chaos Oscillator": "مذبذب الفوضى الكسيرية",
            "Fractal High": "كسيرية مرتفعة",
            "Fractal Low": "كسيرية منخفضة",
            FUNDS: "الأموال",
            FUTURES: "العقود المستقبلية",
            FX: "الفوركس",
            Gain: "ربح",
            "Gann Fan": "مراوح جان",
            Garamond: "Garamond",
            Gartley: "غارتلي",
            Gator: "التمساح الأمريكي",
            "Gator Oscillator": "مذبذب التمساح",
            "Generating Image": "إنشاء صورة",
            Ghost: "شبح",
            "Ghost Boxes": "صناديق الشبح",
            Gopala: "جوبال كريشنان",
            "Gopalakrishnan Range Index": "مؤشر نطاق جوبال كريشنان",
            Gradient: "المنحدر",
            Green: "أخضر",
            "Grid Lines": "خطوط الشبكة",
            H: "س",
            harmonic: "توافقي",
            Heart: "القلب",
            "Heaviest Rate of Change Period": "أثقل فترة لنسبة التغير",
            "Heaviest SMA Period": "أثقل فترة إس إم أيه",
            "Heavy Rate of Change Period": "أثقل فترة لنسبة التغير",
            "Heavy SMA Period": "أثقل فترة إس إم أيه",
            "Heikin Ashi": "Heikin Ashi",
            "Heikin-Ashi": "Heikin-Ashi ( شموع الهيكن اشي)",
            Helvetica: "Helvetica",
            "HHV/LLV Lookback": "HHV/LLV مراجعة",
            High: "قمة",
            "High Low": "مرتفع منخفض",
            "High Low Bands": "مؤشر الحدود المرتفعة المنخفضة",
            "High Low Bottom": "مرتفع منخفض سفلي",
            "High Low Median": "مرتفع منخفض متوسط",
            "High Low Top": "مرتفع منخفض علوي",
            "High Minus Low": "مؤشر قياس معدل ارتفاع السلبية",
            "High Period": "الفترة العليا",
            "High-Low": "مرتفع منخفض",
            "high/low": "قمة/قاع",
            "Highest High Value": "مؤشر أعلى قيمة",
            HighLow: "مرتفع منخفض",
            "Hist Vol": "مؤشر التقلب التاريخي",
            Histogram: "الهيستوجرام",
            "Historical Volatility": "مؤشر التقلب التاريخي",
            "Hollow Candle": "الشموع المفرغة",
            Horizontal: "أفقي",
            Hull: "الهيكل",
            I: "مائل",
            "Ichimoku Clouds": "غيمة الإيتشيموكو",
            "Increasing Bar": "شريط الصعود",
            Index: "المؤشر",
            INDEXES: "المؤشرات",
            INDICES: "المؤشرات",
            Info: "معلومات",
            Intercept: "الاعتراض",
            Interval: "فاصل زمني",
            "Intraday Momentum Index": "مؤشر الزخم الداخلي اليومي",
            "Intraday Mtm": "الزخم الداخلي اليومي",
            Jaw: "الفك",
            "Jaw Offset": "تعويض فك التمساح",
            "Jaw Period": "فترة فك التمساح",
            Kagi: "Kagi ( كاجي)",
            Keltner: "كيلتنر",
            "Keltner Bottom": "كيلتنر سفلي",
            "Keltner Channel": "مؤشر قناة كيلتنر",
            "Keltner Median": "كيلتنر متوسط",
            "Keltner Top": "كيلتنر علوي",
            Klinger: "كلنجر",
            "Klinger Volume Oscillator": "مذبذب حجم كلنجر",
            KlingerSignal: "إشارات تداول كلنجر",
            KST: "KST",
            KSTSignal: "KST إشارة",
            "Lagging Span": "دورة أسوأ أداء",
            "Lagging Span Period": "فترة دورة أسوأ أداء",
            "Leading Span A": "الدورة أ الرائدة",
            "Leading Span B": "الدورة ب الرائدة",
            "Leading Span B Period": "فترة الدورة ب الرائدة",
            "Level Offset": "مستوى التوازن",
            Levels: "مستويات",
            "Light Rate of Change Period": "أخف فترة لنسبة التغير",
            "Light SMA Period": "أخف فترة إس إم أيه",
            "Lightest Rate of Change Period": "أخف فترة لنسبة التغير",
            "Lightest SMA Period": "أخف فترة إس إم أيه",
            "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.":
              "كما هو الحال مع جميع علامات ChartIQ، يتم إدارة العنصر نفسه بواسطة الرسم البياني، لذلك عند تمرير الرسم البياني سيتحرك العنصر معك. كما سيتم حذف العنصر تلقائيا من المخطط عند تغيير الرمز.",
            "Limit Move Value": "قيمة تغير الحد",
            "Lin Fcst": "التنبؤ الخطي",
            "Lin Incpt": "الاعتراض الخطي",
            "Lin R2": "مؤشر الانحدار معامل مربع التحديد (R2)",
            Line: "الخطوط",
            "Line Break": "كسر خط",
            "Line/Bar Chart": "الرسم البياني الخطي/البارات",
            "Linear Reg Forecast": "مؤشر تنبؤ الانحدار الخطي",
            "Linear Reg Intercept": "مؤشر اعتراض الانحدار الخطي",
            "Linear Reg R2": "مربع معامل تحديد (R2) الانحدار الخطي",
            "Linear Reg Slope": "منحدر الانحدار الخطي",
            Lips: "الشفتان",
            "Lips Offset": "تعويض شفاة التمساح",
            "Lips Period": "فترة شفاة التمساح",
            Locale: "الموقع",
            "Log Scale": "المقياس اللوغارتمي",
            "Long Cycle": "دورة طويلة",
            "Long RoC": "معدل التغيرات الطويل",
            Loss: "خسارة",
            Low: "قاع",
            "Low Period": "الفترة المنخفضة",
            "Lowest Low Value": "مؤشر أدنى قيمة",
            "LR Slope": "منحدر الانحدار الخطي",
            M: "ش",
            "M Flow": "السيولة",
            MA: "MA",
            ma: "ma",
            "MA Env": "غلاف المتوسط المتحرك",
            "MA Env Bottom": "أسفل غلاف المتوسط المتحرك",
            "MA Env Median": "متوسط غلاف المتوسط المتحرك",
            "MA Env Top": "أعلى غلاف المتوسط المتحرك",
            "MA Period": "MA فترة",
            MACD: "MACD",
            "Market Data": "بيانات السوق",
            "Market Facilitation Index": "مؤشر تسهيل السوق",
            "Mass Idx": "مؤشر الكتلة",
            "Mass Index": "مؤشر الكتلة",
            "Maximum AF": "معامل التسارع الأقصى",
            mean: "تعني",
            Measure: "مقياس",
            "Med Price": "متوسط السعر",
            median: "متوسط",
            "Median Price": "متوسط السعر",
            "Min Tick Value": "أدنى قيمة لأصغر حركة سعر",
            "Minimum AF": "معامل التسارع الأدني=ى",
            Momentum: "الزخم",
            "Momentum Indicator": "مؤشر الزخم",
            "Money Flow Index": "مؤشر السيولة",
            More: "المزيد",
            "More studies": "مزيد من الدراسات",
            Mountain: "جبل",
            "Mountain Charts": "مخططات الجبال",
            "Mountain Color": "لون الجبل",
            "Moving Average": "المتوسط المتحرك",
            "Moving Average Deviation": "انحراف المتوسط المتحرك",
            "Moving Average Envelope": "غلاف المتوسط المتحرك",
            "Moving Average Type": "نوع المتوسط المتحرك",
            ms: "ملي",
            Multiplier: "معامل الضرب",
            Name: "اسم",
            "Neg Vol": "مؤشر الحجم السلبي",
            "Negative Bar": "عمود سلبي",
            "Negative Volume Index": "مؤشر الحجم السلبي",
            Neutral: "محايد",
            "New Custom Theme": "نسق جديد مخصص",
            "New Theme": "مظهر جديد",
            "New Theme Name": "اسم النسق الجديد",
            "New Theme Name:": "اسم الموضوع الجديد:",
            Night: "ليلي",
            None: "لا شيء",
            "None available": "غير متاح",
            "Not enough data to compute": "لا توجد بيانات كافية للحساب",
            Offset: "التعويض",
            "On Bal Vol": "مؤشر أحجام التداول المتراكمة",
            "On Balance Volume": "مؤشر أحجام التداول المتراكمة",
            Open: "الفتح",
            "Open shared chart in new window":
              "افتح الرسم البياني الذي تم مشاركته في نافذة جديدة",
            or: "أو",
            OverBought: "مُبَالَغ في الشراء",
            Overlay: "تراكب",
            OverSold: "مُبَالَغ في البيع",
            "P Rel": "منسوب السعر",
            Palatino: "Palatino",
            "Parabolic SAR": "مؤشر التوقف والانعكاس",
            Percent: "نسبة مئوية",
            percent: "نسبة مئوية",
            "Perf Idx": "مؤشر الأداء",
            "Performance Index": "مؤشر الأداء",
            Period: "الفترة",
            pips: "نقاط",
            Pitchfork: "مذراة",
            Pivot: "المحور",
            "Pivot Points": "النقاط المحورية",
            "Plot Type": "نوع الرسم البياني",
            PMO: "PMO",
            PMOSignal: "إشارة بي إم أو",
            "Point & Figure": "نقطة والشكل",
            Points: "نقاط",
            points: "نقاط",
            "Points Or Percent": "نقاط أو نسبة مئوية",
            "Popular Studies": "دراسات شائعة",
            "Pos Vol": "مؤشر الحجم الإيجابي",
            "Positive Bar": "عمود إيجابي",
            "Positive Volume Index": "مؤشر الحجم الإيجابي",
            "Press this button to generate a shareable image:":
              "اضغط على هذا الزر لإنشاء صورة قابلة للمشاركة:",
            "Pretty Good": "جيد جدًا",
            "Pretty Good Oscillator": "مذبذب جيد جدًا",
            Price: "السعر",
            "Price Minimum": "السعر الأمثل",
            "Price Momentum Oscillator": "مذبذب السعر",
            "Price Osc": "مذبذب السعر",
            "Price Oscillator": "مذبذب السعر",
            "Price Rate of Change": "معدل التغيرات السعرية",
            "Price Relative": "منسوب السعر",
            "Price ROC": "معدل التغيرات السعرية",
            "Price Vol": "حجم السعر",
            "Price Volume Trend": "اتجاه حجم السعر",
            "Prime Bands Bottom": "أسفل الحدود الرئيسية",
            "Prime Bands Channel": "قناة الحدود الرئيسية",
            "Prime Bands Top": "أعلى الحدود الرئيسية",
            "Prime Number": "الرقم الرئيسي",
            "Prime Number Bands": "حدود الأعداد الأولية",
            "Prime Number Oscillator": "مذبذب الأعداد الأولية",
            "Pring's Know Sure Thing": "برينغز يعرف بالتأكيد",
            "Pring's Special K": "خاص برينغز كيه",
            "Psychological Line": "الخط النفسي",
            QStick: "مؤشر قارئ الشموع اليابانية QStick",
            "Quadrant Lines": "خطوط رباعية",
            "Rainbow Moving Average": "متوسط قوس قزح المتحرك",
            "Rainbow Oscillator": "قوس قزح المذبذب",
            "Random Walk": "الحركة العشوائية",
            "Random Walk High": "الحركة العشوائية المرتفعة",
            "Random Walk Index": "مؤشر الحركة العشوائية",
            "Random Walk Low": "الحركة العشوائية المنخفضة",
            "Range Bars": "أعمدة",
            "Range Selector": "محدد النطاق",
            "Rate Of Change": "معدل التغير",
            RAVI: "RAVI",
            Ray: "شعاع",
            Rectangle: "مستطيل",
            Redo: "إعادة",
            "Regression Line": "خط الانحدار",
            "Rel Vig": "مؤشر النشاط النسبي",
            "Rel Vol": "مؤشر التقلب النسبي",
            "Relative Vigor Index": "مؤشر النشاط النسبي",
            "Relative Volatility": "التقلب النسبي",
            RelVigSignal: "إشارات مؤشر النشاط النسبي",
            Renko: "Renko ( رينكو)",
            "Resistance 1": "المقاومة 1",
            "Resistance 2": "المقاومة 2",
            "Resistance 3": "المقاومة 3",
            Result: "النتيجة",
            Retracement: "الارتداد",
            "right-click to delete": "انقر بزر الماوس الأيمن لإدارة",
            "right-click to manage": "انقر بزر الماوس الأيمن لحذف",
            "Risk/Reward": "مخاطرة/مكافأة",
            RSI: "RSI",
            RSquared: "معامل التحديد المربع",
            s: "ث",
            save: "حفظ",
            Save: "حفظ",
            "Save Theme": "حفظ النسق",
            "Save View": "حفظ العرض",
            "Saved View": "عرض محفوظ",
            "Saved Views": "العروض المحفوظة",
            "Scale Factor": "عامل التكبير",
            Schaff: "شاف",
            "Schaff Trend Cycle": "دورة اتجاه شاف",
            Search: "بحث",
            Segment: "قطاع",
            "Select Tool": "حدد أداة",
            "Sell Stops": "أوامر توقف البيع",
            Series: "السلسلة",
            "Set Point & Figure Parameters": "تعيين معلمات النقطة والشكل",
            "Set Price Lines": "تعيين خطوط السعر",
            "Set Range": "تعيين النطاق",
            "Set Reversal Percentage": "تعيين النسبة العكسية",
            Settings: "إعدادات",
            Shading: "الظل",
            Shape: "شكل",
            "Shape - Arrow": "الشكل – سهم",
            "Shape - Check": "الشكل – فحص",
            "Shape - Cross": "الشكل – تقاطع",
            "Shape - Focus": "الشكل – بؤرة التركيز",
            "Shape - Heart": "الشكل – قلب",
            "Shape - Star": "الشكل – نجمة",
            Share: "شارك",
            "Share This Chart": "شارك هذا المخطط",
            "Share Your Chart": "شارك الرسم البياني",
            Shift: "التحول",
            "Shift Percentage": "نسبة التحول",
            "Shift Type": "نوع التحول",
            "Shinohara Intensity Ratio": "معدل كثافة شينوهارا",
            "Short Cycle": "دورة قصيرة",
            "Short RoC": "معدل التغيرات القصير",
            "Show All": "إظهار الكل",
            "Show Fractals": "عرض فركتلات",
            "Show Zones": "عرض المناطق",
            Signal: "إشارة التداول",
            "Signal Period": "فترة إشارات التداول",
            "Signal Periods": "فترات إشارات التداول",
            Simple: "البسيط",
            "Simple Circle": "دائرة بسيطة",
            "Simple Square": "مربع بسيط",
            "Simulated data.": "بيانات المحاكاة.",
            Slope: "منحدر",
            Slow: "بطئ",
            "Slow MA Period": "فترة المتوسط المتحرك البطيء",
            SMA1: "SMA1",
            SMA10: "SMA10",
            SMA2: "SMA2",
            SMA3: "SMA3",
            SMA4: "SMA4",
            SMA5: "SMA5",
            SMA6: "SMA6",
            SMA7: "SMA7",
            SMA8: "SMA8",
            SMA9: "SMA9",
            Smooth: "ناعم",
            "Smoothing Period": "فترة التنعيم",
            "Speed Resistance Arc": "قوس مقاومة السرعة",
            "Speed Resistance Line": "خط مقاومة السرعة",
            SPY: "SPY",
            Squarewave: "Squarewave (موجة مربعة)",
            squarewave: "موجة مربع",
            Squat: "عشوائي",
            standard: "قياسي",
            "Standard Deviation": "الانحراف المعياري",
            "Standard Deviations": "الانحرافات المعيارية",
            Star: "نجمة",
            "STARC Bands": "فروقات ستارك",
            "STARC Bands Bottom": "أسوء فرق ستارك",
            "STARC Bands Median": "فرق متوسط ستارك",
            "STARC Bands Top": "أفضل فرق ستارك",
            "Stch Mtm": "مؤشر الزخم العشوائي",
            "STD Dev": "الانحرافات المعيارية",
            "STD Period": "الفترة المعيارية",
            "Stochastic Momentum Index": "مؤشر الزخم العشوائي",
            Stochastics: "مؤشر الاستوكاستك",
            STOCKS: "الأسهم",
            "Stop Levels": "مستويات التوقف",
            "Stop Loss": "وقف الخسارة",
            Stops: "توقفات",
            "Strong Ratio": "نسبة قوية",
            Studies: "دراسات",
            Study: "الدراسة",
            Supertrend: "إتجاه مرتفع",
            "Support 1": "الدعم 1",
            "Support 2": "الدعم 2",
            "Support 3": "الدعم 3",
            Swing: "التأرجح",
            "Swing Index": "مؤشر التأرجح",
            Symbol: "الرمز",
            T: "تيك",
            "Take Profit": "الحصول على الربح",
            Teeth: "الأسنان",
            "Teeth Offset": "تعويض أسنان التمساح",
            "Teeth Period": "فترة أسنان التمساح",
            Themes: "المظاهر",
            "This is a callout marker": "هذه علامة شرح",
            "This is an example of a complex marker which can contain html, video, images, css, and animations.":
              "هذا مثال على احدى العلامات المركبة والتي يمكن أن تحتوي على ملف html، فيديو، صور، css، ورسوم متحركة.",
            TII: "TII",
            "Time Cycle": "دورة الوقت",
            "Time Fcst": "التنبؤ الزمني",
            "Time Series": "السلاسل الزمنية",
            "Time Series Forecast": "توقعات مجموعة الوقت",
            "Time Zone": "التوقيت الزمني",
            "Times New Roman": "Times New Roman",
            Timezone: "المنطقة الزمنية",
            "Tirone Levels": "مستويات تايرون",
            "To set your timezone use the location button below or scroll through the following list":
              "لتعيين النطاق الزمني الخاص بك، استخدم زر الموقع أدناه أو انتقل خلال القائمة الآتية",
            "To set your timezone use the location button below, or scroll through the following list...":
              "لتعيين منطقتك الزمنية استخدم زر الموقع أدناه، أو مرر من خلال القائمة التالية ...",
            "Tolerance Percentage": "نسبة التحمل",
            "Trade Vol": "حجم التداول",
            "Trade Volume Index": "مؤشر حجم التداول",
            "Trend Intensity Index": "مؤشر كثافة الاتجاه",
            Triangular: "الثلاثي",
            "Triple Exponential": "الآسي الثلاثي",
            TRIX: "TRIX",
            "True Range": "مؤشر المد الحقيقي",
            Twiggs: "تويجز",
            "Twiggs Money Flow": "مؤشر السيولة تويجز",
            Type: "النوع",
            "Typical Price": "السعر النموذجي",
            "Ulcer Index": "مؤشر ألسر",
            Ultimate: "المطلق",
            "Ultimate Oscillator": "المذبذب المطلق",
            Underlay: "طبقة تحتية",
            Undo: "تراجع",
            Units: "الوحدات",
            "Unrealized Gain/Loss": "ربح/خسارة محققة",
            "Up Volume": "حجم صاعد",
            "Uploading Image": "جاري تحميل الصورة",
            Uptrend: "إتجاه عالي",
            "Use My Current Location": "استخدم موقعي الحالي",
            "Use the following link to share your chart:":
              "استخدم الرابط التالي لمشاركة رسمك البياني",
            "Use Volume": "الاستفادة من حجم التداول",
            "Valuation Lines": "خطوط التقييم",
            Variable: "المتغير",
            Vchart: "رسم تخطيطي مرئي",
            vdma: "VDMA",
            Vertical: "عمودي",
            "Vertical Horizontal Filter": "عامل التصفي العمودي الأفقي",
            VIDYA: "VIDYA",
            Views: "العروض",
            Vol: "الحجم",
            "Vol Osc": "مذبذب الحجم",
            "vol profile": "ملف الحجم",
            "Vol ROC": "معدل التغير الحجمي",
            "vol undr": "حجم أدنى",
            Volume: "الحجم",
            "Volume % of Avg": "متوسط الحجم %",
            "Volume Candle": "شمعة الحجم",
            "Volume Chart": "الرسم البياني للحجم",
            "Volume Not Available": "الحجم غير متوفر",
            "Volume Oscillator": "مذبذب الحجم",
            "Volume Profile": "مؤشر ملف الحجم",
            "Volume Rate of Change": "معدل التغير الحجمي",
            "Volume Spike": "حجم سبايك",
            "Volume Underlay": "مؤشر أساس حجم التداول",
            "Vortex Indicator": "مؤشر Vortex",
            "VT HZ Filter": "عامل التصفية العمودي الأفقي",
            VWAP: "VWAP",
            W: "أ",
            "W Acc Dist": "مؤشر التوزيع المتراكم ويليامز",
            "Weak Ratio": "نسبة ضعيفة",
            weekly: "أسبوعي",
            Weighted: "الموزون",
            "Weighted Close": "مؤشر الإغلاق المرجح",
            "Welles Wilder": "ويلز وايلدر",
            White: "أبيض",
            "Williams %R": "مؤشر ويليامز %R",
            "Your timezone is your current location":
              "منطقتك الزمنية تتبع موقعك الحالي",
            YTD: "حتى تاريخه",
            ZigZag: "زجزاج",
            "3 Min": ",",
            "3m": ",",
          },
          fr: {
            "-DI": "-DI",
            "-VI": "-VI",
            "(Scroll for more options)": "(Faites défiler pour plus d'options)",
            "(UTC-01:00) Azores": "(UTC-01: 00) Açores",
            "(UTC-01:00) Cape Verde Islands": "(UTC-01: 00) Le Cap-Vert",
            "(UTC-02:00) Mid-Atlantic": "(UTC-02: 00) Heure du  Mid Atlantique",
            "(UTC-03:00) Buenos Aires": "(UTC-03: 00) Buenos Aires",
            "(UTC-03:00) Montevideo": "(UTC-03: 00) Montevideo",
            "(UTC-03:00) Punta Arenas": "(UTC-03: 00) Punta Arenas",
            "(UTC-03:00) Sao Paulo": "(UTC-03: 00) San Paolo",
            "(UTC-03:30) Newfoundland and Labrador":
              "(UTC-03: 30) Terre-Neuve-et-Labrador",
            "(UTC-04:00) Asuncion": "(UTC-04: 00) Asuncion",
            "(UTC-04:00) Atlantic Time (Canada)":
              "(UTC-04: 00) Heure de l'Atlantique (Canada)",
            "(UTC-04:00) Caracas": "(UTC-04: 00) Caracas",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "(UTC-04: 00) Georgetown, La Paz, Manaus, San Juan",
            "(UTC-04:00) Santiago": "(UTC-04: 00) Santiago",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "(UTC-05: 00) Bogota, Lima, Quito, Rio Branco",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "(UTC-05:00) L'Heure de l'Est (Stati Uniti e Canada)",
            "(UTC-05:00) Indiana (East)": "(UTC-05: 00) Indiana (Est)",
            "(UTC-06:00) Central America": "(UTC-06: 00) Amérique Centrale",
            "(UTC-06:00) Central Time (US and Canada)":
              "(UTC-06: 00) Central (États-Unis et Canada)",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "(UTC-06: 00) Guadalajara, Mexico, Monterrey",
            "(UTC-06:00) Saskatchewan": "(UTC-06: 00) Saskatchewan",
            "(UTC-07:00) Arizona": "(UTC-07: 00) Arizona",
            "(UTC-07:00) Chihuahua, Mazatlan":
              "(UTC-07: 00) Chihuahua, Mazatlan",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "(UTC-07: 00) L'heure des Rocheuses (États-Unis et Canada)",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "(UTC-08: 00) Heure normale du Pacifique (Etats-Unis et Canada)",
            "(UTC-08:00) Tijuana": "(UTC-08: 00) Tijuana",
            "(UTC-09:00) Alaska": "(UTC-09: 00) Alaska",
            "(UTC-10:00) Hawaii": "(UTC-10: 00) Hawaii",
            "(UTC-11:00) American Samoa, Midway Island":
              "(UTC-11: 00) Samoa américaines, l'île de Midway",
            "(UTC) Casablanca": "(UTC) Casablanca",
            "(UTC) Dublin": "(UTC) Dublin",
            "(UTC) Lisbon, London": "(UTC) Lisbonne, Londres",
            "(UTC) Greenwich Mean Time, Reykjavik": "(UTC) GMT, Reykjavik",
            "(UTC+01:00) Algiers, Tunis": "(GMT + 01: 00) Alger, Tunis",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "(GMT + 01: 00) Amsterdam, Berlin, Berne, Rome, Stockholm, Vienne",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "(GMT + 01: 00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "(GMT + 01: 00) Bruxelles, Copenhague, Madrid, Paris",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "(GMT + 01: 00) Sarajevo Skopje Varsovie, Zagreb",
            "(UTC+02:00) Athens, Bucharest": "(GMT + 02: 00) Athènes, Bucarest",
            "(UTC+02:00) Cairo": "(GMT + 02: 00) Le Caire",
            "(UTC+02:00) Cyprus": "(GMT + 02: 00) Chypre",
            "(UTC+02:00) Harare, Johannesburg":
              "(GMT + 02: 00) Harare, Johannesburg",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "(GMT + 02: 00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius",
            "(UTC+02:00) Jerusalem": "(GMT + 02: 00) Jérusalem",
            "(UTC+02:00) Kaliningrad": "(GMT + 02: 00) Kaliningrad",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "(GMT + 03: 00) Bagdad, Koweït, Qatar, Riyadh",
            "(UTC+03:00) Istanbul": "(GMT + 03: 00) Istanbul",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "(GMT + 03: 00) Minsk Moscou, Kirov, Volgograd",
            "(UTC+03:00) Nairobi": "(GMT + 03: 00) Nairobi",
            "(UTC+03:00) Simferopol": "(GMT + 03: 00) Simferopol",
            "(UTC+03:30) Tehran": "(GMT + 03: 30) Téhéran",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "(GMT + 04: 00) Astrakhan, Samara, Saratov, Oulianovsk",
            "(UTC+04:00) Baku": "(GMT + 04: 00) Baku",
            "(UTC+04:00) Dubai, Muscat": "(GMT + 04: 00) Dubaï, Mascate",
            "(UTC+04:30) Kabul": "(GMT + 04: 30) Kaboul",
            "(UTC+05:00) Karachi, Tashkent": "(GMT + 05: 00) Karachi, Tachkent",
            "(UTC+05:00) Yekaterinburg": "(GMT + 05: 00) Ekaterinburg",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "(GMT + 05: 30) Chennai, Kolkata, Mumbai, New Delhi",
            "(UTC+05:45) Kathmandu": "(GMT + 05: 45) Katmandou",
            "(UTC+06:00) Almaty": "(GMT + 06: 00) Almaty",
            "(UTC+06:00) Astana, Dhaka": "(UTC+06:00) Astana, Dacca",
            "(UTC+06:00) Omsk": "(GMT + 06: 00) Omsk",
            "(UTC+06:30) Yangon": "(UTC+06:30) Yangon",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "(UTC+07:00) Bangkok, Jakarta, Vietnam",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "(UTC+07:00) Barnaoul, Novossibirsk, Tomsk",
            "(UTC+07:00) Hovd": "(UTC+07:00)Khovd",
            "(UTC+07:00) Krasnoyarsk": "(UTC+07:00) Krasnoïarsk",
            "(UTC+07:00) Novokuznetsk": "(UTC+07:00) Novokouznetsk",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "(UTC+08:00) Pékin, Chongqing, Région administrative spéciale de Hong Kong",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "(UTC+08:00) Brunei, Kuala Lumpur, Singapour",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "(UTC+08:00) Choybalsan, Oulan Bator",
            "(UTC+08:00) Irkutsk": "(UTC+08:00) Irkoutsk",
            "(UTC+08:00) Manila, Taipei": "(UTC+08:00) Manille, Taipei",
            "(UTC+08:00) Perth": "(UTC+08:00) Perth",
            "(UTC+08:45) Eucla": "(UTC+08:45) Eucla",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "(UTC+09:00) Tchita, Khandyga, Iakoutsk",
            "(UTC+09:00) Osaka, Sapporo, Tokyo":
              "(UTC+09:00) Osaka, Sapporo, Tokyo",
            "(UTC+09:00) Pyongyang": "(UTC+09:00) Pyongyang",
            "(UTC+09:00) Seoul": "(UTC+09:00) Séoul",
            "(UTC+09:30) Adelaide": "(UTC+09:30) Adélaïde",
            "(UTC+09:30) Darwin": "(UTC+09:30) Darwin",
            "(UTC+10:00) Brisbane": "(UTC+10:00) Brisbane",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "(UTC+10:00) Canberra, Melbourne, Sydney",
            "(UTC+10:00) Guam, Port Moresby": "(UTC+10:00) Guam, Port Moresby",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "(UTC+10:00) Oust-Nera, Vladivostok",
            "(UTC+11:00) Magadan": "(UTC+11:00) Magadan",
            "(UTC+11:00) Noumea, Solomon Islands":
              "(UTC+11:00) Nouméa, Îles Salomon",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "(UTC+11:00) Sakhaline, Srednekolymsk",
            "(UTC+12:00) Anadyr, Kamchatka": "(UTC+12:00) Anadyr, Kamtchatka",
            "(UTC+12:00) Auckland, Wellington":
              "(UTC+12:00) Auckland, Wellington",
            "(UTC+12:45) Chatham": "(UTC+12:45) Chatham",
            "(UTC+13:00) Samoa": "(UTC+13:00) Samoa",
            "(UTC+13:00) Tonga": "(UTC+13:00) Tonga",
            "(UTC+14:00) Kiritimati": "(UTC+14:00) Île Christmas (Kiribati)",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "Type de moyenne mobile en % D",
            "%D Periods": "%D Périodes",
            "%K": "%K",
            "%K Double Smoothing Periods": "Périodes doubles de lissage en % K",
            "%K Periods": "%K Périodes",
            "%K Smoothing Periods": "Périodes de lissage en % K",
            "+DI": "+DI",
            "+VI": "+VI",
            "1 D": "1 J",
            "1 Hour": "1 Heures",
            "1 Min": "1 Min",
            "1 Mo": "1 Mois",
            "1 Standard Deviation (1σ)": "1 Écart-type (1σ)",
            "1 W": "1 Sem",
            "10 Min": "10 Min",
            "10m": "10m",
            "13px": "13px",
            "15 Min": "15 Min",
            "15m": "15m",
            "1D": "1J",
            "1H": "1H",
            "1m": "1m",
            "1M": "1M",
            "1W": "1S",
            "1Y": "1A",
            "2 Standard Deviation (1σ)": "2 Écart-type (1σ)",
            "2 Standard Deviation (2σ)": "2 Écart-type (2σ)",
            "3 Standard Deviation (1σ)": "3 Écart-type (1σ)",
            "3 Standard Deviation (3σ)": "3 Écart-type (3σ)",
            "30 Min": "30 Min",
            "30m": "30m",
            "3M": "3M",
            "4 Hour": "4 Heures",
            "4H": "4H",
            "5 Min": "5 Min",
            "5D": "5J",
            "5m": "5m",
            "5Y": "5A",
            "6M": "6M",
            Abstract: "Résumé",
            "Acc Swing": "Acc Swing",
            "Accumulation/Distribution": "Distribution/Accumulation",
            "Accumulative Swing Index": "Indice Accumulative Swing",
            Add: "Ajouter",
            ADD: "AJOUTER",
            "Add Stop Loss": "Ajouter Stop Loss",
            "Add Take Profit": "Ajouter faire des bénéfices",
            ADX: "ADX",
            "ADX/DMS": "ADX/DMS",
            ALL: "TOUT",
            "All-Time High Lookback Period":
              "Période de rétrospection élevée tout le temps",
            Alligator: "Alligator",
            Annotation: "Annotation",
            Arc: "Arc",
            Aroon: "Aroon",
            "Aroon Down": "Aroon Down",
            "Aroon Osc": "Aroon Osc",
            "Aroon Oscillator": "Oscillateur d'Aroon",
            "Aroon Up": "Aroon Up",
            Arrow: "Flèche",
            "ATH Lookback Period": "Période lookback ATH",
            ATR: "ATR",
            "ATR Bands": "Bandes GMR",
            "ATR Bands Bottom": "Bandes GMR Bas",
            "ATR Bands Channel": "Bandes GMR Canal",
            "ATR Bands Top": "Bandes GMR Haut",
            "ATR Trailing Stop": "Arrêt des négociations GMR",
            "ATR Trailing Stops": "Arrêts des négociations GMR",
            "Auto Select": "Sélection automatique",
            Average: "Moyenne",
            "Average Line": "Ligne de la moyenne",
            "Average True Range": "Gamme moyenne réelle",
            "Average Type": "Type de moyenne",
            Awesome: "Génial",
            "Awesome Oscillator": "Oscillateur impressionnant",
            "Axis Label": "Libellé de l'axe",
            "Axis Label:": "Étiquette de l'Axe:",
            "Axis Text": "Texte axe",
            B: "B",
            Background: "Fond",
            "Background Color": "Couleur du fond",
            "Balance of Power": "Équilibre des forces",
            Bandwidth: "Bandes passantes",
            Bar: "Barre",
            Bars: "Barres",
            "Bars Color": "Couleur des barres",
            "Base Line": "Référence",
            "Base Line Period": "Phase de référence",
            Baseline: "Ligne de base",
            "Baseline Delta": "Changement de ligne de base",
            "BATS BZX real-time.": "BATS BZX en temps réel.",
            Bearish: "À la baisse",
            Beta: "Bêta",
            "Beta Callouts Candle Border": "Marge de la bougie Beta Callouts",
            Black: "Noir",
            "Boll %b": "Boll %b",
            "Boll BW": "Bandes passantes de Bollinger",
            "Bollinger %b": "Bollinger %b",
            "Bollinger Bands": "Bandes de Bollinger",
            "Bollinger Bands Bottom": "Bandes de Bollinger Bas",
            "Bollinger Bands Median": "Bandes de Bollinger Médian",
            "Bollinger Bands Top": "Bandes de Bollinger Haut",
            "Bollinger Bandwidth": "Bande passante de Bollinger",
            Border: "Ligne frontière",
            "Bulge Threshold": "Seuil de renflement",
            Bullish: "À la hausse",
            "Buy Stops": "Arrêts des achats",
            "by Xignite.": "par Xignite.",
            Callout: "Référence",
            Callouts: "Callout",
            cancel: "Annuler",
            Candle: "Bougie",
            "Candle Border": "Marge de la bougie",
            "Candle Borders": "Encadrements de bougies",
            "Candle Color": "Couleur bougie",
            "Candle Wick": "Mèche de la bougie",
            Candles: "Bougies",
            "Center Of Gravity": "Centre de gravité",
            "Chaikin MF": "Flux monétaire de Chaikin",
            "Chaikin Money Flow": "Flux monétaire de Chaikin",
            "Chaikin Vol": "Volatilité de Chaikin",
            "Chaikin Volatility": "Volatilité de Chaikin",
            "Chande Fcst": "Progression de Chande",
            "Chande Forecast Oscillator": "Indicateur de prévision de Chande",
            "Chande Momentum Oscillator": "Oscillateur de dynamique de Chande",
            "Chande Mtm": "Dynamique de Chande",
            "Change Timezone": "Modifier la plage horaire",
            Channel: "Canal",
            "Channel Fill": "Canal de Fill",
            Chart: "Graphique",
            "Chart Preferences": "Préférences des graphiques",
            "Chart Scale": "Échelle du graphique",
            "Chart Shared Successfully!": "Tableau partagé avec succès !",
            "Chart Style": "Style de graphique",
            "Chart Type": "Type de graphique",
            Check: "Vérifier",
            "Choose language": "Choisissez votre langue",
            "Choose Timezone": "Choisir la plage horaire",
            "Choppiness Index": "Indice Choppiness",
            Clear: "Régler",
            "Clear All": "Suprimez tout",
            "Clear Drawings": "Effacer les dessins",
            Close: "Fermer",
            close: "Ferme",
            Color: "Couleur",
            "Colored Bar": "Barre en couleur",
            "Colored Line": "Ligne en couleur",
            COMMODITIES: "MATIÈRES PREMIÈRES",
            "Commodity Channel Index": "Indice du canal des matières premières",
            Compare: "Comparer",
            "Comparison Symbol": "Comparaison des symboles",
            Composite: "Composé",
            "Composite RSI": "Composé RSI",
            Continuous: "Continu",
            "Conversion Line": "Transformation des valeurs",
            "Conversion Line Period": "Phase de transformation des valeurs",
            Coppock: "Coppock",
            "Coppock Curve": "Courbe de Coppock",
            Correl: "Correl",
            Correlation: "Corrélation",
            "Correlation Coefficient": "Coefficient de corrélation",
            Courier: "Courrier",
            Create: "Créer",
            "Create a New Custom Theme": "Créer un nouveau modèle personnalisé",
            "Create Custom Theme": "Créez un thème personnalisé",
            "Create Image": "Créez une image",
            Cross: "Croix",
            Crosshair: "Crosshair",
            Crosshairs: "Croix",
            Crossline: "Crossline",
            CURRENCIES: "DEVISES",
            "Current Studies": "Études en cours",
            "Current Symbols": "Symboles actuels",
            "Current TimeZone is": "Le fuseau horaire actuel est",
            "Custom Themes": "Modèles personnalisés",
            "Cycle 1": "Cycle 1",
            "Cycle 2": "Cycle 2",
            "Cycle 3": "Cycle 3",
            D: "J",
            daily: "quotidien",
            Darvas: "Darvas",
            "Darvas Box": "Boîte Darvas",
            "Data delayed 15 min.": "Données retardées 15 min.",
            "Data is randomized.": "Les données sont randomisées.",
            "Data is real-time.": "Les données sont en temps réel.",
            "Date Dividers": "Séparateurs de date",
            "Date/Time": "Date /Heure",
            "Date/Time:": "Date/Heure",
            Day: "Jour",
            "Days Per Year": "Jours par an",
            "Decreasing Bar": "Barre descendante",
            Default: "Par défaut",
            "Default Themes": "Thèmes par défaut",
            Delete: "Supprimer",
            "Delete Study": "Effacez l'étude",
            "Demo data.": "Les données de démonstration.",
            Detrended: "Qui élimine la tendance",
            "Detrended Price Oscillator":
              "Oscillateur de prix éliminant la tendance",
            Directional: "Directionnel",
            "Disparity Index": "Indice de disparité",
            Display: "Afficher",
            "Display 1 Standard Deviation (1σ)": "Afficher 1 Écart-type (1σ)",
            "Display 2 Standard Deviation (2σ)": "Afficher 2 Écart-type (2σ)",
            "Display 3 Standard Deviation (3σ)": "Afficher 3 Écart-type (3σ)",
            "Display Average": "Afficher moyenne",
            "Distance(%)": "Distance (%)",
            Divergence: "Divergence",
            "Don't see your study below? Type in your search here.":
              "Vous e voyez pas votre étude ci-dessous ? Tapez votre recherche ici.",
            "Donchian Channel": "Canal de Donchian",
            "Donchian High": "Donchian Élevé",
            "Donchian Low": "Donchian Faible",
            "Donchian Median": "Donchian Médian",
            "Donchian Width": "Valeur de Donchian",
            Done: "Terminé",
            Doodle: "Forme libre",
            "Double Exponential": "Double Exponentiel",
            "Double Smoothing Period": "Période double de lissage",
            "Down Volume": "Volume baissé",
            Downtrend: "Tendance à la baisse",
            Draw: "Dessinez",
            "Ease of Movement": "Facilité du mouvement",
            Edit: "Modifier",
            "Edit Settings...": "Modifiez les paramètres ...",
            EF: "EF",
            "EF Trigger": "EF Trigger",
            "Ehler Fisher": "Ehler Fisher",
            "Ehler Fisher Transform": "Ehler Fisher Transform",
            "Elder Bear Power": "Marge baissière Elder",
            "Elder Bull Power": "Marge haussière Elder",
            "Elder Force": "Elder Force",
            "Elder Force Index": "Indice Elder Force",
            "Elder Impulse System": "Système Impulse Elder",
            "Elder Ray Index": "Elder Ray",
            Ellipse: "Ellipse",
            ema: "ema",
            "End of day data.": "Les données de la fin de la journée.",
            'Enter box size and hit "Enter"':
              "Entrez la taille du cadre et appuyez sur « Entrer »",
            "Enter name of view:": "Entrez le nom de la vue",
            'Enter reversal and hit "Enter"':
              "Insérez l'inversion et appuyez sur « Entrer »",
            "Enter Symbol": "Saisir un symbole",
            'Enter value and hit "Enter"':
              'Entrez la valeur et appuyez sur Entrer""""',
            Events: "Événement",
            "Exit Field": "Sortir du champ",
            Exponential: "Exponentiel",
            "Extended Hours": "Heures prolongées",
            Fade: "Fictif",
            Fake: "Faux",
            Fan: "Fan",
            Fast: "Rapide",
            "Fast MA Period": "Période rapide de la moyenne mobile",
            "Fib Arc": "Arc Fib",
            "Fib Fan": "Éventail Fib",
            "Fib Time Zone": "Intervalle de temps Fib",
            Fibonacci: "Fibonacci",
            fibonacci: "Fibonacci",
            Field: "Champ",
            field: "domaine",
            Fill: "Fill",
            "Focus Arrow": "Flèche de mise en évidence",
            Forecast: "Prévision",
            FOREX: "FOREX",
            "Formula courtesy": "Formule grâce à",
            "Fractal Channel": "Fractal Canal",
            "Fractal Chaos": "Chaos fractal",
            "Fractal Chaos Bands": "Valeurs chaos fractal",
            "Fractal Chaos Oscillator": "Oscillateur chaos fractal",
            "Fractal High": "Fractal Élevé",
            "Fractal Low": "Fractal Faible",
            FUNDS: "FONDS",
            FUTURES: "FUTURE",
            FX: "DEVISES",
            Gain: "Profit",
            "Gann Fan": "Éventail Gann",
            Garamond: "Garamond",
            Gartley: "Gartley",
            Gator: "Gator",
            "Gator Oscillator": "Oscillateur de Gator",
            "Generating Image": "Génération d'image",
            Ghost: "Fantôme",
            "Ghost Boxes": "Boîtes à fantôme",
            Gopala: "Gopala",
            "Gopalakrishnan Range Index": "Indice d'intervalle Gopalakrishnan",
            Gradient: "Pente",
            Green: "Vert",
            "Grid Lines": "Lignes de quadrillage",
            H: "H",
            harmonic: "harmonique",
            Heart: "Cœur",
            "Heaviest Rate of Change Period":
              "Taux le plus lourd de période de transition",
            "Heaviest SMA Period":
              "Taux le plus lourd de période de moyenne mobile simple",
            "Heavy Rate of Change Period":
              "Taux lourd de période de transition",
            "Heavy SMA Period": "Période de moyenne mobile simple lourd",
            "Heikin Ashi": "Heikin Ashi",
            "Heikin-Ashi": "Heikin-Ashi",
            Helvetica: "Helvetica",
            "HHV/LLV Lookback": "HHV/LLV rétroviseur",
            High: "Maximum",
            "High Low": "Élevé Faible",
            "High Low Bands": "Valeurs élevées et faibles",
            "High Low Bottom": "Élevé Faible Bas",
            "High Low Median": "Élevé Faible Médian",
            "High Low Top": "Élevé Faible Haut",
            "High Minus Low": "Élevé Négatif Faible",
            "High Period": "Période élevée",
            "High-Low": "Élevé Faible",
            "high/low": "plus haut/plus bas",
            "Highest High Value": "Valeur élevée plus élevée",
            HighLow: "Élevé Faible",
            "Hist Vol": "Volatilité historique",
            Histogram: "Histogramme",
            "Historical Volatility": "Volatilité historique",
            "Hollow Candle": "Bougie creuse",
            Horizontal: "Horizontal",
            Hull: "coque",
            I: "I",
            "Ichimoku Clouds": "Ichimoku Clouds",
            "Increasing Bar": "Barre montante",
            Index: "Indice",
            INDEXES: "INDICES",
            INDICES: "INDICES",
            Info: "Info",
            Intercept: "Ordonnée",
            Interval: "Intervalle",
            "Intraday Momentum Index": "Indice de dynamique intrajournalier",
            "Intraday Mtm": "Dynamique intrajournalière",
            Jaw: "Mâchoire",
            "Jaw Offset": "Compensation mâchoire",
            "Jaw Period": "Période mâchoire",
            Kagi: "Kagi",
            Keltner: "Keltner",
            "Keltner Bottom": "Keltner Bas",
            "Keltner Channel": "Canal de Keltner",
            "Keltner Median": "Keltner Médian",
            "Keltner Top": "Keltner Haut",
            Klinger: "Klinger",
            "Klinger Volume Oscillator": "Oscillateur de volume de Klinger",
            KlingerSignal: "Signal Klinger",
            KST: "KST",
            KSTSignal: "Signal KST",
            "Lagging Span": "Échelonnée et retardée",
            "Lagging Span Period": "Phase retardée et échelonnée",
            "Leading Span A": "Principale et échelonnée A",
            "Leading Span B": "Principale et échelonnée B",
            "Leading Span B Period": "Phase principale et échelonnée B",
            "Level Offset": "Décalage de niveau",
            Levels: "Niveaux",
            "Light Rate of Change Period":
              "Taux léger de période de transition",
            "Light SMA Period": "Période de moyenne mobile simple léger",
            "Lightest Rate of Change Period":
              "Taux le plus léger de période de transition",
            "Lightest SMA Period":
              "Période de moyenne mobile simple la plus légère",
            "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.":
              "Comme tous les marqueurs ChartIQ, l'objet lui-même est géré par le graphique, donc lorsque vous faites défiler le graphique, l'objet se déplace avec vous. Il est également détruit automatiquement pour vous lorsque le symbole a changé.",
            "Limit Move Value": "Valeur limite du mouvement",
            "Lin Fcst": "Progression linéaire",
            "Lin Incpt": "Ordonnée linéaire",
            "Lin R2": "R2 linéaire",
            Line: "Ligne",
            "Line Break": "Saut de ligne",
            "Line/Bar Chart": "Graphique en ligne/ bandes",
            "Linear Reg Forecast": "Progression linéaire de l'indice Reg",
            "Linear Reg Intercept": "Ordonnée linéaire de l'indice Reg",
            "Linear Reg R2": "Reg R2 linéaire",
            "Linear Reg Slope": "Pente linéaire de l'indice Reg",
            Lips: "Lèvres",
            "Lips Offset": "Compensation lèvres",
            "Lips Period": "Période lèvres",
            Locale: "Locale",
            "Log Scale": "Logarithmique",
            "Long Cycle": "Cycle long",
            "Long RoC": "RDC à long terme",
            Loss: "Perte",
            Low: "Minimum",
            "Low Period": "Période creuse",
            "Lowest Low Value": "Valeur faible plus faible",
            "LR Slope": "Pente linéaire de l'indice Reg",
            M: "M",
            "M Flow": "Flux monétaire",
            MA: "Moyenne mobile",
            ma: "moyenne mobile",
            "MA Env": "Enveloppe de la moyenne mobile",
            "MA Env Bottom": "Enveloppe de la moyenne mobile Bas",
            "MA Env Median": "Enveloppe de la moyenne mobile Médian",
            "MA Env Top": "Enveloppe de la moyenne mobile Haut",
            "MA Period": "Période moyenne mobile",
            MACD: "MACD",
            "Market Data": "Données du marché",
            "Market Facilitation Index": "Indice de facilitation du marché",
            "Mass Idx": "Indice de masse",
            "Mass Index": "Indice de masse",
            "Maximum AF": "Fréquence audio maximale",
            mean: "moyens",
            Measure: "Mesure",
            "Med Price": "Prix médian",
            median: "médiane",
            "Median Price": "Prix médian",
            "Min Tick Value": "Valeur minimale de l'unité",
            "Minimum AF": "Fréquence audio minimale",
            Momentum: "Dynamique",
            "Momentum Indicator": "Indicateur de dynamique",
            "Money Flow Index": "Indicateur des flux monétaires",
            More: "Plus",
            "More studies": "Plus d'études",
            Mountain: "Montagne",
            "Mountain Charts": "Graphiques en relief",
            "Mountain Color": "Couleur de la montagne",
            "Moving Average": "Moyenne mobile",
            "Moving Average Deviation": "Déviation moyenne mobile",
            "Moving Average Envelope": "Enveloppe de moyenne mobile",
            "Moving Average Type": "Type de moyenne mobile",
            ms: "ms",
            Multiplier: "Multiplicateur",
            Name: "Nom",
            "Neg Vol": "Volume négatif",
            "Negative Bar": "Barre négative",
            "Negative Volume Index": "Indice de volume négatif",
            Neutral: "Neutre",
            "New Custom Theme": "Nouveau modèle personnalisé",
            "New Theme": "Nouveau thème",
            "New Theme Name": "Nom du nouveau modèle",
            "New Theme Name:": "Nouveau nom du thème :",
            Night: "Nuit",
            None: "Aucun",
            "None available": "Indisponible",
            "Not enough data to compute":
              "Pas assez de données pour le calculer",
            Offset: "Compenser",
            "On Bal Vol": "Sur le volume du solde",
            "On Balance Volume": "Sur le volume du solde",
            Open: "Ouverture",
            "Open shared chart in new window":
              "Ouvrir le tableau partagé dans une nouvelle fenêtre",
            or: "ou",
            OverBought: "Suracheté",
            Overlay: "Sus-jacent",
            OverSold: "Survendu",
            "P Rel": "P Rel",
            Palatino: "Palatino",
            "Parabolic SAR": "Parabolique SAR",
            Percent: "Pour cent",
            percent: "pour cent",
            "Perf Idx": "Indice de performance",
            "Performance Index": "Indice de performance",
            Period: "Période",
            pips: "pips",
            Pitchfork: "Fourche",
            Pivot: "Pivot",
            "Pivot Points": "Points pivots",
            "Plot Type": "Type de tracé",
            PMO: "PMO",
            PMOSignal: "Signal PMO",
            "Point & Figure": "Point & Figure",
            Points: "Points",
            points: "points",
            "Points Or Percent": "Points ou pourcentage",
            "Popular Studies": "Études générales",
            "Pos Vol": "Volume positif",
            "Positive Bar": "Barre positive",
            "Positive Volume Index": "Indice de volume positif",
            "Press this button to generate a shareable image:":
              "Pour créer une image partageable, cliquez sur ce bouton:",
            "Pretty Good": "Très bon",
            "Pretty Good Oscillator": "Oscillateur très bon",
            Price: "Prix",
            "Price Minimum": "Prix minimum",
            "Price Momentum Oscillator": "Oscillateur de dynamique de prix",
            "Price Osc": "Oscillateur de prix",
            "Price Oscillator": "Oscillateur de prix",
            "Price Rate of Change": "Prix Taux de change",
            "Price Relative": "Prix relatif",
            "Price ROC": "Prix RDC",
            "Price Vol": "Prix Volume",
            "Price Volume Trend": "Tendance du volume et des prix",
            "Prime Bands Bottom": "Bandes premières Bas",
            "Prime Bands Channel": "Bandes premières Canal",
            "Prime Bands Top": "Bandes premières Haut",
            "Prime Number": "Nombre premier",
            "Prime Number Bands": "Bandes des nombres premiers",
            "Prime Number Oscillator": "Oscillateur des nombres premiers",
            "Pring's Know Sure Thing": "Know Sure Thing de Pring",
            "Pring's Special K": "Spécial K de Pring",
            "Psychological Line": "Seuil psychologique",
            QStick: "QStick",
            "Quadrant Lines": "Lignes cadrans",
            "Rainbow Moving Average": "Moyenne mobile arc-en-ciel",
            "Rainbow Oscillator": "Oscillateur arc-en-ciel",
            "Random Walk": "Random Walk",
            "Random Walk High": "Random Walk Élevé",
            "Random Walk Index": "Indice aléatoire",
            "Random Walk Low": "Random Walk Faible",
            "Range Bars": "Barres d'amplitude",
            "Range Selector": "Sélecteur de la gamme",
            "Rate Of Change": "Taux de change",
            RAVI: "RAVI",
            Ray: "Ray",
            Rectangle: "Rectangle",
            Redo: "Refaire",
            "Regression Line": "Lignes de régression",
            "Rel Vig": "Vigueur relative",
            "Rel Vol": "Volatilité relative",
            "Relative Vigor Index": "Indice de vigueur relative",
            "Relative Volatility": "Volatilité relative",
            RelVigSignal: "Signal/Vigueur relative",
            Renko: "Renko",
            "Resistance 1": "Résistance 1",
            "Resistance 2": "Résistance 2",
            "Resistance 3": "Résistance 3",
            Result: "Résultat",
            Retracement: "Retracement",
            "right-click to delete": "Faites un clic droit pour supprimer",
            "right-click to manage": "Faites un clic droit pour gérer",
            "Risk/Reward": "Risque/Récompense",
            RSI: "RSI",
            RSquared: "RSquared",
            s: "s",
            save: "Sauvegarder",
            Save: "Sauvegarder",
            "Save Theme": "Sauvegarder",
            "Save View": "Sauvegardez la vue",
            "Saved View": "Vue sauvegardée",
            "Saved Views": "Vues sauvegardées",
            "Scale Factor": "Facteur d'échelle",
            Schaff: "Schaff",
            "Schaff Trend Cycle": "Cycle de tendances Schaff",
            Search: "Rechercher",
            Segment: "Segment",
            "Select Tool": "Sélectionner Outil",
            "Sell Stops": "Arrêts des ventes",
            Series: "Série",
            "Set Point & Figure Parameters":
              "Définissez les paramètres des points et des figures",
            "Set Price Lines": "Définissez les lignes de prix",
            "Set Range": "Définissez la gamme",
            "Set Reversal Percentage": "Définissez le pourcentage d'inversion",
            Settings: "Paramètres",
            Shading: "Nuance",
            Shape: "Forme",
            "Shape - Arrow": "Forme - Flèche",
            "Shape - Check": "Forme - Tique",
            "Shape - Cross": "Forme - Croix",
            "Shape - Focus": "Forme - Focus",
            "Shape - Heart": "Forme - Cœur",
            "Shape - Star": "Forme - Étoile",
            Share: "Partager",
            "Share This Chart": "Partager ce graphique",
            "Share Your Chart": "Partagez votre graphique",
            Shift: "Déplacement",
            "Shift Percentage": "Pourcentage de déplacement",
            "Shift Type": "Type de déplacement",
            "Shinohara Intensity Ratio": "Rapport d'intensité Shinohara",
            "Short Cycle": "Cycle court",
            "Short RoC": "RDC à court terme",
            "Show All": "Afficher Tout",
            "Show Fractals": "Afficher fractales",
            "Show Zones": "Afficher des zones",
            Signal: "Signal",
            "Signal Period": "Période du signal",
            "Signal Periods": "Périodes du signal",
            Simple: "Simple",
            "Simple Circle": "Cercle simple",
            "Simple Square": "Carré simple",
            "Simulated data.": "Données simulées.",
            Slope: "Pente",
            Slow: "Lent",
            "Slow MA Period": "Période lente de la moyenne mobile",
            SMA1: "SMA1",
            SMA10: "SMA10",
            SMA2: "SMA2",
            SMA3: "SMA3",
            SMA4: "SMA4",
            SMA5: "SMA5",
            SMA6: "SMA6",
            SMA7: "SMA7",
            SMA8: "SMA8",
            SMA9: "SMA9",
            Smooth: "Smooth",
            "Smoothing Period": "Période de lissage",
            "Speed Resistance Arc": "Arc de résistance de la vitesse",
            "Speed Resistance Line": "Ligne de résistance de la vitesse",
            SPY: "VOYANT",
            Squarewave: "Squarewave",
            squarewave: "onde carrée",
            Squat: "Squat",
            standard: "standard",
            "Standard Deviation": "Écart type",
            "Standard Deviations": "Écarts types",
            Star: "Étoile",
            "STARC Bands": "Bandes STARC",
            "STARC Bands Bottom": "Bandes STARC Bas",
            "STARC Bands Median": "Bandes STARC Milieu",
            "STARC Bands Top": "Bandes STARC Haut",
            "Stch Mtm": "Dynamique stochastique",
            "STD Dev": "Écart type",
            "STD Period": "Période type",
            "Stochastic Momentum Index": "Indice de dynamique stochastique",
            Stochastics: "Stochastique",
            STOCKS: "ACTIONS",
            "Stop Levels": "Nveaux d'arrêt",
            "Stop Loss": "Stop Loss",
            Stops: "Arrêts",
            "Strong Ratio": "Rapport fort",
            Studies: "Études",
            Study: "Étude",
            Supertrend: "Supertendance",
            "Support 1": "Support 1",
            "Support 2": "Support 2",
            "Support 3": "Support 3",
            Swing: "Swing",
            "Swing Index": "Indice Swing",
            Symbol: "Symbole",
            T: "T",
            "Take Profit": "Faire des bénéfices",
            Teeth: "Dents",
            "Teeth Offset": "Compensation dents",
            "Teeth Period": "Période dents",
            Themes: "Thèmes",
            "This is a callout marker": "Ceci est un marqueur de callout",
            "This is an example of a complex marker which can contain html, video, images, css, and animations.":
              "Ceci est un exemple de marqueurs complexes, qui peut contenir html, vidéo, images, animations et css",
            TII: "TII",
            "Time Cycle": "Temps de cycle",
            "Time Fcst": "Progression dans le temps",
            "Time Series": "Des séries chronologiques",
            "Time Series Forecast": "Prévision des séries chronologiques",
            "Time Zone": "Fuseau horaire",
            "Times New Roman": "Time New Roman",
            Timezone: "Plage horaire",
            "Tirone Levels": "Niveaux  Tirone",
            "To set your timezone use the location button below or scroll through the following list":
              "Pour indiquer votre fuseau horaire veuillez utiliser le bouton Emplacement ci-dessous ou parcourir la liste suivante",
            "To set your timezone use the location button below, or scroll through the following list...":
              "Pour définir votre fuseau horaire, utilisez le bouton de localisation ci-dessous ou faites défiler la liste suivante …",
            "Tolerance Percentage": "Pourcentage de tolérance",
            "Trade Vol": "Volume de trading",
            "Trade Volume Index": "Indice de volume de transactions",
            "Trend Intensity Index": "Indice d'ntensité de la tendance",
            Triangular: "Triangulaire",
            "Triple Exponential": "Triple Exponentiel",
            TRIX: "TRIX",
            "True Range": "Gamme réelle",
            Twiggs: "Twiggs",
            "Twiggs Money Flow": "Flux monétaire Twiggs",
            Type: "Type",
            "Typical Price": "Prix type",
            "Ulcer Index": "Indice Ulcer",
            Ultimate: "Principal",
            "Ultimate Oscillator": "Oscillateur principal",
            Underlay: "Sous-couche",
            Undo: "Annulez",
            Units: "Unités",
            "Unrealized Gain/Loss": "Gain/perte non réalisé",
            "Up Volume": "Volume augmenté",
            "Uploading Image": "Téléchargement de l'image",
            Uptrend: "Tendance à la hausse",
            "Use My Current Location": "Utiliser mon emplacement actuel",
            "Use the following link to share your chart:":
              "Utilisez le lien suivant pour partager votre tableau",
            "Use Volume": "Utiliser Volume",
            "Valuation Lines": "Directives d'évaluation",
            Variable: "Variable",
            Vchart: "Vchart",
            vdma: "vdma",
            Vertical: "Vertical",
            "Vertical Horizontal Filter": "Filtre horizontal et vertical",
            VIDYA: "VIDYA",
            Views: "Vues",
            Vol: "Vol",
            "Vol Osc": "Oscillateur de volume",
            "vol profile": "profil du volume",
            "Vol ROC": "Volume RDC",
            "vol undr": "vol undr",
            Volume: "Volume",
            "Volume % of Avg": "% de moyenne volume",
            "Volume Candle": "Volume en chandelle",
            "Volume Chart": "Graphique des volumes",
            "Volume Not Available": "Volume non disponible",
            "Volume Oscillator": "Oscillateur de volume",
            "Volume Profile": "Volume Profil",
            "Volume Rate of Change": "Volume Taux de change",
            "Volume Spike": "Volume Spike",
            "Volume Underlay": "Volume intégré",
            "Vortex Indicator": "Indicateur de Vortex",
            "VT HZ Filter": "Filtre VT HZ",
            VWAP: "VWAP",
            W: "S",
            "W Acc Dist": "Accumulation/Distribution de Williams",
            "Weak Ratio": "Faible rapport",
            weekly: "hebdomadaire",
            Weighted: "Pondéré",
            "Weighted Close": "Clôture pondéré",
            "Welles Wilder": "Welles Wilder",
            White: "Blanc",
            "Williams %R": "Williams %R",
            "Your timezone is your current location":
              "Votre fuseau horaire est votre position actuelle",
            YTD: "années jusqu'à aujourd'hui",
            ZigZag: "ZigZag",
            "3 Min": ",",
            "3m": ",",
          },
          de: {
            "-DI": "-DI",
            "-VI": "-VI",
            "(Scroll for more options)": "(Für weitere Optionen scrollen)",
            "(UTC-01:00) Azores": "(UTC-01:00) Azores",
            "(UTC-01:00) Cape Verde Islands": "(UTC-01:00) Kap Verde Islands",
            "(UTC-02:00) Mid-Atlantic": "(UTC-02:00) Mid-Atlantic",
            "(UTC-03:00) Buenos Aires": "(UTC-03:00) Buenos Aires",
            "(UTC-03:00) Montevideo": "(UTC-03:00) Montevideo",
            "(UTC-03:00) Punta Arenas": "(UTC-03:00) Punta Arenas",
            "(UTC-03:00) Sao Paulo": "(UTC-03:00) Sao Paulo",
            "(UTC-03:30) Newfoundland and Labrador":
              "(UTC-03:30) Neufundland und Labrador",
            "(UTC-04:00) Asuncion": "(UTC-04:00) Asuncion",
            "(UTC-04:00) Atlantic Time (Canada)":
              "(UTC-04:00) Atlantic Time (Kanada)",
            "(UTC-04:00) Caracas": "(UTC-04:00) Caracas",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
            "(UTC-04:00) Santiago": "(UTC-04:00) Santiago",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "(UTC-05:00) Bogota, Lima, Quito, Rio Branco",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "(UTC-05:00) Eastern Time (USA und Kanada)",
            "(UTC-05:00) Indiana (East)": "(UTC-05:00) Indiana (East)",
            "(UTC-06:00) Central America": "(UTC-06:00) Zentralamerika",
            "(UTC-06:00) Central Time (US and Canada)":
              "(UTC-06:00) Central Time (USA und Kanda)",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "(UTC-06:00) Guadalajara, Mexiko Stadt, Monterrey",
            "(UTC-06:00) Saskatchewan": "(UTC-06:00) Saskatchewan",
            "(UTC-07:00) Arizona": "(UTC-07:00) Arizona",
            "(UTC-07:00) Chihuahua, Mazatlan":
              "(UTC-07:00) Chihuahua, Mazatlan",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "(UTC-07:00) Mountain Time (USA und Kanada)",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "(UTC-08:00) Pazifik Zeit (USA und Kanada)",
            "(UTC-08:00) Tijuana": "(UTC-08:00) Tijuana",
            "(UTC-09:00) Alaska": "(UTC-09:00) Alaska",
            "(UTC-10:00) Hawaii": "(UTC-10:00) Hawaii",
            "(UTC-11:00) American Samoa, Midway Island":
              "(UTC-11:00) Amerikanisch-Samoa, Midway Inseln",
            "(UTC) Casablanca": "(UTC) Casablanca",
            "(UTC) Dublin": "(UTC) Dublin",
            "(UTC) Lisbon, London": "(UTC) Lissabon, London",
            "(UTC) Greenwich Mean Time, Reykjavik":
              "(UTC) Greenwich Mean Time, Reykjavik",
            "(UTC+01:00) Algiers, Tunis": "(UTC+01:00) Algerien, Tunesien",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "(UTC+01:00) Amsterdam, Berlin, Bern, Rom, Stockholm, Wien",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "(UTC+01:00) Belgrad, Bratislava, Budapest, Ljubljana, Prag",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "(UTC+01:00) Brüssel, Kopenhagen, Madrid, Paris",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "(UTC+01:00) Sarajevo, Skopje, Warschau, Zagreb",
            "(UTC+02:00) Athens, Bucharest": "(UTC+02:00) Athen, Bukarest",
            "(UTC+02:00) Cairo": "(UTC+02:00) Kairo",
            "(UTC+02:00) Cyprus": "(UTC+02:00) Zypern",
            "(UTC+02:00) Harare, Johannesburg":
              "(UTC+02:00) Harare, Johannesburg",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius",
            "(UTC+02:00) Jerusalem": "(UTC+02:00) Jerusalem",
            "(UTC+02:00) Kaliningrad": "(UTC+02:00) Kaliningrad",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "(UTC+03:00) Bagdad, Kuwait, Katar, Riyadh",
            "(UTC+03:00) Istanbul": "(UTC+03:00) Istanbul",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "(UTC+03:00) Minsk, Moskau, Kirov, Volgograd",
            "(UTC+03:00) Nairobi": "(UTC+03:00) Nairobi",
            "(UTC+03:00) Simferopol": "(UTC+03:00) Simferopol",
            "(UTC+03:30) Tehran": "(UTC+03:30) Tehran",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk",
            "(UTC+04:00) Baku": "(UTC+04:00) Baku",
            "(UTC+04:00) Dubai, Muscat": "(UTC+04:00) Dubai, Muskat",
            "(UTC+04:30) Kabul": "(UTC+04:30) Kabul",
            "(UTC+05:00) Karachi, Tashkent": "(UTC+05:00) Karachi, Tashkent",
            "(UTC+05:00) Yekaterinburg": "(UTC+05:00) Yekaterinburg",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "(UTC+05:30) Chennai, Kolkata, Mumbai, Neu-Dehli",
            "(UTC+05:45) Kathmandu": "(UTC+05:45) Kathmandu",
            "(UTC+06:00) Almaty": "(UTC+06:00) Almaty",
            "(UTC+06:00) Astana, Dhaka": "(UTC+06:00) Astana, Dhaka",
            "(UTC+06:00) Omsk": "(UTC+06:00) Omsk",
            "(UTC+06:30) Yangon": "(UTC+06:30) Yangon",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "(UTC+07:00) Bangkok, Jakarta, Vietnam",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "(UTC+07:00) Barnaul, Novosibirsk, Tomsk",
            "(UTC+07:00) Hovd": "(UTC+07:00) Hovd",
            "(UTC+07:00) Krasnoyarsk": "(UTC+07:00) Krasnoyarsk",
            "(UTC+07:00) Novokuznetsk": "(UTC+07:00) Novokuznetsk",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "(UTC+08:00) Brunei, Kuala Lumpur, Singapur",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "(UTC+08:00) Choibalsan, Ulaanbaatar",
            "(UTC+08:00) Irkutsk": "(UTC+08:00) Irkutsk",
            "(UTC+08:00) Manila, Taipei": "(UTC+08:00) Manilla, Taipei",
            "(UTC+08:00) Perth": "(UTC+08:00) Perth",
            "(UTC+08:45) Eucla": "(UTC+08:45) Eucla",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "(UTC+09:00) Chita, Khandyga, Yakutsk",
            "(UTC+09:00) Osaka, Sapporo, Tokyo":
              "(UTC+09:00) Osaka, Sapporo, Tokio",
            "(UTC+09:00) Pyongyang": "(UTC+09:00) Pyongyang",
            "(UTC+09:00) Seoul": "(UTC+09:00) Seoul",
            "(UTC+09:30) Adelaide": "(UTC+09:30) Adelaide",
            "(UTC+09:30) Darwin": "(UTC+09:30) Darwin",
            "(UTC+10:00) Brisbane": "(UTC+10:00) Brisbane",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "(UTC+10:00) Canberra, Melbourne, Sydney",
            "(UTC+10:00) Guam, Port Moresby": "(UTC+10:00) Guam, Port Moresby",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "(UTC+10:00) Ust-Nera, Vladivostok",
            "(UTC+11:00) Magadan": "(UTC+11:00) Magadan",
            "(UTC+11:00) Noumea, Solomon Islands":
              "(UTC+11:00) Noumea, Solomon Islands",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "(UTC+11:00) Sakhalin, Srednekolymsk",
            "(UTC+12:00) Anadyr, Kamchatka": "(UTC+12:00) Anadyr, Kamchatka",
            "(UTC+12:00) Auckland, Wellington":
              "(UTC+12:00) Auckland, Wellington",
            "(UTC+12:45) Chatham": "(UTC+12:45) Chatham",
            "(UTC+13:00) Samoa": "(UTC+13:00) Samoa",
            "(UTC+13:00) Tonga": "(UTC+13:00) Tonga",
            "(UTC+14:00) Kiritimati": "(UTC+14:00) Kiritimati",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "%D Art des gleitenden Mittelwerts",
            "%D Periods": "%d Zeiträume",
            "%K": "%K",
            "%K Double Smoothing Periods": "%K Doppelte Glättungszeiträume",
            "%K Periods": "%K Zeiträume",
            "%K Smoothing Periods": "%K Glättungszeiträume",
            "+DI": "+DI",
            "+VI": "+VI",
            "1 D": "1T",
            "1 Hour": "1 Stunde",
            "1 Min": "1 Min",
            "1 Mo": "1 MN",
            "1 Standard Deviation (1σ)": "1 Standard-Abweichung (1σ)",
            "1 W": "1 W",
            "10 Min": "10 Min",
            "10m": "10m",
            "13px": "13px",
            "15 Min": "15 Min",
            "15m": "150m",
            "1D": "1T",
            "1H": "1S",
            "1m": "1m",
            "1M": "1M",
            "1W": "1W",
            "1Y": "1J",
            "2 Standard Deviation (1σ)": "2 Standard-Abweichungen (1σ)",
            "2 Standard Deviation (2σ)": "2 Standard-Abweichungen (1σ)",
            "3 Standard Deviation (1σ)": "3 Standard-Abweichungen (1σ)",
            "3 Standard Deviation (3σ)": "3 Standard-Abweichungen (3σ)",
            "30 Min": "30 Min",
            "30m": "30m",
            "3M": "3M",
            "4 Hour": "4 Stunden",
            "4H": "4S",
            "5 Min": "5 Min",
            "5D": "5T",
            "5m": "5m",
            "5Y": "5Jahre",
            "6M": "6M",
            Abstract: "Kurzdarstellung",
            "Acc Swing": "Acc Oszilation",
            "Accumulation/Distribution": "Accumulation Distribution",
            "Accumulative Swing Index": "ASI",
            Add: "Hinzufügen",
            ADD: "HINZUFÜGEN",
            "Add Stop Loss": "Stop Loss hinzufügen",
            "Add Take Profit": "Take Profit hinzufügen",
            ADX: "ADX",
            "ADX/DMS": "ADX/DMS",
            ALL: "ALLE",
            "All-Time High Lookback Period": "Allzeithoch Beobachtungszeitraum",
            Alligator: "Alligator",
            Annotation: "Anmerkung",
            Arc: "Bogen",
            Aroon: "Aroon",
            "Aroon Down": "Aroon Down",
            "Aroon Osc": "Aroon Osz",
            "Aroon Oscillator": "Aroon Oscillator",
            "Aroon Up": "Aroon Up",
            Arrow: "Pfeil",
            "ATH Lookback Period": "ATH Lookback Periode",
            ATR: "ATR",
            "ATR Bands": "ATR Bänder",
            "ATR Bands Bottom": "ATR Bänder Unten",
            "ATR Bands Channel": "ATR Bänder Channel",
            "ATR Bands Top": "ATR Bänder Oben",
            "ATR Trailing Stop": "ATR Trailing-Stop",
            "ATR Trailing Stops": "ATR Trailing-Stops",
            "Auto Select": "Automatische Wahl",
            Average: "Durchschnitt",
            "Average Line": "Durchschnittslinie",
            "Average True Range": "Average True Range (ATR)",
            "Average Type": "Durchschnittstyp",
            Awesome: "Fantastisch",
            "Awesome Oscillator": "Awesome Oscillator",
            "Axis Label": "Achsenbeschriftung",
            "Axis Label:": "Achsenbeschriftung",
            "Axis Text": "Achsenbeschriftung",
            B: "F",
            Background: "Hintergrund",
            "Background Color": "Hintergrundfarbe",
            "Balance of Power": "Kräfteverhältnis",
            Bandwidth: "Bandbreite",
            Bar: "Balken",
            Bars: "Balken",
            "Bars Color": "Farbige Balken",
            "Base Line": "Basislinie",
            "Base Line Period": "Basislinie Zeitraum",
            Baseline: "Baseline",
            "Baseline Delta": "Veränderung vom Ausgangswert",
            "BATS BZX real-time.": "BATS BZX Echtzeit .",
            Bearish: "Bärisch",
            Beta: "Beta",
            "Beta Callouts Candle Border":
              "Beta Beschriftungen der Kerzengrenze",
            Black: "Schwarz",
            "Boll %b": "Boll %b",
            "Boll BW": "Boll BB",
            "Bollinger %b": "Bollinger %b",
            "Bollinger Bands": "Bollinger-Bänder",
            "Bollinger Bands Bottom": "Bollinger Bänder Unten",
            "Bollinger Bands Median": "Bollinger Bänder Mitte",
            "Bollinger Bands Top": "Bollinger Bänder Oben",
            "Bollinger Bandwidth": "Bollinger Bandbreite",
            Border: "Rand",
            "Bulge Threshold": "Anschwellen des Grenzwerts",
            Bullish: "Bullisch",
            "Buy Stops": "Kauf-Stopps",
            "by Xignite.": "von Xignite.",
            Callout: "Angabe",
            Callouts: "Beschriftungen",
            cancel: "abbrechen",
            Candle: "Kerze",
            "Candle Border": "Kerzenumrandung",
            "Candle Borders": "Kerzen-Ränder",
            "Candle Color": "Kerzenfarbe",
            "Candle Wick": "Kerzendocht",
            Candles: "Kerzen",
            "Center Of Gravity": "Schwerpunkt-Indikator",
            "Chaikin MF": "Chaikin MF",
            "Chaikin Money Flow": "Chaikin Money Flow",
            "Chaikin Vol": "Chaikin Vol",
            "Chaikin Volatility": "Chaikin Volatility",
            "Chande Fcst": "Chande Prog",
            "Chande Forecast Oscillator": "Chande Forecast Oszillator",
            "Chande Momentum Oscillator": "Chande Momentum Oszillator",
            "Chande Mtm": "Chande Dyn",
            "Change Timezone": "Zeitzone ändern",
            Channel: "Kanal",
            "Channel Fill": "Channel Fill",
            Chart: "Darstellung",
            "Chart Preferences": "Charteinstellungen",
            "Chart Scale": "Darstellungsskala",
            "Chart Shared Successfully!": "Chart wurde erfolgreich geteilt!",
            "Chart Style": "Darstellungsstil",
            "Chart Type": "Diagrammtyp",
            Check: "Häkchen",
            "Choose language": "Sprache wählen",
            "Choose Timezone": "Zeitzone wählen",
            "Choppiness Index": "Choppiness-Index",
            Clear: "Löschen",
            "Clear All": "Alle löschen",
            "Clear Drawings": "Deutliche Zeichnungen",
            Close: "Schließen",
            close: "schließen",
            Color: "Farbe",
            "Colored Bar": "Farbiger Balken",
            "Colored Line": "Farbiger Linie",
            COMMODITIES: "ROHSTOFFE",
            "Commodity Channel Index": "Commodity Channel Index",
            Compare: "Vergleichen",
            "Comparison Symbol": "Vergleichssymbol",
            Composite: "Zusammensetzung",
            "Composite RSI": "Zusammengesetzter RSI-Indikator",
            Continuous: "Durchgehend",
            "Conversion Line": "Konversionslinie",
            "Conversion Line Period": "Konversionslinie Zeitraum",
            Coppock: "Coppock",
            "Coppock Curve": "Coppock-Indikator",
            Correl: "Correl",
            Correlation: "Korrelation",
            "Correlation Coefficient": "Korrelationskoeffizient",
            Courier: "Courier",
            Create: "Erstellen",
            "Create a New Custom Theme": "Neues individuelles Layout erstellen",
            "Create Custom Theme": "Benutzerdefinierte Vorlage erstellen",
            "Create Image": "Bild erstellen",
            Cross: "Kreuz",
            Crosshair: "Fadenkreuz",
            Crosshairs: "Fadenkreuze",
            Crossline: "Kreuzlinie",
            CURRENCIES: "DEVISEN",
            "Current Studies": "Aktuelle Studien",
            "Current Symbols": "Aktuelle Symbole",
            "Current TimeZone is": "Ihre aktuelle Zeitzone ist",
            "Custom Themes": "Individuelle Layouts",
            "Cycle 1": "Zyklus 1",
            "Cycle 2": "Zyklus 2",
            "Cycle 3": "Zyklus 3",
            D: "T",
            daily: "täglich",
            Darvas: "Darvas",
            "Darvas Box": "Darvas-Box",
            "Data delayed 15 min.": "Daten verzögert 15 min.",
            "Data is randomized.": "Daten randomisiert.",
            "Data is real-time.": "Die Daten werden in Echtzeit.",
            "Date Dividers": "Datumsverteiler",
            "Date/Time": "Datum/Uhrzeit",
            "Date/Time:": "Datum/Uhrzeit:",
            Day: "Tag",
            "Days Per Year": "Tage pro Jahr",
            "Decreasing Bar": "Abnehmender Balken",
            Default: "Standard",
            "Default Themes": "Standardlayouts",
            Delete: "Löschen",
            "Delete Study": "Studien löschen",
            "Demo data.": "Demo-Daten.",
            Detrended: "Trendbereinigt",
            "Detrended Price Oscillator": "Detrended Price Oszillator",
            Directional: "Ausgerichtet",
            "Disparity Index": "Disparitäts-Index",
            Display: "Anzeige",
            "Display 1 Standard Deviation (1σ)":
              "1 Standard-Abweichung (1σ) anzeigen",
            "Display 2 Standard Deviation (2σ)":
              "2 Standard-Abweichungen (1σ) anzeigen",
            "Display 3 Standard Deviation (3σ)":
              "3 Standard-Abweichungen (1σ) anzeigen",
            "Display Average": "Durchschnitt anzeigen",
            "Distance(%)": "Distanz(%)",
            Divergence: "Abweichung",
            "Don't see your study below? Type in your search here.":
              "Können Sie die unten angeführte Studie nicht sehen? Geben Sie hier Ihre Suche ein.",
            "Donchian Channel": "Donchian Channel",
            "Donchian High": "Donchian hoch",
            "Donchian Low": "Donchian niedr.",
            "Donchian Median": "Donchian mittel",
            "Donchian Width": "Donchian Width",
            Done: "Fertig",
            Doodle: "Freiform",
            "Double Exponential": "Doppelt exponentiell",
            "Double Smoothing Period": "Doppelter Glättungszeitraum",
            "Down Volume": "Weniger Volume",
            Downtrend: "Abwärtstrend",
            Draw: "Zeichnen",
            "Ease of Movement": "Ease of Movement",
            Edit: "Bearbeiten",
            "Edit Settings...": "Einstellungen bearbeiten",
            EF: "EF",
            "EF Trigger": "EF Auslöser",
            "Ehler Fisher": "Ehler Fisher",
            "Ehler Fisher Transform": "Ehler Fisher Transform",
            "Elder Bear Power": "Elder Bear Power",
            "Elder Bull Power": "Elder Bull Power",
            "Elder Force": "Elder Force",
            "Elder Force Index": "Elder Force Index",
            "Elder Impulse System": "Elder Impulse System",
            "Elder Ray Index": "Elder Ray",
            Ellipse: "Ellipse",
            ema: "ema",
            "End of day data.": "Daten von dem Ende des Tages.",
            'Enter box size and hit "Enter"':
              "Boxgröße eingeben und „Eingabetaste“ drücken",
            "Enter name of view:": "Name der Vorlage eingeben:",
            'Enter reversal and hit "Enter"':
              "Stornierung eingeben und „Eingabetaste“ drücken",
            "Enter Symbol": "Symbol eingeben",
            'Enter value and hit "Enter"':
              "Wert eingeben und „Eingabetaste“ drücken",
            Events: "Ereignisse",
            "Exit Field": "Ausstiegsfeld",
            Exponential: "Exponentiell",
            "Extended Hours": "Erweiterte Zeiten",
            Fade: "Schwächer",
            Fake: "Falsch",
            Fan: "Fächer-Chart",
            Fast: "Schnell",
            "Fast MA Period": "Schnelle MA-Periode",
            "Fib Arc": "Fib Arc",
            "Fib Fan": "Fib Fan",
            "Fib Time Zone": "Fib Zeitzonen",
            Fibonacci: "Fibonacci",
            fibonacci: "Fibonacci",
            Field: "Feld",
            field: "Feld",
            Fill: "Füllung",
            "Focus Arrow": "Fokus-Pfeil",
            Forecast: "Prognose",
            FOREX: "DEVISEN",
            "Formula courtesy": "Formel dank",
            "Fractal Channel": "Fraktal Channel",
            "Fractal Chaos": "Fraktal Chaos",
            "Fractal Chaos Bands": "Fractal Chaos Bänder",
            "Fractal Chaos Oscillator": "Fractal Chaos Oszillator",
            "Fractal High": "Fraktal hoch",
            "Fractal Low": "Fraktal niedrig",
            FUNDS: "FONDS",
            FUTURES: "FUTURES",
            FX: "FX",
            Gain: "Gewinn",
            "Gann Fan": "Gann Fan",
            Garamond: "Garamond",
            Gartley: "Gartley",
            Gator: "Gator",
            "Gator Oscillator": "Gator Oszillator",
            "Generating Image": "Bild generieren",
            Ghost: "Ghost",
            "Ghost Boxes": "Ghost-Boxes",
            Gopala: "Gopala",
            "Gopalakrishnan Range Index": "Gopalakrishnan Range Index",
            Gradient: "Steigung",
            Green: "Grün",
            "Grid Lines": "Gitterlinien",
            H: "Std",
            harmonic: "harmonisch",
            Heart: "Herz",
            "Heaviest Rate of Change Period":
              "Höchster Kurs des Änderungszeitraums",
            "Heaviest SMA Period":
              "Höchster Kurs während des einfachen gleitenden Durchschnittszeitraums",
            "Heavy Rate of Change Period": "Hoher Kurs des Änderungszeitraums",
            "Heavy SMA Period":
              "Hoher Kurs während des einfachen gleitenden Durchschnittszeitraums",
            "Heikin Ashi": "Heikin Ashi",
            "Heikin-Ashi": "Heikin-Ashi",
            Helvetica: "Helvetica",
            "HHV/LLV Lookback": "HHV/LLV LookBack",
            High: "Hoch",
            "High Low": "Hoch-Niedrig",
            "High Low Bands": "Hoch-Niedrig-Bänder",
            "High Low Bottom": "Hoch-Niedrig Unten",
            "High Low Median": "Hoch-Niedrig Mitte",
            "High Low Top": "Hoch-Niedrig Oben",
            "High Minus Low": "Hoch-Minus-Niedrig",
            "High Period": "Hoher Zeitraum",
            "High-Low": "Hoch-Niedrig",
            "high/low": "Hoch/Tief",
            "Highest High Value": "Höchster hoher Wert",
            HighLow: "HochNiedrig",
            "Hist Vol": "Hist. Vol.",
            Histogram: "Histogramm",
            "Historical Volatility": "Historische Volatilität",
            "Hollow Candle": "Hohl Kerze",
            Horizontal: "Horizontal",
            Hull: "Hülle",
            I: "K",
            "Ichimoku Clouds": "Ichimoku-Charts",
            "Increasing Bar": "Zunehmender Balken",
            Index: "Index",
            INDEXES: "INDIZES",
            INDICES: "INDIZES",
            Info: "Info",
            Intercept: "Unterbrechung",
            Interval: "Intervall",
            "Intraday Momentum Index": "Intraday Momentum Index",
            "Intraday Mtm": "Intraday Dyn",
            Jaw: "Jaw",
            "Jaw Offset": "Jaw Ausgleich",
            "Jaw Period": "Jaw Zeitraum",
            Kagi: "Kagi",
            Keltner: "Keltner",
            "Keltner Bottom": "Keltner Unten",
            "Keltner Channel": "Keltner Channel",
            "Keltner Median": "Keltner Mitte",
            "Keltner Top": "Keltner Oben",
            Klinger: "Klinger",
            "Klinger Volume Oscillator": "Klinger Volume Oszillator",
            KlingerSignal: "KlingerSignal",
            KST: "KST",
            KSTSignal: "KSTSignal",
            "Lagging Span": "Lagging Span",
            "Lagging Span Period": "Lagging Span Zeitraum",
            "Leading Span A": "Leading Span A",
            "Leading Span B": "Leading Span B",
            "Leading Span B Period": "Leading Span B Zeitraum",
            "Level Offset": "Niveau-Ausgleich",
            Levels: "Niveaus",
            "Light Rate of Change Period":
              "Niedriger Kurs während des Änderungszeitraums",
            "Light SMA Period":
              "Niedriger Kurs während des einfachen gleitenden Durchschnittszeitraums",
            "Lightest Rate of Change Period":
              "Niedrigster Kurs des Änderungszeitraums",
            "Lightest SMA Period":
              "Niedrigster Kurs während des einfachen gleitenden Durchschnittszeitraums",
            "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.":
              "Wie alle ChartIQ-Marker wird das Objekt selbst vom Chart verwaltet. Wenn Sie also im Chart scrollen, bewegt sich das Objekt mit Ihnen. Es wird auch automatisch für Sie zerstört, wenn das Symbol geändert wird.",
            "Limit Move Value": "Limit Move Value",
            "Lin Fcst": "Lin Prog",
            "Lin Incpt": "Lin Unterbr",
            "Lin R2": "Lin R2",
            Line: "Linie",
            "Line Break": "Leitungsbruch",
            "Line/Bar Chart": "Linien- und Barchart",
            "Linear Reg Forecast": "Lineare Regression Prognose",
            "Linear Reg Intercept": "Lineare Reg Unterbrechung",
            "Linear Reg R2": "Lineare Reg R2",
            "Linear Reg Slope": "Lineare Reg Steigung",
            Lips: "Lips",
            "Lips Offset": "Lips Ausgleich",
            "Lips Period": "Lips Zeitraum",
            Locale: "lokalisieren",
            "Log Scale": "Log-Skala",
            "Long Cycle": "Kauf Zyklus",
            "Long RoC": "Kauf RoC",
            Loss: "Verlust",
            Low: "Tief",
            "Low Period": "Niedr. Zeitraum",
            "Lowest Low Value": "Niedrigster niedriger Wert",
            "LR Slope": "LR Steigung",
            M: "MN",
            "M Flow": "M Fluss",
            MA: "MA",
            ma: "M/A",
            "MA Env": "MA Env",
            "MA Env Bottom": "MA Env Unten",
            "MA Env Median": "MA Env Mitte",
            "MA Env Top": "MA Env Oben",
            "MA Period": "MA-Zeitraum",
            MACD: "MACD",
            "Market Data": "Marktdaten",
            "Market Facilitation Index": "Market Facilitation Index",
            "Mass Idx": "Masse Idx",
            "Mass Index": "Masse-Index",
            "Maximum AF": "Maximum AF",
            mean: "Mittelwert",
            Measure: "Messen",
            "Med Price": "mit. Preis",
            median: "Median",
            "Median Price": "Mittlerer Preis",
            "Min Tick Value": "Min Tick-Wert",
            "Minimum AF": "Minimum AF",
            Momentum: "Dynamik",
            "Momentum Indicator": "Momentum-Indikator",
            "Money Flow Index": "Geldfluss-Index",
            More: "Mehr",
            "More studies": "Weitere Studien",
            Mountain: "Berg",
            "Mountain Charts": "Berg-Diagramme",
            "Mountain Color": "Farbe der Spitzen",
            "Moving Average": "Gleitender Mittelwert",
            "Moving Average Deviation": "Moving Average Abweichung",
            "Moving Average Envelope": "Moving Average Envelope",
            "Moving Average Type": "Art des gleitenden Mittelwerts",
            ms: "Ms",
            Multiplier: "Multiplikator",
            Name: "Name",
            "Neg Vol": "Neg Vol",
            "Negative Bar": "Negativer Balken",
            "Negative Volume Index": "Negative Volume Index",
            Neutral: "Neutral",
            "New Custom Theme": "Neue individuelle Layouts",
            "New Theme": "Neues Thema",
            "New Theme Name": "Neuer Layoutname",
            "New Theme Name:": "Neuer Themenname:",
            Night: "Nacht",
            None: "Keine",
            "None available": "Nicht verfügbar",
            "Not enough data to compute": "Nicht genügend Daten zum Berechnen",
            Offset: "Ausgleich",
            "On Bal Vol": "Saldo Vol",
            "On Balance Volume": "On Balance Volume",
            Open: "Eröffnung",
            "Open shared chart in new window":
              "Geteilten Chart in neuem Fenster öffnen",
            or: "oder",
            OverBought: "Überkauft",
            Overlay: "Überlagern",
            OverSold: "Überverkauft",
            "P Rel": "P Rel",
            Palatino: "Palatino",
            "Parabolic SAR": "Parabolic SAR",
            Percent: "Prozent",
            percent: "Prozent",
            "Perf Idx": "Perf Idx",
            "Performance Index": "Performance-Index",
            Period: "Periode",
            pips: "Pips",
            Pitchfork: "Gabel-Chart",
            Pivot: "Drehpunkt",
            "Pivot Points": "Drehpunkte",
            "Plot Type": "Darstellungsart",
            PMO: "PMO",
            PMOSignal: "PMOSignal",
            "Point & Figure": "Point & Figure",
            Points: "Punkte",
            points: "Punkte",
            "Points Or Percent": "Punkte oder Prozent",
            "Popular Studies": "Populäre Studien",
            "Pos Vol": "Pos Vol",
            "Positive Bar": "Positiver Balken",
            "Positive Volume Index": "Positive Volume Index",
            "Press this button to generate a shareable image:":
              "Drücken Sie diese Taste, um ein teilbares Bild zu erzeugen:",
            "Pretty Good": "Ziemlich gut",
            "Pretty Good Oscillator": "Ziemlich guter Oszillator",
            Price: "Preis",
            "Price Minimum": "Preisuntergrenze",
            "Price Momentum Oscillator": "Preis-Oszillator",
            "Price Osc": "Preis Osz",
            "Price Oscillator": "Preis-Oszillator",
            "Price Rate of Change": "Preis Änderungsquote",
            "Price Relative": "Relativer Preis",
            "Price ROC": "Preis ROC",
            "Price Vol": "Preis Vol",
            "Price Volume Trend": "Preis-Volumen-Trend",
            "Prime Bands Bottom": "Prime Bänder Unten",
            "Prime Bands Channel": "Prime Bänder Channel",
            "Prime Bands Top": "Prime Bänder Oben",
            "Prime Number": "Prime Anzahl",
            "Prime Number Bands": "Primzahl-Bänder",
            "Prime Number Oscillator": "Primzahl-Oszillator",
            "Pring's Know Sure Thing": "Pring's Know Sure Thing",
            "Pring's Special K": "Pring's Special K",
            "Psychological Line": "Psychologische Linie",
            QStick: "QStick",
            "Quadrant Lines": "Quadrant-Linien",
            "Rainbow Moving Average": "Rainbow - gleitender Durchschnitt",
            "Rainbow Oscillator": "Rainbow-Oszillator",
            "Random Walk": "Random Walk",
            "Random Walk High": "Random Walk Hoch",
            "Random Walk Index": "Random Walk Index",
            "Random Walk Low": "Random Walk Tief",
            "Range Bars": "Balken-Bandbreite",
            "Range Selector": "Wählknopf für Bereich",
            "Rate Of Change": "Änderungsquote",
            RAVI: "RAVI",
            Ray: "Strahl",
            Rectangle: "Rechteck",
            Redo: "Wiederherstellen",
            "Regression Line": "Regressionslinie",
            "Rel Vig": "Rel Vig",
            "Rel Vol": "Rel Vol",
            "Relative Vigor Index": "Relative Vigor Index",
            "Relative Volatility": "Relative Volatilität",
            RelVigSignal: "RelVigSignal",
            Renko: "Renko",
            "Resistance 1": "Widerstand 1",
            "Resistance 2": "Widerstand 2",
            "Resistance 3": "Widerstand 3",
            Result: "Ergebnis",
            Retracement: "Rückverfolgung",
            "right-click to delete": "Rechts klicken um zu löschen",
            "right-click to manage": "Rechts klicken um zu verwalten",
            "Risk/Reward": "Risiko/Chance",
            RSI: "RSI",
            RSquared: "RSquared",
            s: "Sec",
            save: "speichern",
            Save: "Speichern",
            "Save Theme": "Speichern",
            "Save View": "Ansicht speichern",
            "Saved View": "Gespeicherte Ansicht",
            "Saved Views": "Gespeicherte Vorlagen",
            "Scale Factor": "Skalierungsfaktor",
            Schaff: "Schaff",
            "Schaff Trend Cycle": "Schaff Trend-Zyklus",
            Search: "Suchen",
            Segment: "Segment",
            "Select Tool": "Werkzeug",
            "Sell Stops": "Verkauf-Stopps",
            Series: "Reihen",
            "Set Point & Figure Parameters":
              "Point & Figure Parameter festlegen",
            "Set Price Lines": "Preislinien festlegen",
            "Set Range": "Range festlegen",
            "Set Reversal Percentage": "Prozentuale Umkehr festlegen",
            Settings: "Einstellungen",
            Shading: "Schattierung",
            Shape: "Form",
            "Shape - Arrow": "Form - Pfeil",
            "Shape - Check": "Form - Karo",
            "Shape - Cross": "Form - Kreuz",
            "Shape - Focus": "Form - Fokus",
            "Shape - Heart": "Form - Herz",
            "Shape - Star": "Form - Stern",
            Share: "Teilen",
            "Share This Chart": "Dieses Diagramm teilen",
            "Share Your Chart": "Chart teilen",
            Shift: "Verschieben",
            "Shift Percentage": "Prozentsatz verschieben",
            "Shift Type": "Verschiebungsart",
            "Shinohara Intensity Ratio": "Shinohara Intensitätsverhältnis",
            "Short Cycle": "Kurzer Zyklus",
            "Short RoC": "Verkauf RoC",
            "Show All": "Alle anzeigen",
            "Show Fractals": "Fraktale anzeigen",
            "Show Zones": "Zonen anzeigen",
            Signal: "Signal",
            "Signal Period": "Signal-Periode",
            "Signal Periods": "Signal-Perioden",
            Simple: "Einfach",
            "Simple Circle": "Einfacher Kreis",
            "Simple Square": "Einfaches Quadrat",
            "Simulated data.": "Simulierte Daten.",
            Slope: "Steigung",
            Slow: "Langsam",
            "Slow MA Period": "Langsame MA-Periode",
            SMA1: "SMA1",
            SMA10: "SMA10",
            SMA2: "SMA2",
            SMA3: "SMA3",
            SMA4: "SMA4",
            SMA5: "SMA5",
            SMA6: "SMA6",
            SMA7: "SMA7",
            SMA8: "SMA8",
            SMA9: "SMA9",
            Smooth: "Glatt",
            "Smoothing Period": "Glättungszeitraum",
            "Speed Resistance Arc": "Speed Widerstand Arc",
            "Speed Resistance Line": "Speed Widerstandslinie",
            SPY: "SPION",
            Squarewave: "Rechteck",
            squarewave: "Rechteck",
            Squat: "Kompakt",
            standard: "Standard",
            "Standard Deviation": "Standardabweichung",
            "Standard Deviations": "Standardabweichungen",
            Star: "Stern",
            "STARC Bands": "STARC-Bänder",
            "STARC Bands Bottom": "STARC-Bänder Min",
            "STARC Bands Median": "STARC-Bänder Mittel",
            "STARC Bands Top": "STARC-Bänder Max",
            "Stch Mtm": "Stch Dyn",
            "STD Dev": "STD Abw",
            "STD Period": "STD Zeitraum",
            "Stochastic Momentum Index": "Stochastic Momentum Index",
            Stochastics: "Stochastik",
            STOCKS: "AKTIEN",
            "Stop Levels": "Stopp-Niveaus",
            "Stop Loss": "Stop Loss",
            Stops: "Stopps",
            "Strong Ratio": "Hohe Quote",
            Studies: "Studien",
            Study: "Studien",
            Supertrend: "Supertrend",
            "Support 1": "Unterstützung 1",
            "Support 2": "Unterstützung 2",
            "Support 3": "Unterstützung 3",
            Swing: "Oszillation",
            "Swing Index": "Oszillation-Index",
            Symbol: "Symbol",
            T: "Tick",
            "Take Profit": "Take Profit",
            Teeth: "Teeth",
            "Teeth Offset": "Teeth Ausgleich",
            "Teeth Period": "Teeth Zeitraum",
            Themes: "Themen",
            "This is a callout marker":
              "Dies ist ein Markierstift für Beschriftungen",
            "This is an example of a complex marker which can contain html, video, images, css, and animations.":
              "Dies ist ein Beispiel für eine komplexe Markierung, die html, Videos, Bilder, CSS und Animationen enthalten kann.",
            TII: "TII",
            "Time Cycle": "Zykluszeit",
            "Time Fcst": "Zeit Prog",
            "Time Series": "Zeitfolgen",
            "Time Series Forecast": "Zeitreihenanalyse",
            "Time Zone": "Zeitzone",
            "Times New Roman": "Times New Roman",
            Timezone: "Zeitzone",
            "Tirone Levels": "Tirone Niveaus",
            "To set your timezone use the location button below or scroll through the following list":
              "Zur Einstellung Ihrer Zeitzone können Sie unten auf die die Standort-Schaltfläche klicken oder durch die folgende Liste scrollen",
            "To set your timezone use the location button below, or scroll through the following list...":
              "Um Ihre Zeitzone einzustellen, benutzen Sie bitte die unten angeführten Standorttaste oder scrollen Sie durch die folgende Liste…",
            "Tolerance Percentage": "Toleranzprozentsatz",
            "Trade Vol": "Handelsvol",
            "Trade Volume Index": "Handelsvolumen-Index",
            "Trend Intensity Index": "Trendidensitätsindex",
            Triangular: "Dreieckig",
            "Triple Exponential": "Dreifach exponentiell",
            TRIX: "TRIX",
            "True Range": "True Range",
            Twiggs: "Twiggs",
            "Twiggs Money Flow": "Twiggs Money Flow",
            Type: "Art",
            "Typical Price": "Typischer Preis",
            "Ulcer Index": "Ulcer-Index",
            Ultimate: "Zuletzt",
            "Ultimate Oscillator": "Ultimate Oscillator",
            Underlay: "Grundlage",
            Undo: "Rückgängig machen",
            Units: "Einheiten",
            "Unrealized Gain/Loss": "Nicht realisierter Gewinn/Verlust",
            "Up Volume": "Mehr Volumen",
            "Uploading Image": "Bild hochladen",
            Uptrend: "Aufwärtstrend",
            "Use My Current Location": "Meinen aktuellen Standort verwenden",
            "Use the following link to share your chart:":
              "Verwenden Sie den nachfolgenden Link\\u002c um Ihren Chart zu teilen",
            "Use Volume": "Ausnutzen Volume",
            "Valuation Lines": "Bewertungslinien",
            Variable: "Variabel",
            Vchart: "Vchart",
            vdma: "Vdma",
            Vertical: "Vertikal",
            "Vertical Horizontal Filter": "Vertical Horizontal Filter",
            VIDYA: "VIDYA",
            Views: "Vorlagen",
            Vol: "Vol",
            "Vol Osc": "Vol Osz",
            "vol profile": "vol Profil",
            "Vol ROC": "Vol ROC",
            "vol undr": "vol undr",
            Volume: "Volumen",
            "Volume % of Avg": "Volumen in % des Durchschnitts",
            "Volume Candle": "Volumen Kerzenchart",
            "Volume Chart": "Volumen-Chart",
            "Volume Not Available": "Volume nicht verfügbar",
            "Volume Oscillator": "Volume Oscillator",
            "Volume Profile": "Volumen Profil",
            "Volume Rate of Change": "Volumen Änderungsquote",
            "Volume Spike": "Volumen Höchstwert",
            "Volume Underlay": "Volumen-Underlay",
            "Vortex Indicator": "Vortek Indikator",
            "VT HZ Filter": "VT HZ Filter",
            VWAP: "VWAP",
            W: "W",
            "W Acc Dist": "W Acc Dist",
            "Weak Ratio": "Schwache Quote",
            weekly: "wöchentlich",
            Weighted: "Gewichtet",
            "Weighted Close": "Gewichteter Abschluss",
            "Welles Wilder": "Welles Wilder",
            White: "Weiß",
            "Williams %R": "Williams %R",
            "Your timezone is your current location":
              "Ihre Zeitzone ist Ihr aktueller Standort",
            YTD: "YTD",
            ZigZag: "ZickZack",
            "3 Min": ",",
            "3m": ",",
          },
          hu: {
            "-DI": "-DI",
            "-VI": "-VI",
            "(Scroll for more options)":
              "(További lehetőségeket a legördülő listában talál)",
            "(UTC-01:00) Azores": "(UTC-01:00) Azori-szigetek",
            "(UTC-01:00) Cape Verde Islands": "(UTC-01:00) Zöld-foki szigetek",
            "(UTC-02:00) Mid-Atlantic": "(UTC-02:00) Közép-atlanti",
            "(UTC-03:00) Buenos Aires": "(UTC-03:00) Buenos Aires",
            "(UTC-03:00) Montevideo": "(UTC-03:00) Montevideo",
            "(UTC-03:00) Punta Arenas": "(UTC-03:00) Punta Arenas",
            "(UTC-03:00) Sao Paulo": "(UTC-03:00) Sao Paulo",
            "(UTC-03:30) Newfoundland and Labrador":
              "(UTC-03:30) Új-Foundland és Labrador",
            "(UTC-04:00) Asuncion": "(UTC-04:00) Asuncion",
            "(UTC-04:00) Atlantic Time (Canada)":
              "(UTC-04:00) Atlanti idő (Kanada)",
            "(UTC-04:00) Caracas": "(UTC-04:00) Caracas",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
            "(UTC-04:00) Santiago": "(UTC-04:00) Santiago",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "(UTC-05:00) Bogota, Lima, Quito, Rio Branco",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "(UTC-05:00) Keleti parti idő (USA és Kanada)",
            "(UTC-05:00) Indiana (East)": "(UTC-05:00) Indiana (Kelet)",
            "(UTC-06:00) Central America": "(UTC-06:00) Közép-Amerika",
            "(UTC-06:00) Central Time (US and Canada)":
              "(UTC-06:00) Középidő (USA és Kanada)",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "(UTC-06:00) Guadalajara, Mexikóváros, Monterrey",
            "(UTC-06:00) Saskatchewan": "(UTC-06:00) Saskatchewan",
            "(UTC-07:00) Arizona": "(UTC-07:00) Arizona",
            "(UTC-07:00) Chihuahua, Mazatlan":
              "(UTC-07:00) Chihuahua, Mazatlan",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "(UTC-07:00) Helyvidéki idő (USA és Kanada)",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "(UTC-08:00) Csendes-óceáni idő (USA és Kanada)",
            "(UTC-08:00) Tijuana": "(UTC-08:00) Tijuana",
            "(UTC-09:00) Alaska": "(UTC-09:00) Alaszka",
            "(UTC-10:00) Hawaii": "(UTC-10:00) Hawaii",
            "(UTC-11:00) American Samoa, Midway Island":
              "(UTC-11:00) Amerikai Szamoa, Midway-sziget",
            "(UTC) Casablanca": "(UTC) Casablanca",
            "(UTC) Dublin": "(UTC) Dublin",
            "(UTC) Lisbon, London": "(UTC) Lisszabon, London",
            "(UTC) Greenwich Mean Time, Reykjavik":
              "(UTC) Greenwich-i középidő, Reykjavík",
            "(UTC+01:00) Algiers, Tunis": "(UTC+01:00) Algír, Tunisz",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "(UTC+01:00) Amszterdam, Berlin, Bern, Róma, Stockholm, Bécs",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "(UTC+01:00) Belgrád, Pozsony, Budapest, Ljubljana, Prága",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "(UTC+01:00) Brüsszel, Koppenhága, Madrid, Párizs",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "(UTC+01:00) Szarajevó, Skopje, Varsó, Zágráb",
            "(UTC+02:00) Athens, Bucharest": "(UTC+02:00) Athén, Bukarest",
            "(UTC+02:00) Cairo": "(UTC+02:00) Kairó",
            "(UTC+02:00) Cyprus": "(UTC+02:00) Ciprus",
            "(UTC+02:00) Harare, Johannesburg":
              "(UTC+02:00) Harare, Johannesburg",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "(UTC+02:00) Helsinki, Kijev, Riga, Szófia, Tallinn, Vilnius",
            "(UTC+02:00) Jerusalem": "(UTC+02:00) Jeruzsálem",
            "(UTC+02:00) Kaliningrad": "(UTC+02:00) Kalinyingrád",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "(UTC+03:00) Bagdad, Kuvait, Katar, Rijád",
            "(UTC+03:00) Istanbul": "(UTC+03:00) Isztambul",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "(UTC+03:00) Minszk, Moszkva, Kirov, Volgográd",
            "(UTC+03:00) Nairobi": "(UTC+03:00) Nairobi",
            "(UTC+03:00) Simferopol": "(UTC+03:00) Szimferopol",
            "(UTC+03:30) Tehran": "(UTC+03:30) Teherán",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "(UTC+04:00) Asztrahán, Szamara, Szaratov, Uljanovszk",
            "(UTC+04:00) Baku": "(UTC+04:00) Baku",
            "(UTC+04:00) Dubai, Muscat": "(UTC+04:00) Dubaj, Maszkat",
            "(UTC+04:30) Kabul": "(UTC+04:30) Kabul",
            "(UTC+05:00) Karachi, Tashkent": "(UTC+05:00) Karacsi, Taskent",
            "(UTC+05:00) Yekaterinburg": "(UTC+05:00) Jekatyerinburg",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "(UTC+05:30) Csennai, Kalkutta, Mumbai, Új-Delhi",
            "(UTC+05:45) Kathmandu": "(UTC+05:45) Katmandu",
            "(UTC+06:00) Almaty": "(UTC+06:00) Almati",
            "(UTC+06:00) Astana, Dhaka": "(UTC+06:00) Asztana, Dakka",
            "(UTC+06:00) Omsk": "(UTC+06:00) Omszk",
            "(UTC+06:30) Yangon": "(UTC+06:30) Jangon",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "(UTC+07:00) Bangkok, Dzsakarta, Vietnam",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "(UTC+07:00) Barnaul, Novoszibirszk, Tomszk",
            "(UTC+07:00) Hovd": "(UTC+07:00) Hovd",
            "(UTC+07:00) Krasnoyarsk": "(UTC+07:00) Krasznojarszk",
            "(UTC+07:00) Novokuznetsk": "(UTC+07:00) Novokuznyetszk",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "(UTC+08:00) Peking, Csungking, Hongkong SAR",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "(UTC+08:00) Brunei, Kuala Lumpur, Szingapúr",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "(UTC+08:00) Csojbalszan, Ulánbátor",
            "(UTC+08:00) Irkutsk": "(UTC+08:00) Irkutszk",
            "(UTC+08:00) Manila, Taipei": "(UTC+08:00) Manila, Taipei",
            "(UTC+08:00) Perth": "(UTC+08:00) Perth",
            "(UTC+08:45) Eucla": "(UTC+08:45) Eucla",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "(UTC+09:00) Csita, Khandyga, Jakutszk",
            "(UTC+09:00) Osaka, Sapporo, Tokyo":
              "(UTC+09:00) Oszaka, Szapporo, Tokió",
            "(UTC+09:00) Pyongyang": "(UTC+09:00) Phenjan",
            "(UTC+09:00) Seoul": "(UTC+09:00) Szöul",
            "(UTC+09:30) Adelaide": "(UTC+09:30) Adelaide",
            "(UTC+09:30) Darwin": "(UTC+09:30) Darwin",
            "(UTC+10:00) Brisbane": "(UTC+10:00) Brisbane",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "(UTC+10:00) Canberra, Melbourne, Sydney",
            "(UTC+10:00) Guam, Port Moresby": "(UTC+10:00) Guam, Port Moresby",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "(UTC+10:00) Ust-Nera, Vlagyivosztok",
            "(UTC+11:00) Magadan": "(UTC+11:00) Magadan",
            "(UTC+11:00) Noumea, Solomon Islands":
              "(UTC+11:00) Noumea, Salamon-szigetek",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "(UTC+11:00) Szahalin, Szrednyekolimszk",
            "(UTC+12:00) Anadyr, Kamchatka": "(UTC+12:00) Anadir, Kamcsatka",
            "(UTC+12:00) Auckland, Wellington":
              "(UTC+12:00) Auckland, Wellington",
            "(UTC+12:45) Chatham": "(UTC+12:45) Chatham",
            "(UTC+13:00) Samoa": "(UTC+13:00) Szamoa",
            "(UTC+13:00) Tonga": "(UTC+13:00) Tonga",
            "(UTC+14:00) Kiritimati": "(UTC+14:00) Kiritimati",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "%D mozgóátlag típus",
            "%D Periods": "%D időszakok",
            "%K": "%K",
            "%K Double Smoothing Periods": "%K dupla kiegyenlítő időszakok",
            "%K Periods": "%K Időszakok",
            "%K Smoothing Periods": "%K kiegyenlítő időszakok",
            "+DI": "+DI",
            "+VI": "+VI",
            "1 D": "1 N",
            "1 Hour": "1 óra",
            "1 Min": "1 perc",
            "1 Mo": "1 Hó",
            "1 Standard Deviation (1σ)": "1 normál eltérés (1σ)",
            "1 W": "1 Hé",
            "10 Min": "10 perc",
            "10m": "10p",
            "13px": "13px",
            "15 Min": "15 perc",
            "15m": "15p",
            "1D": "1N",
            "1H": "1óra",
            "1m": "1p",
            "1M": "1hó",
            "1W": "1Hé",
            "1Y": "1é",
            "2 Standard Deviation (1σ)": "2  normál eltérés (1σ)",
            "2 Standard Deviation (2σ)": "2  normál eltérés (2σ)",
            "3 Standard Deviation (1σ)": "3  normál eltérés (1σ)",
            "3 Standard Deviation (3σ)": "3  normál eltérés (3σ)",
            "30 Min": "30 Perc",
            "30m": "30p",
            "3M": "3hó",
            "4 Hour": "4 óra",
            "4H": "4óra",
            "5 Min": "5 perc",
            "5D": "5N",
            "5m": "5p",
            "5Y": "5é",
            "6M": "6 hó",
            Abstract: "Kivonat",
            "Acc Swing": "Felhalm Swing",
            "Accumulation/Distribution": "Accumulation Distribution",
            "Accumulative Swing Index": "Felhalmozódó Swing Index",
            Add: "Hozzáadás",
            ADD: "ADD",
            "Add Stop Loss": "Stop loss hozzáadása",
            "Add Take Profit": "Profitfelvétel hozzáadása",
            ADX: "ADX",
            "ADX/DMS": "ADX/DMS",
            ALL: "ÖSSZES",
            "All-Time High Lookback Period":
              "Mindenkori magas számú visszatekintési időszak",
            Alligator: "Alligátor",
            Annotation: "Magyarázat",
            Arc: "Ív",
            Aroon: "Aroon",
            "Aroon Down": "Aroon lefelé",
            "Aroon Osc": "Aroon oszc.",
            "Aroon Oscillator": "Aroon oszcillátor",
            "Aroon Up": "Aroon felfelé",
            Arrow: "Nyíl",
            "ATH Lookback Period": "ATH visszatekintési időszak",
            ATR: "ATR",
            "ATR Bands": "ATR szalagok",
            "ATR Bands Bottom": "ATR szalagok alsó pontja",
            "ATR Bands Channel": "ATR szalagok Channel",
            "ATR Bands Top": "ATR szalagok csúcsa",
            "ATR Trailing Stop": "ATR Trailing Stop (ATR csúszó stop megbízás)",
            "ATR Trailing Stops":
              "ATR Trailing Stops (ATR csúszó stop megbízások)",
            "Auto Select": "Automatikus kiválasztás",
            Average: "Átlag",
            "Average Line": "Átlagvonal",
            "Average True Range": "Average True Range (átlagos igaz tartomány)",
            "Average Type": "Átlag típusa",
            Awesome: "Remek",
            "Awesome Oscillator": "Awesome oszcillátor",
            "Axis Label": "Tengelycímke",
            "Axis Label:": "Tengelycímke:",
            "Axis Text": "Tengely szövege",
            B: "F",
            Background: "Háttér",
            "Background Color": "Háttérszín",
            "Balance of Power": "Erőegyensúly",
            Bandwidth: "Szalagszélesség",
            Bar: "Sáv",
            Bars: "Barok",
            "Bars Color": "Sávszínek",
            "Base Line": "Alapvonal",
            "Base Line Period": "Alapvonal időszak",
            Baseline: "Alapvonal",
            "Baseline Delta": "Változás a kiindulási értékhez képest",
            "BATS BZX real-time.": "BATS BZX valós időben.",
            Bearish: "Medve",
            Beta: "Beta",
            "Beta Callouts Candle Border": "Béta ábrafeliratok gyertyaszegély",
            Black: "Fekete",
            "Boll %b": "Boll %b",
            "Boll BW": "Boll sz.sz.",
            "Bollinger %b": "Bollinger %b",
            "Bollinger Bands": "Bollinger szalagok",
            "Bollinger Bands Bottom": "Bollinger szaagok alsó pont",
            "Bollinger Bands Median": "Bollinger szalagok közép",
            "Bollinger Bands Top": "Bollinger szalagok csúcs",
            "Bollinger Bandwidth": "Bollinger szalagszélesség",
            Border: "Szegély",
            "Bulge Threshold": "Kiugró határérték",
            Bullish: "Bika",
            "Buy Stops": "Stopok vétele",
            "by Xignite.": "által Xignite.",
            Callout: "Kihívás",
            Callouts: "Ábrafeliratok",
            cancel: "mégse",
            Candle: "Gyertya",
            "Candle Border": "Gyertyaszegély",
            "Candle Borders": "Gyertyaszegélyek",
            "Candle Color": "Gyertya színe",
            "Candle Wick": "Gyertyakanóc",
            Candles: "Gyertyák",
            "Center Of Gravity": "Center Of Gravity",
            "Chaikin MF": "Chaikin MF",
            "Chaikin Money Flow": "Chaikin pénzáramlás",
            "Chaikin Vol": "Chaikin Vol",
            "Chaikin Volatility": "Chaikin volatilitás",
            "Chande Fcst": "Chande Előrejelz",
            "Chande Forecast Oscillator": "Chande előrejelzési oszcillátor",
            "Chande Momentum Oscillator": "Chande momentum oszcillátor",
            "Chande Mtm": "Chande Mtm",
            "Change Timezone": "Időzóna módosítása",
            Channel: "Channel",
            "Channel Fill": "Channel feltöltés",
            Chart: "Diagram",
            "Chart Preferences": "Grafikon-beállítások",
            "Chart Scale": "Diagram beosztás",
            "Chart Shared Successfully!": "A chartot sikeresen megosztotta!",
            "Chart Style": "Diagram stílusa",
            "Chart Type": "Diagram típus",
            Check: "Ellenőrzés",
            "Choose language": "Válasszon nyelvet",
            "Choose Timezone": "Időzóna kiválasztása",
            "Choppiness Index": "Változó irányokat mutató (Choppiness) index",
            Clear: "Törlés",
            "Clear All": "Összes törlése",
            "Clear Drawings": "Ábrák törlése",
            Close: "Bezárás",
            close: "bezárás",
            Color: "Szín",
            "Colored Bar": "Színes sáv",
            "Colored Line": "Színes vonal",
            COMMODITIES: "ÁRUCIKKEK",
            "Commodity Channel Index": "Commodity Channel Index",
            Compare: "Összehasonlítás",
            "Comparison Symbol": "Összehasonlító szimbólum",
            Composite: "Összetett",
            "Composite RSI": "Összetett Rrlatív erősség index (RSI)",
            Continuous: "Állandó",
            "Conversion Line": "Konverziós vonal",
            "Conversion Line Period": "Konverziós vonal időszak",
            Coppock: "Coppock",
            "Coppock Curve": "Coppock görbe",
            Correl: "Korrelál",
            Correlation: "Korreláció",
            "Correlation Coefficient": "Korrelációs együttható",
            Courier: "Courier",
            Create: "Létrehozás",
            "Create a New Custom Theme": "Új egyedi téma létrehozása",
            "Create Custom Theme": "Új egyedi téma készítése",
            "Create Image": "Kép készítése",
            Cross: "Kereszt",
            Crosshair: "Célkereszt",
            Crosshairs: "Célkeresztek",
            Crossline: "Keresztvonal",
            CURRENCIES: "DEVIZÁK",
            "Current Studies": "Jelenlegi mutatók",
            "Current Symbols": "Aktuális szimbólumok",
            "Current TimeZone is": "A jelenlegi időzóna",
            "Custom Themes": "Egyedi témák",
            "Cycle 1": "1. ciklus",
            "Cycle 2": "2. ciklus",
            "Cycle 3": "3. ciklus",
            D: "N",
            daily: "napi",
            Darvas: "Darvas",
            "Darvas Box": "Darvas doboz",
            "Data delayed 15 min.": "Adat késleltetve 15 perc.",
            "Data is randomized.": "Az adatok véletlen.",
            "Data is real-time.": "Az adatok valós időben.",
            "Date Dividers": "Dátumválasztók",
            "Date/Time": "Dátum/időpont",
            "Date/Time:": "Dátum/időpont:",
            Day: "Nappal",
            "Days Per Year": "Év per napok",
            "Decreasing Bar": "Csökkenő sáv",
            Default: "Alapértelmezett",
            "Default Themes": "Alapértelmezett témák",
            Delete: "Törlés",
            "Delete Study": "Mutató törlése",
            "Demo data.": "Demo adatokat.",
            Detrended: "Detrended (Tendencia nélküli)",
            "Detrended Price Oscillator":
              "Detrended Price Oscillator (Tendencia nélküli ár oszcillátor)",
            Directional: "Irányított",
            "Disparity Index": "Diszparitási index",
            Display: "Megmutat",
            "Display 1 Standard Deviation (1σ)":
              "1. normál eltérést mutat (1σ)",
            "Display 2 Standard Deviation (2σ)":
              "2. normál eltérést mutat (2σ)",
            "Display 3 Standard Deviation (3σ)":
              "3. normál eltérést mutat (3σ)",
            "Display Average": "Átlagot mutat",
            "Distance(%)": "Távolság (%)",
            Divergence: "Divergencia",
            "Don't see your study below? Type in your search here.":
              "Nem látja a felmérését lent? Ide írja a keresett elemet.",
            "Donchian Channel": "Donchian Channel",
            "Donchian High": "Donchian felső",
            "Donchian Low": "Donchian alsó",
            "Donchian Median": "Donchian közép",
            "Donchian Width": "Donchian szélesség",
            Done: "Kész",
            Doodle: "Szabad alakzat",
            "Double Exponential": "Double Exponential",
            "Double Smoothing Period": "Dupla kiegyenlítő időszak",
            "Down Volume": "Lefelé haladó volumen",
            Downtrend: "Lefelé haladó trend",
            Draw: "Ábra",
            "Ease of Movement": "Mozgás könnyűsége",
            Edit: "Szerkesztés",
            "Edit Settings...": "Beállítások szerkesztése...",
            EF: "EF",
            "EF Trigger": "EF Trigger (EF küszöbérték)",
            "Ehler Fisher": "Ehler Fisher",
            "Ehler Fisher Transform": "Ehler Fisher Transform",
            "Elder Bear Power": "Elder medvereje",
            "Elder Bull Power": "Elder bikaereje",
            "Elder Force": "Elder-erő",
            "Elder Force Index": "Elder Force Index",
            "Elder Impulse System": "Elder impulzus rendszer",
            "Elder Ray Index": "Elder Ray",
            Ellipse: "Ellipszis",
            ema: "ema",
            "End of day data.": "Az adatok a nap végén.",
            'Enter box size and hit "Enter"':
              "Adja meg a négyzet méretét, majd Enter",
            "Enter name of view:": "Adja meg a nézet nevét:",
            'Enter reversal and hit "Enter"':
              "Adja meg a visszatérést, majd Enter",
            "Enter Symbol": "Szimbólum beírása",
            'Enter value and hit "Enter"': "Adja meg az értéket, majd Enter",
            Events: "Események",
            "Exit Field": "Kilépő mező",
            Exponential: "Exponential",
            "Extended Hours": "Bővített órák",
            Fade: "Fakó",
            Fake: "Hamis",
            Fan: "Legyező",
            Fast: "Gyors",
            "Fast MA Period": "Gyors mozgóátlagú időszak",
            "Fib Arc": "Fib ív",
            "Fib Fan": "Fib legyező",
            "Fib Time Zone": "Fib időzóna",
            Fibonacci: "Fibonacci",
            fibonacci: "fibonacci",
            Field: "Terület",
            field: "mező",
            Fill: "Kitöltés",
            "Focus Arrow": "Fókusznyíl",
            Forecast: "Előrejelzés",
            FOREX: "FOREX",
            "Formula courtesy": "Formula köszönhetően",
            "Fractal Channel": "Fractal Channel",
            "Fractal Chaos": "Fractal Chaos",
            "Fractal Chaos Bands": "Fractal Chaos szalagok",
            "Fractal Chaos Oscillator": "Fractal Chaos oszcillátor",
            "Fractal High": "Fractal magas",
            "Fractal Low": "Fractal alacsony",
            FUNDS: "ALAPOK",
            FUTURES: "FUTURES",
            FX: "FX",
            Gain: "Növekmény",
            "Gann Fan": "Gann legyező",
            Garamond: "Garamond",
            Gartley: "Gartley",
            Gator: "Gator",
            "Gator Oscillator": "Gator oszcillátor",
            "Generating Image": "Generating Image",
            Ghost: "Szellem",
            "Ghost Boxes": "Szellemdobozok",
            Gopala: "Gopala",
            "Gopalakrishnan Range Index": "Gopalakrishnan tartományindex",
            Gradient: "Gradiens",
            Green: "Zöld",
            "Grid Lines": "Rácsvonalak",
            H: "Ó",
            harmonic: "harmonikus",
            Heart: "Szív",
            "Heaviest Rate of Change Period":
              "Az időszak amikor a legsúlyosabb a változás mértéke",
            "Heaviest SMA Period": "Legsúlyosabb SMA-időszak",
            "Heavy Rate of Change Period":
              "Az időszak amikor súlyos a változás mértéke",
            "Heavy SMA Period": "Súlyos SMA-időszak",
            "Heikin Ashi": "Heikin Ashi",
            "Heikin-Ashi": "Heikin-Ashi",
            Helvetica: "Helvetica",
            "HHV/LLV Lookback": "HHV/LLV visszatekintés",
            High: "Maximum",
            "High Low": "Magas Alacsony",
            "High Low Bands": "Felső alsó szalagok",
            "High Low Bottom": "Magas Alacsony Alsó pont",
            "High Low Median": "Magas Alacsony Közép",
            "High Low Top": "Magas Alacsony Csúcs",
            "High Minus Low": "Magas mínusz alacsony",
            "High Period": "Magas időszak",
            "High-Low": "Magas-alacsony",
            "high/low": "max/min",
            "Highest High Value": "Legmagasabb felső érték",
            HighLow: "FelsőAlsó",
            "Hist Vol": "Történ Vol",
            Histogram: "Hisztogram",
            "Historical Volatility": "Történelmi volatilitás",
            "Hollow Candle": "Üreges gyertya",
            Horizontal: "Vízszintes",
            Hull: "Hull",
            I: "D",
            "Ichimoku Clouds": "Ichimoku felhők",
            "Increasing Bar": "Növekvő sáv",
            Index: "Index",
            INDEXES: "INDEXEK",
            INDICES: "INDEXEK",
            Info: "Infó",
            Intercept: "Metszet",
            Interval: "Intervallum",
            "Intraday Momentum Index": "Intraday (napon belüli) momentum index",
            "Intraday Mtm": "Intraday Mtm",
            Jaw: "Jaw (Állkapocs)",
            "Jaw Offset": "Jaw Offset (Állkapocs leállás)",
            "Jaw Period": "Jaw Period (Állkapocs időszak)",
            Kagi: "Kagi",
            Keltner: "Keltner",
            "Keltner Bottom": "Keltner alsó pont",
            "Keltner Channel": "Keltner Channel",
            "Keltner Median": "Keltner közép",
            "Keltner Top": "Keltner csúcs",
            Klinger: "Klinger",
            "Klinger Volume Oscillator": "Klinger volumen oszcillátor",
            KlingerSignal: "KlingerJelzés",
            KST: "KST",
            KSTSignal: "KST-jelzés",
            "Lagging Span": "Lagging Span (Lemaradó táv)",
            "Lagging Span Period": "Lagging Span Period (Lemaradó táv időszak)",
            "Leading Span A": "Leading Span A (Vezető A táv)",
            "Leading Span B": "Lading Span B (Vezető B táv)",
            "Leading Span B Period":
              "Leading Span B Period (Vezető B táv időszak)",
            "Level Offset": "Szintek kiegyenlítése",
            Levels: "Szintek",
            "Light Rate of Change Period":
              "Időszak amikor enyhe a változás mértéke",
            "Light SMA Period": "Enyhe SMA-időszak",
            "Lightest Rate of Change Period":
              "Az időszak amikor a legenyhébb a változás mértéke",
            "Lightest SMA Period": "Legenyhébb SMA-időszak",
            "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.":
              "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.",
            "Limit Move Value": "Mozgóértékhatár",
            "Lin Fcst": "Lin előrejelz",
            "Lin Incpt": "Lin metsz",
            "Lin R2": "Lin R2",
            Line: "Vonal",
            "Line Break": "Sortörés",
            "Line/Bar Chart": "Vonal-/oszlopdiagram",
            "Linear Reg Forecast": "Lineáris regresszió előrejelzés",
            "Linear Reg Intercept": "Lineáris regresszió metszet",
            "Linear Reg R2": "Lineáris regresszió R2",
            "Linear Reg Slope": "Lineáris regresszió lejtő",
            Lips: "Lips (Ajkak)",
            "Lips Offset": "Lips Offset (Ajkak leállás)",
            "Lips Period": "Lips Period (Ajkak időszak)",
            Locale: "Hely",
            "Log Scale": "Logaritmikus beosztás",
            "Long Cycle": "Hosszú ciklus",
            "Long RoC": "Hosszú RoC",
            Loss: "Veszteség",
            Low: "Minimum",
            "Low Period": "Alacsony időszak",
            "Lowest Low Value": "Legalacsonyabb alsó érték",
            "LR Slope": "LR lejtő",
            M: "Hó",
            "M Flow": "Pénzáramlás",
            MA: "MA",
            ma: "mozgóátlag",
            "MA Env": "MÁ Boríték",
            "MA Env Bottom": "MÁ Boríték Alsó pont",
            "MA Env Median": "MÁ Boríték Közép",
            "MA Env Top": "MÁ Boríték csúcs",
            "MA Period": "MA időszak",
            MACD: "MACD",
            "Market Data": "Market Data",
            "Market Facilitation Index":
              "Market Facilitation Index (Piackönnyítő index)",
            "Mass Idx": "TömegIdx",
            "Mass Index": "Mass Index (Tömeg index)",
            "Maximum AF": "Maximum AF",
            mean: "középérték",
            Measure: "Mérés",
            "Med Price": "Köz. ár",
            median: "medián",
            "Median Price": "Közepes ár",
            "Min Tick Value": "Min Tick érték",
            "Minimum AF": "Minimum AF",
            Momentum: "Momentum",
            "Momentum Indicator": "Momentum mutató",
            "Money Flow Index": "Pénzáramlás index",
            More: "Részletek",
            "More studies": "További elemzések",
            Mountain: "Hegyi",
            "Mountain Charts": "Hegydiagramok",
            "Mountain Color": "Hegy színe",
            "Moving Average": "Mozgóátlag",
            "Moving Average Deviation": "Mozgóátlag eltérése",
            "Moving Average Envelope": "Mozgóátlag boríték",
            "Moving Average Type": "Mozgóátlag típus",
            ms: "ms",
            Multiplier: "Szorzó",
            Name: "Név",
            "Neg Vol": "Neg Vol",
            "Negative Bar": "Negatív bar",
            "Negative Volume Index": "Negatív volumenindex",
            Neutral: "Semleges",
            "New Custom Theme": "Új egyedi téma",
            "New Theme": "Új téma",
            "New Theme Name": "Új téma neve",
            "New Theme Name:": "Az új téma neve:",
            Night: "Éjszaka",
            None: "Nincs",
            "None available": "Nem elérhető",
            "Not enough data to compute": "Not enough data to compute",
            Offset: "Leállás",
            "On Bal Vol": "On Bal Vol",
            "On Balance Volume": "On Balance volumen",
            Open: "Nyitott",
            "Open shared chart in new window":
              "Megosztott chart megnyitása új ablakban",
            or: "vagy",
            OverBought: "Túlvásárolt",
            Overlay: "Felső rész",
            OverSold: "Túlértékesített",
            "P Rel": "P Rel",
            Palatino: "Palatino",
            "Parabolic SAR": "Parabolic SAR (Trend szerinti indikátor)",
            Percent: "Százalék",
            percent: "Százalék",
            "Perf Idx": "Teljesítm Idx",
            "Performance Index": "Teljesítményindex",
            Period: "Időszak",
            pips: "pontok",
            Pitchfork: "Pitchfork",
            Pivot: "Pivot",
            "Pivot Points": "Pivot pontok",
            "Plot Type": "Tervtípus",
            PMO: "PMO",
            PMOSignal: "PMO-jelzés",
            "Point & Figure": "Point & ábra",
            Points: "Pont",
            points: "pont",
            "Points Or Percent": "Pontok vagy százalék",
            "Popular Studies": "Népszerű elemzések",
            "Pos Vol": "Vol poz",
            "Positive Bar": "Pozitív bar",
            "Positive Volume Index": "Pozitív volumenindex",
            "Press this button to generate a shareable image:":
              "Nyomja meg ezt a gombot megosztható kép készítéséhez:",
            "Pretty Good": "Pretty Good",
            "Pretty Good Oscillator": "Pretty Good oszcillátor",
            Price: "Ár",
            "Price Minimum": "Árminimum",
            "Price Momentum Oscillator": "Ár momentum oszcillátor",
            "Price Osc": "Ároszcill",
            "Price Oscillator": "Ároszcillátor",
            "Price Rate of Change":
              "Price Rate of Change (változás mértéke ár)",
            "Price Relative": "Árrelatív",
            "Price ROC": "ROC ár",
            "Price Vol": "Vol ár",
            "Price Volume Trend": "Árvolumen trend",
            "Prime Bands Bottom": "Legjobb szalagok alsó pont",
            "Prime Bands Channel": "Legjobb szalagok Channel",
            "Prime Bands Top": "Legjobb szalagok csúcs",
            "Prime Number": "Prime Number (törzsszám)",
            "Prime Number Bands": "Prime Number (törzsszám) szalagok",
            "Prime Number Oscillator": "Prime Number (törzsszám) oszcillátor",
            "Pring's Know Sure Thing": "Pring Know Sure Thing oszcillátora",
            "Pring's Special K": "Pring Special K oszcillátora",
            "Psychological Line": "Pszichológiai vonal",
            QStick: "QStick",
            "Quadrant Lines": "Kvadráns vonalak",
            "Rainbow Moving Average": "Rainbow Moving átlag",
            "Rainbow Oscillator": "Rainbow oszcillátor",
            "Random Walk": "Random Walk",
            "Random Walk High": "Random Walk magas",
            "Random Walk Index": "Random Walk Index",
            "Random Walk Low": "Random Walk alacsony",
            "Range Bars": "Barok tartománya",
            "Range Selector": "Tartományválasztó",
            "Rate Of Change": "Rate Of Change (Változás mértéke)",
            RAVI: "Tartományművelet Ellenőrző Index (RAVI)",
            Ray: "Sugár",
            Rectangle: "Téglalap",
            Redo: "Ismét",
            "Regression Line": "Regresszió vonal",
            "Rel Vig": "Rel Vig",
            "Rel Vol": "Rel Vol",
            "Relative Vigor Index":
              "Relative Vigor Index (Volatilitás viszonylagossági indexe)",
            "Relative Volatility": "Relatív volatilitás",
            RelVigSignal: "RelVig-Jelzés",
            Renko: "Renko",
            "Resistance 1": "1. rezisztencia",
            "Resistance 2": "2. rezisztencia",
            "Resistance 3": "3 rezisztencia",
            Result: "Eredmény",
            Retracement: "Korrekció",
            "right-click to delete":
              "kattintson jobb gombbal az egér hogy törölni",
            "right-click to manage":
              "kattintson jobb gombbal az egér hogy kezelni",
            "Risk/Reward": "Kockázat/Díjazás",
            RSI: "RSI",
            RSquared: "Rnégyzeten",
            s: "mp",
            save: "mentés",
            Save: "Mentés",
            "Save Theme": "Téma mentése",
            "Save View": "Nézet mentése",
            "Saved View": "Mentett nézet",
            "Saved Views": "Mentett nézetek",
            "Scale Factor": "Skála tényező",
            Schaff: "Schaff",
            "Schaff Trend Cycle": "Schaff Trend Ciklus",
            Search: "Keresés",
            Segment: "Szegmens",
            "Select Tool": "Eszköz",
            "Sell Stops": "Stopok eladása",
            Series: "Sorozat",
            "Set Point & Figure Parameters":
              "Pont és ábra paraméterek beállítása",
            "Set Price Lines": "Árvonalak beállítása",
            "Set Range": "Tartomány beállítása",
            "Set Reversal Percentage": "Visszatérési százalék beállítása",
            Settings: "Beállítások",
            Shading: "Különbözet megállapítása",
            Shape: "Alak",
            "Shape - Arrow": "Alakzat - Nyíl",
            "Shape - Check": "Alakzat - Pipa",
            "Shape - Cross": "Alakzat - Kereszt",
            "Shape - Focus": "Alakzat - Fókusz",
            "Shape - Heart": "Alakzat - Szív",
            "Shape - Star": "Alakzat - Csillag",
            Share: "Megosztás",
            "Share This Chart": "Diagram megosztása",
            "Share Your Chart": "Ossza meg grafikonját",
            Shift: "Eltolódás",
            "Shift Percentage": "Eltolódás százaléka",
            "Shift Type": "Eltolódás típusa",
            "Shinohara Intensity Ratio": "Shinohara intenzitási arány",
            "Short Cycle": "Rövid ciklus",
            "Short RoC": "Rövid RoC",
            "Show All": "Mindet megmutat",
            "Show Fractals": "Fraktálok megmutat",
            "Show Zones": "Zónák megjelenítése",
            Signal: "Jelzés",
            "Signal Period": "Jelző értékű időszak",
            "Signal Periods": "Jelző értékű időszakok",
            Simple: "Simple",
            "Simple Circle": "Egyszerű kör",
            "Simple Square": "Egyszerű négyzet",
            "Simulated data.": "Szimulált adatok.",
            Slope: "Lejtő",
            Slow: "Lassú",
            "Slow MA Period": "Lassú mozgóátlagú időszak",
            SMA1: "SMA1",
            SMA10: "SMA10",
            SMA2: "SMA2",
            SMA3: "SMA3",
            SMA4: "SMA4",
            SMA5: "SMA5",
            SMA6: "SMA6",
            SMA7: "SMA7",
            SMA8: "SMA8",
            SMA9: "SMA9",
            Smooth: "Egyenletes",
            "Smoothing Period": "Kiegyenlítő időszak",
            "Speed Resistance Arc": "Sebesség-ellenállás ív",
            "Speed Resistance Line": "Sebesség-ellenállás vonal",
            SPY: "SPY",
            Squarewave: "Négyszögjel",
            squarewave: "négyzethullám",
            Squat: "Zömök",
            standard: "normál",
            "Standard Deviation": "Standard szórás",
            "Standard Deviations": "Standard szórások",
            Star: "Csillag",
            "STARC Bands": "STARC sávok",
            "STARC Bands Bottom": "Alsó STARC sávok",
            "STARC Bands Median": "Középső STARC sávok",
            "STARC Bands Top": "Felső STARC sávok",
            "Stch Mtm": "Stch Mtm",
            "STD Dev": "STD szórás",
            "STD Period": "STD időszak",
            "Stochastic Momentum Index": "Sztochasztikus momentum index",
            Stochastics: "Sztochasztika",
            STOCKS: "RÉSZVÉNYEK",
            "Stop Levels": "Szintek leállítása",
            "Stop Loss": "Stop loss",
            Stops: "Stopok",
            "Strong Ratio": "Erős arány",
            Studies: "Elemzések",
            Study: "Mutató",
            Supertrend: "Szupertrend",
            "Support 1": "1. támogatás",
            "Support 2": "2. támogatás",
            "Support 3": "3. támogatása",
            Swing: "Swing",
            "Swing Index": "Swing Index",
            Symbol: "Szimbólum",
            T: "T",
            "Take Profit": "Profitfelvétel",
            Teeth: "Teeth (Fogak)",
            "Teeth Offset": "Teeth Offset (Fogak leállás)",
            "Teeth Period": "Teeth Period (Fogak időszak)",
            Themes: "Témák",
            "This is a callout marker": "Ez egy ábrafelirat jelölő",
            "This is an example of a complex marker which can contain html, video, images, css, and animations.":
              "Ez egy komplex jelölő példája, amely html-t, videót, képeket, css-t és animációkat tartalmazhat.",
            TII: "TII",
            "Time Cycle": "Időciklus",
            "Time Fcst": "Idő előrejelz",
            "Time Series": "Time Series",
            "Time Series Forecast": "Idősorok előrejelzés",
            "Time Zone": "Időzóna",
            "Times New Roman": "Times New Roman",
            Timezone: "Időzóna",
            "Tirone Levels": "Tirone szintek",
            "To set your timezone use the location button below or scroll through the following list":
              "Időzónájának beállításához használja az alábbi helymegjelölő gombot vagy gördítse le az alábbi listát",
            "To set your timezone use the location button below, or scroll through the following list...":
              "Az időzóna beállításához használja az alábbi Hely gombot, vagy görgessen le a következő listán...",
            "Tolerance Percentage": "Tolerancia százalék",
            "Trade Vol": "Ügylet vol",
            "Trade Volume Index": "Kereskedelmi volumenindex",
            "Trend Intensity Index": "Trend intenzitás index",
            Triangular: "Triangular",
            "Triple Exponential": "Triple Exponential",
            TRIX: "TRIX",
            "True Range": "Igaz tartomány",
            Twiggs: "Twiggek",
            "Twiggs Money Flow": "Twiggs pénzáramlat",
            Type: "Típus",
            "Typical Price": "Jellemző ár",
            "Ulcer Index": "Ulcer index",
            Ultimate: "Végső",
            "Ultimate Oscillator": "Végső oszcillátor",
            Underlay: "Süppedés",
            Undo: "Visszavonás",
            Units: "Egységek",
            "Unrealized Gain/Loss": "Nem realizált nyereség/veszteség",
            "Up Volume": "Felfelé haladó volumen",
            "Uploading Image": "Uploading Image",
            Uptrend: "Felfelé haladó trend",
            "Use My Current Location":
              "Használja a Saját jelenlegi helymeghatározást",
            "Use the following link to share your chart:":
              "A chart megosztásához használja az alábbi hivatkozást",
            "Use Volume": "Hasznosítani volumen",
            "Valuation Lines": "Értékelő vonalak",
            Variable: "Variable",
            Vchart: "Vdiagram",
            vdma: "vdma",
            Vertical: "Függőleges",
            "Vertical Horizontal Filter": "Függőleges vízszintes szűrő",
            VIDYA: "VIDYA",
            Views: "Nézetek",
            Vol: "Vol",
            "Vol Osc": "Vol oszc",
            "vol profile": "vol profil",
            "Vol ROC": "ROC vol",
            "vol undr": "vol undr",
            Volume: "Volumen",
            "Volume % of Avg": "Átlag %-nak volumene",
            "Volume Candle": "Haladó gyertya",
            "Volume Chart": "Volumen chart",
            "Volume Not Available": "Volume Not Available",
            "Volume Oscillator": "Volumenoszcillátor",
            "Volume Profile": "Volumenprofil",
            "Volume Rate of Change":
              "Volume Rate of Change (volumen változás mértéke)",
            "Volume Spike": "Volumen kicsúcsosodás",
            "Volume Underlay": "Vol Underlay",
            "Vortex Indicator": "Vortex indikátor",
            "VT HZ Filter": "VT HZ szűrő",
            VWAP: "VWAP",
            W: "Hé",
            "W Acc Dist": "W felhalm eloszt",
            "Weak Ratio": "Gyenge arány",
            weekly: "heti",
            Weighted: "Weighted",
            "Weighted Close": "Súlyozott zárás",
            "Welles Wilder": "Welles Wilder",
            White: "Fehér",
            "Williams %R": "Williams %R",
            "Your timezone is your current location":
              "Az Ön időzónája a jelenlegi tartózkodási helye",
            YTD: "ÉVES SZINTEN",
            ZigZag: "ZigZag",
            "3 Min": ",",
            "3m": ",",
          },
          it: {
            "-DI": "-DI",
            "-VI": "-VI",
            "(Scroll for more options)": "(Scroll for more options)",
            "(UTC-01:00) Azores": "(UTC-01:00) Azzorre",
            "(UTC-01:00) Cape Verde Islands": "(UTC-01:00) Isole di Capo Verde",
            "(UTC-02:00) Mid-Atlantic": "(UTC-02:00) ora del medio Atlantico",
            "(UTC-03:00) Buenos Aires": "(UTC-03:00) Buenos Aires",
            "(UTC-03:00) Montevideo": "(UTC-03:00) Montevideo",
            "(UTC-03:00) Punta Arenas": "(UTC-03:00) Punta Arenas",
            "(UTC-03:00) Sao Paulo": "(UTC-03:00) San Paolo",
            "(UTC-03:30) Newfoundland and Labrador":
              "(UTC-03:30) Terranova e Labrador",
            "(UTC-04:00) Asuncion": "(UTC-04:00) Asuncion",
            "(UTC-04:00) Atlantic Time (Canada)":
              "(UTC-04:00) ora dell'Atlantico (Canada)",
            "(UTC-04:00) Caracas": "(UTC-04:00) Caracas",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
            "(UTC-04:00) Santiago": "(UTC-04:00) Santiago",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "(UTC-05:00) Bogotà, Lima, Quito, Rio Branco",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "(UTC-05:00) ora della costa orientae (Stati Uniti e Canada)",
            "(UTC-05:00) Indiana (East)": "(UTC-05:00) Indiana (orientale)",
            "(UTC-06:00) Central America": "(UTC-06:00) America centrale",
            "(UTC-06:00) Central Time (US and Canada)":
              "(UTC-06:00) ora centrale (Stati Uniti e Canada)",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "(UTC-06:00) Guadalajara, Città del Messico, Monterrey",
            "(UTC-06:00) Saskatchewan": "(UTC-06:00) Saskatchewan",
            "(UTC-07:00) Arizona": "(UTC-07:00) Arizona",
            "(UTC-07:00) Chihuahua, Mazatlan":
              "(UTC-07:00) Chihuahua, Mazatlan",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "(UTC-07:00) ora delle Montage Rocciose (Stati Uniti e Canada)",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "(UTC-08:00) ora del Pacifico (Stati Uniti e Canada)",
            "(UTC-08:00) Tijuana": "(UTC-08:00) Tijuana",
            "(UTC-09:00) Alaska": "(UTC-09:00) Alaska",
            "(UTC-10:00) Hawaii": "(UTC-10:00) Hawaii",
            "(UTC-11:00) American Samoa, Midway Island":
              "(UTC-11:00) Samoa americane, Isola di Midway",
            "(UTC) Casablanca": "(UTC) Casablanca",
            "(UTC) Dublin": "(UTC) Dublino",
            "(UTC) Lisbon, London": "(UTC) Lisbona, Londra",
            "(UTC) Greenwich Mean Time, Reykjavik":
              "(UTC) ora di Greenwich, Reykjavik",
            "(UTC+01:00) Algiers, Tunis": "(UTC+01:00) Algeri, Tunisi",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "(UTC+01:00) Amsterdam, Berlino, Berna, Roma, Stoccolma, Vienna",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "(UTC+01:00) Belgrado, Bratislava, Budapest, Lubiana, Praga",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "(UTC+01:00) Bruxelles, Copenhagen, Madrid, Parigi",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "(UTC+01:00) Sarajevo, Skopje, Varsavia, Zagabria",
            "(UTC+02:00) Athens, Bucharest": "(UTC+02:00) Atene, Bucharest",
            "(UTC+02:00) Cairo": "(UTC+02:00) Il Cairo",
            "(UTC+02:00) Cyprus": "(UTC+02:00) Cipro",
            "(UTC+02:00) Harare, Johannesburg":
              "(UTC+02:00) Harare, Johannesburg",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius",
            "(UTC+02:00) Jerusalem": "(UTC+02:00) Gerusalemme",
            "(UTC+02:00) Kaliningrad": "(UTC+02:00) Kaliningrad",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyad",
            "(UTC+03:00) Istanbul": "(UTC+03:00) Istanbul",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "(UTC+03:00) Minsk, Mosca, Kirov, Volgograd",
            "(UTC+03:00) Nairobi": "(UTC+03:00) Nairobi",
            "(UTC+03:00) Simferopol": "(UTC+03:00) Sinferopoli",
            "(UTC+03:30) Tehran": "(UTC+03:30) Teheran",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk",
            "(UTC+04:00) Baku": "(UTC+04:00) Baku",
            "(UTC+04:00) Dubai, Muscat": "(UTC+04:00) Dubai, Mascate",
            "(UTC+04:30) Kabul": "(UTC+04:30) Kabul",
            "(UTC+05:00) Karachi, Tashkent": "(UTC+05:00) Karachi, Tashkent",
            "(UTC+05:00) Yekaterinburg": "(UTC+05:00) Yekaterinburg",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "(UTC+05:30) Chennai, Calcutta, Bombay, Nuova Delhi",
            "(UTC+05:45) Kathmandu": "(UTC+05:45) Kathmandu",
            "(UTC+06:00) Almaty": "(UTC+06:00) Almaty",
            "(UTC+06:00) Astana, Dhaka": "(UTC+06:00) Astana, Dacca",
            "(UTC+06:00) Omsk": "(UTC+06:00) Omsk",
            "(UTC+06:30) Yangon": "(UTC+06:30) Yangon",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "(UTC+07:00) Bangkok, Jakarta, Vietnam",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "(UTC+07:00) Barnaul, Novosibirsk, Tomsk",
            "(UTC+07:00) Hovd": "(UTC+07:00) Hovd",
            "(UTC+07:00) Krasnoyarsk": "(UTC+07:00) Krasnoyarsk",
            "(UTC+07:00) Novokuznetsk": "(UTC+07:00) Novokuznetsk",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "(UTC+08:00) Pechino, Chongqing, Regione Amministrativa Speciale di Hong Kong ",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "(UTC+08:00) Brunei, Kuala Lumpur, Singapore",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "(UTC+08:00) Choibalsan, Ulan Bator",
            "(UTC+08:00) Irkutsk": "(UTC+08:00) Irkutsk",
            "(UTC+08:00) Manila, Taipei": "(UTC+08:00) Manila, Taipei",
            "(UTC+08:00) Perth": "(UTC+08:00) Perth",
            "(UTC+08:45) Eucla": "(UTC+08:45) Eucla",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "(UTC+09:00) Čita, Khandyga, Yakutsk",
            "(UTC+09:00) Osaka, Sapporo, Tokyo":
              "(UTC+09:00) Osaka, Sapporo, Tokyo",
            "(UTC+09:00) Pyongyang": "(UTC+09:00) Pyongyang",
            "(UTC+09:00) Seoul": "(UTC+09:00) Seul",
            "(UTC+09:30) Adelaide": "(UTC+09:30) Adelaide",
            "(UTC+09:30) Darwin": "(UTC+09:30) Darwin",
            "(UTC+10:00) Brisbane": "(UTC+10:00) Brisbane",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "(UTC+10:00) Canberra, Melbourne, Sydney",
            "(UTC+10:00) Guam, Port Moresby": "(UTC+10:00) Guam, Port Moresby",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "(UTC+10:00) Ust-Nera, Vladivostok",
            "(UTC+11:00) Magadan": "(UTC+11:00) Magadan",
            "(UTC+11:00) Noumea, Solomon Islands":
              "(UTC+11:00) Noumea, Isole Salomone",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "(UTC+11:00) Sakhalin, Srednekolymsk",
            "(UTC+12:00) Anadyr, Kamchatka": "(UTC+12:00) Anadyr, Kamčatka",
            "(UTC+12:00) Auckland, Wellington":
              "(UTC+12:00) Auckland, Wellington",
            "(UTC+12:45) Chatham": "(UTC+12:45) Chatham",
            "(UTC+13:00) Samoa": "(UTC+13:00) Samoa",
            "(UTC+13:00) Tonga": "(UTC+13:00) Tonga",
            "(UTC+14:00) Kiritimati": "(UTC+14:00) Kiritimati",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "%D Tipologia media mobile",
            "%D Periods": "%D Periodi",
            "%K": "%K",
            "%K Double Smoothing Periods": "%K Periodi Double Smoothing",
            "%K Periods": "%K Periodi",
            "%K Smoothing Periods": "%K periodi di lisciatura",
            "+DI": "+DI",
            "+VI": "+VI",
            "1 D": "1 G",
            "1 Hour": "1 H",
            "1 Min": "1 Min",
            "1 Mo": "1 M",
            "1 Standard Deviation (1σ)": "1 deviazione standard (1σ)",
            "1 W": "1 S",
            "10 Min": "10 Min",
            "10m": "10m",
            "13px": "13px",
            "15 Min": "15 Min",
            "15m": "15m",
            "1D": "1G",
            "1H": "1H",
            "1m": "1m",
            "1M": "1M",
            "1W": "1S",
            "1Y": "1A",
            "2 Standard Deviation (1σ)": "2 deviazione standard (1σ)",
            "2 Standard Deviation (2σ)": "2 deviazione standard (2σ)",
            "3 Standard Deviation (1σ)": "3 deviazione standard (1σ)",
            "3 Standard Deviation (3σ)": "3 deviazione standard (3σ)",
            "30 Min": "30 Min",
            "30m": "30m",
            "3M": "3M",
            "4 Hour": "4 H",
            "4H": "4H",
            "5 Min": "5 Min",
            "5D": "5gg",
            "5m": "5m",
            "5Y": "5A",
            "6M": "6 M",
            Abstract: "Riassunto",
            "Acc Swing": "Acc Swing",
            "Accumulation/Distribution": "Accumulation Distribution",
            "Accumulative Swing Index": "Indice Accumulative Swing",
            Add: "Somma",
            ADD: "Aggiungi",
            "Add Stop Loss": "Aggiungi Stop Loss",
            "Add Take Profit": "Aggiungi Take Profit",
            ADX: "ADX",
            "ADX/DMS": "ADX/DMS",
            ALL: "TUTTI",
            "All-Time High Lookback Period":
              "Periodo con lookback più alto di tutti i tempi",
            Alligator: "Alligator",
            Annotation: "Annotazione",
            Arc: "Arco",
            Aroon: "Aroon",
            "Aroon Down": "Aroon Down",
            "Aroon Osc": "Oscillatore Aroon",
            "Aroon Oscillator": "Oscillatore Aroon",
            "Aroon Up": "Aroon Up",
            Arrow: "Freccia",
            "ATH Lookback Period": "Periodo di lookback ATH",
            ATR: "ATR",
            "ATR Bands": "Bande ATR",
            "ATR Bands Bottom": "Bande ATR bottom",
            "ATR Bands Channel": "Bande ATR Channel",
            "ATR Bands Top": "Bande ATR top",
            "ATR Trailing Stop": "ATR Trailing Stop",
            "ATR Trailing Stops": "ATR Trailing Stop",
            "Auto Select": "Selezione automatica",
            Average: "Media",
            "Average Line": "Linea della media",
            "Average True Range": "Average True Range",
            "Average Type": "Tipo di media",
            Awesome: "Fantastico",
            "Awesome Oscillator": "Oscillatore Awesome",
            "Axis Label": "Nome dell'asse",
            "Axis Label:": "Etichetta dell'asse:",
            "Axis Text": "Testo asse",
            B: "B",
            Background: "Sfondo",
            "Background Color": "Colore dello sfondo",
            "Balance of Power": "Equilibrio di potenza",
            Bandwidth: "Ampiezza della banda",
            Bar: "Barra",
            Bars: "Barre",
            "Bars Color": "Colore delle barre",
            "Base Line": "Linea di base",
            "Base Line Period": "Periodi della linea di base",
            Baseline: "Linea di base",
            "Baseline Delta": "Variazione al basale",
            "BATS BZX real-time.": "BATS BZX in tempo reale.",
            Bearish: "Al ribasso",
            Beta: "Beta",
            "Beta Callouts Candle Border":
              "Margine della candela Beta di Callout",
            Black: "Nero",
            "Boll %b": "Boll %b",
            "Boll BW": "Boll BW",
            "Bollinger %b": "Bollinger %b",
            "Bollinger Bands": "Bande di Bollinger",
            "Bollinger Bands Bottom": "Bande di Bollinger Bottom",
            "Bollinger Bands Median": "Bande di Bollinger Median",
            "Bollinger Bands Top": "Bande di Bollinger Top",
            "Bollinger Bandwidth": "Ampiezza Banda di Bollinger",
            Border: "Margine",
            "Bulge Threshold": "Bulge Threshold",
            Bullish: "Al rialzo",
            "Buy Stops": "Ordini stop di acquisto (Buy Stops)",
            "by Xignite.": "per Xignite.",
            Callout: "Fumetto",
            Callouts: "Callout",
            cancel: "annulla",
            Candle: "Candela",
            "Candle Border": "Margine della candela",
            "Candle Borders": "Bordi grafico a candela",
            "Candle Color": "Colore della candela",
            "Candle Wick": "Stoppino della candela",
            Candles: "Candele",
            "Center Of Gravity": "Center Of Gravity",
            "Chaikin MF": "Chaikin MF",
            "Chaikin Money Flow": "Chaikin Money Flow",
            "Chaikin Vol": "Chaikin Vol",
            "Chaikin Volatility": "Volatilità di Chaikin",
            "Chande Fcst": "Chande Fcst",
            "Chande Forecast Oscillator": "Oscillatore Chande Forecast",
            "Chande Momentum Oscillator": "Oscillatore Chande Momentum",
            "Chande Mtm": "Chande Mtm",
            "Change Timezone": "Cambia fuso orario",
            Channel: "Canale",
            "Channel Fill": "Channel Fill",
            Chart: "Grafico",
            "Chart Preferences": "Preferenze dei grafici",
            "Chart Scale": "Scala Grafico",
            "Chart Shared Successfully!": "Grafico condiviso con successo!",
            "Chart Style": "Stile grafico",
            "Chart Type": "Tipo di grafico",
            Check: "Segno di spunta",
            "Choose language": "Scegli la lingua",
            "Choose Timezone": "Scegli Fuso orario",
            "Choppiness Index": "Indice choppiness",
            Clear: "Cancella",
            "Clear All": "Cancella tutto",
            "Clear Drawings": "Cancella Disegni",
            Close: "Chiudi",
            close: "Chiudi",
            Color: "Colore",
            "Colored Bar": "Barra colorata",
            "Colored Line": "Linea colorata",
            COMMODITIES: "MATERIE PRIME",
            "Commodity Channel Index": "Indice Commodity Channel",
            Compare: "Confronta",
            "Comparison Symbol": "Simbolo di confronto",
            Composite: "Composito",
            "Composite RSI": "RSI composito",
            Continuous: "Continuo",
            "Conversion Line": "Linea di conversione",
            "Conversion Line Period": "Periodo della linea di conversione",
            Coppock: "Coppock",
            "Coppock Curve": "Coppock Curve",
            Correl: "Correlazione",
            Correlation: "Correlazione",
            "Correlation Coefficient": "Coefficiente di correlazione",
            Courier: "Courier",
            Create: "Crea",
            "Create a New Custom Theme": "Crea Nuovo Tema Personalizzato",
            "Create Custom Theme": "Crea tema personalizzato",
            "Create Image": "Crea immagine",
            Cross: "Croce",
            Crosshair: "Mirino",
            Crosshairs: "Mirini",
            Crossline: "Crossline",
            CURRENCIES: "VALUTE",
            "Current Studies": "Studi in corso",
            "Current Symbols": "Simboli correnti",
            "Current TimeZone is": "Il fuso orario attuale è",
            "Custom Themes": "Personalizza temi",
            "Cycle 1": "Ciclo 1",
            "Cycle 2": "Ciclo 2",
            "Cycle 3": "Ciclo 3",
            D: "g",
            daily: "giornaliero",
            Darvas: "Darvas",
            "Darvas Box": "Scatole di Darvas",
            "Data delayed 15 min.": "Dati ritardato 15 min.",
            "Data is randomized.": "I dati è randomizzato.",
            "Data is real-time.": "I dati sono in tempo reale.",
            "Date Dividers": "Divisori della data",
            "Date/Time": "Data/Ora",
            "Date/Time:": "Data/Ora",
            Day: "Giorno",
            "Days Per Year": "giorni l'anno",
            "Decreasing Bar": "Barra decrescente",
            Default: "Default",
            "Default Themes": "Temi di default",
            Delete: "Elimina",
            "Delete Study": "Cancella lo studio",
            "Demo data.": "Dati demo.",
            Detrended: "Detrended",
            "Detrended Price Oscillator": "Oscillatore Detrended Price",
            Directional: "Direzionale",
            "Disparity Index": "Indice disparità",
            Display: "Visualizza",
            "Display 1 Standard Deviation (1σ)":
              "Mostra 1 deviazione standard (1σ)",
            "Display 2 Standard Deviation (2σ)":
              "Mostra 2 deviazione standard (2σ)",
            "Display 3 Standard Deviation (3σ)":
              "Mostra 3 deviazione standard (3σ)",
            "Display Average": "Mostra media",
            "Distance(%)": "Distanza (%)",
            Divergence: "Divergenza",
            "Don't see your study below? Type in your search here.":
              "Non trovi qui sotto lo studio che ti interessa? Digita qui per cercare.",
            "Donchian Channel": "Donchian Channel",
            "Donchian High": "Donchian High",
            "Donchian Low": "Donchian Low",
            "Donchian Median": "Donchian Median",
            "Donchian Width": "Ampiezza di Donchian",
            Done: "Fatto",
            Doodle: "Formato libero",
            "Double Exponential": "Doppio Esponenziale",
            "Double Smoothing Period": "Doppio periodi di lisciatura",
            "Down Volume": "Down Volume",
            Downtrend: "Downtrend",
            Draw: "Disegna",
            "Ease of Movement": "Ease of Movement",
            Edit: "Modifica",
            "Edit Settings...": "Modifica le impostazioni…",
            EF: "EF",
            "EF Trigger": "EF Trigger",
            "Ehler Fisher": "Ehler Fisher",
            "Ehler Fisher Transform": "Ehler Fisher Transform",
            "Elder Bear Power": "Elder Power ribassista",
            "Elder Bull Power": "Elder Power rialzista",
            "Elder Force": "Elder Force",
            "Elder Force Index": "Indice Elder Force",
            "Elder Impulse System": "Sistema impulsi di Elder",
            "Elder Ray Index": "Elder Ray",
            Ellipse: "Ellisse",
            ema: "ema",
            "End of day data.": "I dati della fine della giornata.",
            'Enter box size and hit "Enter"':
              'Immetti la dimensione del riquadro e premi Inserisci""""',
            "Enter name of view:": "Inserisci il nome della visualizzazione",
            'Enter reversal and hit "Enter"':
              'Immetti l\'inversione e premi Inserisci""""',
            "Enter Symbol": "Inserisci simbolo",
            'Enter value and hit "Enter"':
              'Immetti il valore e premi Inserisci""""',
            Events: "Eventi",
            "Exit Field": "Campo di uscita",
            Exponential: "Esponenziale",
            "Extended Hours": "Orario prolungato",
            Fade: "Fade",
            Fake: "Fake",
            Fan: "Ventola",
            Fast: "Fast",
            "Fast MA Period": "Periodo di media mobile veloce",
            "Fib Arc": "Arco Fib",
            "Fib Fan": "Ventaglio Fib",
            "Fib Time Zone": "Zona temporale Fib",
            Fibonacci: "Fibonacci",
            fibonacci: "Fibonacci",
            Field: "Campo",
            field: "Campo",
            Fill: "Riempimento",
            "Focus Arrow": "Freccia su bersaglio",
            Forecast: "Forecast",
            FOREX: "FOREX",
            "Formula courtesy": "Formula grazie a",
            "Fractal Channel": "Fractal Channel",
            "Fractal Chaos": "Fractal Chaos",
            "Fractal Chaos Bands": "Bande Fractal Chaos",
            "Fractal Chaos Oscillator": "Oscillatore Fractal Chaos",
            "Fractal High": "Fractal High",
            "Fractal Low": "Fractal Low",
            FUNDS: "FONDI",
            FUTURES: "FUTURE",
            FX: "VALUTE",
            Gain: "Guadagno",
            "Gann Fan": "Ventaglio Gann",
            Garamond: "Garamond",
            Gartley: "Gartley",
            Gator: "Gator",
            "Gator Oscillator": "Oscillatore Gator",
            "Generating Image": "Generazione Immagine",
            Ghost: "Ghost",
            "Ghost Boxes": "Ghost Box",
            Gopala: "Gopala",
            "Gopalakrishnan Range Index": "Indice Gopalakrishnan Range",
            Gradient: "Gradiente",
            Green: "verde",
            "Grid Lines": "Griglia",
            H: "h",
            harmonic: "armonico",
            Heart: "Cuore",
            "Heaviest Rate of Change Period":
              "Periodo con il tasso di variazione più pesante",
            "Heaviest SMA Period": "Periodo con SMA più pesante",
            "Heavy Rate of Change Period":
              "Periodo con tasso di variazione pesante",
            "Heavy SMA Period": "Periodo con SMA pesante",
            "Heikin Ashi": "Heikin Ashi",
            "Heikin-Ashi": "Heikin-Ashi",
            Helvetica: "Helvetica",
            "HHV/LLV Lookback": "Loookback HHV/LLV",
            High: "Massimo",
            "High Low": "High Low",
            "High Low Bands": "Bande High Low",
            "High Low Bottom": "High Low bottom",
            "High Low Median": "High Low median",
            "High Low Top": "High Low top",
            "High Minus Low": "High Minus Low",
            "High Period": "Periodo High",
            "High-Low": "High-Low",
            "high/low": "massimo/minimo",
            "Highest High Value": "Valore Highest Highe",
            HighLow: "HighLow",
            "Hist Vol": "Hist Vol",
            Histogram: "Istogramma",
            "Historical Volatility": "Volatilità storica",
            "Hollow Candle": "Candela Vuote",
            Horizontal: "Orizzontale",
            Hull: "Hull",
            I: "I",
            "Ichimoku Clouds": "Ichimoku Clouds",
            "Increasing Bar": "Barra crescente",
            Index: "Indice",
            INDEXES: "INDICI",
            INDICES: "INDICI",
            Info: "Info",
            Intercept: "Intercept",
            Interval: "Intervallo",
            "Intraday Momentum Index": "Indice Intraday Momentum",
            "Intraday Mtm": "Intraday Mtm",
            Jaw: "Jaw",
            "Jaw Offset": "Compensazione Jaw",
            "Jaw Period": "Periodo Jaw",
            Kagi: "Kagi",
            Keltner: "Keltner",
            "Keltner Bottom": "Keltner Bottom",
            "Keltner Channel": "Keltner Channel",
            "Keltner Median": "Keltner Median",
            "Keltner Top": "Keltner Top",
            Klinger: "Klinger",
            "Klinger Volume Oscillator": "Oscillatore Klinger Volume",
            KlingerSignal: "Segnale Klinger",
            KST: "KST",
            KSTSignal: "Segnale KST",
            "Lagging Span": "Lagging Span",
            "Lagging Span Period": "Periodo Lagging Span",
            "Leading Span A": "Leading Span A",
            "Leading Span B": "Leading Span B",
            "Leading Span B Period": "Periodo Leading Span B",
            "Level Offset": "Offset livello",
            Levels: "Livelli",
            "Light Rate of Change Period":
              "Periodo con tasso di variazione leggero",
            "Light SMA Period": "Periodo con SMA leggera",
            "Lightest Rate of Change Period":
              "Periodo con il tasso di variazione più leggero",
            "Lightest SMA Period": "Periodo con la SMA più leggera",
            "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.":
              "Come tutti gli indicatori di ChartIQ, anche gli oggetti sono gestiti dal grafico, così quando lo fai scorrere, anche gli oggetti si muoveranno. Gli oggetti vengono automaticamente cancellati quando il simbolo cambia.",
            "Limit Move Value": "Limit Move Value",
            "Lin Fcst": "Lin Fcst",
            "Lin Incpt": "Lin Incpt",
            "Lin R2": "Lin R2",
            Line: "Linea",
            "Line Break": "Interruzione di riga",
            "Line/Bar Chart": "Grafico a linee/barre",
            "Linear Reg Forecast": "Previsione nella regressione lineare",
            "Linear Reg Intercept": "Linear Reg Intercept",
            "Linear Reg R2": "Linear Reg R2",
            "Linear Reg Slope": "Linear Reg Slope",
            Lips: "Lips",
            "Lips Offset": "Compensazione Lips",
            "Lips Period": "Periodo Lips",
            Locale: "Locale",
            "Log Scale": "Scala Log",
            "Long Cycle": "Ciclo Lungo",
            "Long RoC": "RoC lungo",
            Loss: "Perdita",
            Low: "Minimo",
            "Low Period": "Periodo Low",
            "Lowest Low Value": "Lowest Low Value",
            "LR Slope": "LR Slope",
            M: "m",
            "M Flow": "Flusso M",
            MA: "Media mobile",
            ma: "media mobile",
            "MA Env": "MA Env",
            "MA Env Bottom": "MA Env bottom",
            "MA Env Median": "MA Env median",
            "MA Env Top": "MA Env top",
            "MA Period": "Periodo MA (media mobile)",
            MACD: "MACD",
            "Market Data": "Dati di mercato",
            "Market Facilitation Index": "Indice Market Facilitation",
            "Mass Idx": "Mass Idx",
            "Mass Index": "Indice Mass",
            "Maximum AF": "Maximum AF",
            mean: "mezzo",
            Measure: "Misura",
            "Med Price": "Med Price",
            median: "mediano",
            "Median Price": "Median Price",
            "Min Tick Value": "Min Tick Value",
            "Minimum AF": "Minimum AF",
            Momentum: "Momentum",
            "Momentum Indicator": "Indicatore di momentum",
            "Money Flow Index": "Money Flow Index",
            More: "Di più",
            "More studies": "Altri studi",
            Mountain: "Montagna",
            "Mountain Charts": "Grafici a montagna",
            "Mountain Color": "Colore della montagna",
            "Moving Average": "Media mobile",
            "Moving Average Deviation": "Deviazione della media mobile",
            "Moving Average Envelope": "Moving Average Envelope",
            "Moving Average Type": "Tipologia media mobile",
            ms: "ms",
            Multiplier: "Moltiplicatore",
            Name: "Nome",
            "Neg Vol": "Neg Vol",
            "Negative Bar": "Barra negativa",
            "Negative Volume Index": "Indice Negative Volume",
            Neutral: "Neutrale",
            "New Custom Theme": "Nuovo Tema Personalizzato",
            "New Theme": "Nuovo tema",
            "New Theme Name": "Nome Nuovo Tema",
            "New Theme Name:": "Nuovo nome del tema:",
            Night: "Notte",
            None: "Nessuno",
            "None available": "Nessuno disponibile",
            "Not enough data to compute": "Dati non sufficienti per il calcolo",
            Offset: "Compensazione",
            "On Bal Vol": "On Bal Vol",
            "On Balance Volume": "On Balance Volume",
            Open: "Apertura",
            "Open shared chart in new window":
              "Apri il grafico condiviso in una nuova finestra",
            or: "o",
            OverBought: "Ipercomprato",
            Overlay: "Soprastante",
            OverSold: "Ipervenduto",
            "P Rel": "P Rel",
            Palatino: "Palatino",
            "Parabolic SAR": "Parabolic SAR",
            Percent: "Percento",
            percent: "percento",
            "Perf Idx": "Perf Idx",
            "Performance Index": "Indice di Performance",
            Period: "Periodo",
            pips: "pips",
            Pitchfork: "Pitchfork",
            Pivot: "Pivot",
            "Pivot Points": "Punti pivot",
            "Plot Type": "Tipo di tracciato",
            PMO: "PMO",
            PMOSignal: "Segnale PMO",
            "Point & Figure": "Point & Figure",
            Points: "Punti",
            points: "punti",
            "Points Or Percent": "Punti o percentuale",
            "Popular Studies": "Studi più diffusi",
            "Pos Vol": "Pos Vol",
            "Positive Bar": "Barra positiva",
            "Positive Volume Index": "Indice Positive Volume",
            "Press this button to generate a shareable image:":
              "Per generare un'immagine condivisibile, clicca questo tasto:",
            "Pretty Good": "Pretty Good",
            "Pretty Good Oscillator": "Oscillatore Pretty Good",
            Price: "Prezzo",
            "Price Minimum": "Minimo del prezzo",
            "Price Momentum Oscillator": "Oscillatore Price Momentum",
            "Price Osc": "Price Osc",
            "Price Oscillator": "Oscillatore Price",
            "Price Rate of Change": "Tasso di variazione del prezzo",
            "Price Relative": "Price Relative",
            "Price ROC": "Price ROC",
            "Price Vol": "Price Vol",
            "Price Volume Trend": "Price Volume Trend",
            "Prime Bands Bottom": "Bande Prime Bottom",
            "Prime Bands Channel": "Bande Prime Channel",
            "Prime Bands Top": "Bande Prime Top",
            "Prime Number": "Prime Number",
            "Prime Number Bands": "Prime Number Bands",
            "Prime Number Oscillator": "Oscillatore Prime Number",
            "Pring's Know Sure Thing": "Indicatore Know Sure Thing di Pring",
            "Pring's Special K": "Indicatore Special K di Pring",
            "Psychological Line": "Soglia psicologica",
            QStick: "QStick",
            "Quadrant Lines": "Linee quadranti",
            "Rainbow Moving Average": "Grafico media mobile ad arcobaleno",
            "Rainbow Oscillator": "Oscillatore arcobaleno",
            "Random Walk": "Random Walk",
            "Random Walk High": "Random Walk High",
            "Random Walk Index": "Indice Random Walk",
            "Random Walk Low": "Random Walk Low",
            "Range Bars": "Barre di intervallo",
            "Range Selector": "Selettore della gamma",
            "Rate Of Change": "Tasso di variazione",
            RAVI: "RAVI",
            Ray: "Raggio",
            Rectangle: "Rettangolo",
            Redo: "Rifai",
            "Regression Line": "Linea di regressione",
            "Rel Vig": "Rel Vig",
            "Rel Vol": "Rel Vol",
            "Relative Vigor Index": "Indice Relative Vigor",
            "Relative Volatility": "Volatilità relativa",
            RelVigSignal: "RelVigSignal",
            Renko: "Renko",
            "Resistance 1": "Resistenza 1",
            "Resistance 2": "Resistenza 2",
            "Resistance 3": "Resistenza 3",
            Result: "Risultato",
            Retracement: "Ritracciamento",
            "right-click to delete": "destro del mouse per cancellare",
            "right-click to manage": "destro del mouse per gestire",
            "Risk/Reward": "Rischio/Rendimento",
            RSI: "RSI",
            RSquared: "RSquared",
            s: "sec",
            save: "salva",
            Save: "Salva",
            "Save Theme": "Salva Tema",
            "Save View": "Salva visualizzazione",
            "Saved View": "Visualizzazione salvata",
            "Saved Views": "Visualizzazioni salvate",
            "Scale Factor": "Fattore di scala",
            Schaff: "Schaff",
            "Schaff Trend Cycle": "Schaff Trend Cycle",
            Search: "Cerca",
            Segment: "Segmento",
            "Select Tool": "Seleziona",
            "Sell Stops": "Ordini stop di vendita (Sell Stops)",
            Series: "Serie",
            "Set Point & Figure Parameters":
              "Imposta i parametri dei punti e delle figure",
            "Set Price Lines": "Imposta le linee del prezzo",
            "Set Range": "Imposta la gamma",
            "Set Reversal Percentage": "Imposta la percentuale di inversione",
            Settings: "Impostazioni",
            Shading: "Gradazione",
            Shape: "Forma",
            "Shape - Arrow": "Forma - Freccia",
            "Shape - Check": "Forma - Spunta",
            "Shape - Cross": "Forma - Croce",
            "Shape - Focus": "Forma - Focus",
            "Shape - Heart": "Forma - Cuore",
            "Shape - Star": "Forma - Stella",
            Share: "Condividi",
            "Share This Chart": "Condividi questo grafico",
            "Share Your Chart": "Condividi il tuo grafico",
            Shift: "Shift",
            "Shift Percentage": "Percentuale di variazione",
            "Shift Type": "Shift Type",
            "Shinohara Intensity Ratio": "Rapporto di intensità Shinohara",
            "Short Cycle": "Ciclo corto",
            "Short RoC": "RoC corto",
            "Show All": "Mostra tutti",
            "Show Fractals": "Mostra frattali",
            "Show Zones": "Mostra Zone",
            Signal: "Segnale",
            "Signal Period": "Periodo di segnale",
            "Signal Periods": "Periodo di segnale",
            Simple: "Semplice",
            "Simple Circle": "Cerchio semplice",
            "Simple Square": "Quadrato semplice",
            "Simulated data.": "Dati simulati.",
            Slope: "Slope",
            Slow: "Slow",
            "Slow MA Period": "Periodo di media mobile lento",
            SMA1: "SMA1",
            SMA10: "SMA10",
            SMA2: "SMA2",
            SMA3: "SMA3",
            SMA4: "SMA4",
            SMA5: "SMA5",
            SMA6: "SMA6",
            SMA7: "SMA7",
            SMA8: "SMA8",
            SMA9: "SMA9",
            Smooth: "Smooth",
            "Smoothing Period": "Periodo di lisciatura",
            "Speed Resistance Arc": "Arco di resistenza della velocità",
            "Speed Resistance Line": "Linea di resistenza della velocità",
            SPY: "SPIA",
            Squarewave: "Quadra",
            squarewave: "onda quadra",
            Squat: "Squat",
            standard: "standard",
            "Standard Deviation": "Deviazione standard",
            "Standard Deviations": "Deviazione standard",
            Star: "Stella",
            "STARC Bands": "Bande di STARC",
            "STARC Bands Bottom": "Bande STARC inferiori",
            "STARC Bands Median": "Bande STARC mediane",
            "STARC Bands Top": "Bande STARC superiori",
            "Stch Mtm": "Stch Mtm",
            "STD Dev": "STD Dev",
            "STD Period": "STD Period",
            "Stochastic Momentum Index": "Indice Stochastic Momentum",
            Stochastics: "Stocastici",
            STOCKS: "AZIONI",
            "Stop Levels": "Livelli di stop",
            "Stop Loss": "Stop Loss",
            Stops: "Stop",
            "Strong Ratio": "Rapporto forte",
            Studies: "Studi",
            Study: "Studio",
            Supertrend: "Supertrend",
            "Support 1": "Supporto 1",
            "Support 2": "Supporto 2",
            "Support 3": "Supporto 3",
            Swing: "Swing",
            "Swing Index": "Indice Swing",
            Symbol: "Simbolo",
            T: "T",
            "Take Profit": "Take Profit",
            Teeth: "Teeth",
            "Teeth Offset": "Compensazione Teeth",
            "Teeth Period": "Periodo Teeth",
            Themes: "Temi",
            "This is a callout marker": "Questo è un marker di callout",
            "This is an example of a complex marker which can contain html, video, images, css, and animations.":
              "Questo è un esempio di marker complesso, che può contenere html, video, immagini, css e animazioni",
            TII: "TII",
            "Time Cycle": "Ciclo temporale",
            "Time Fcst": "Time Fcst",
            "Time Series": "Serie Temporali",
            "Time Series Forecast": "Previsione su serie temporali",
            "Time Zone": "Fuso orario",
            "Times New Roman": "Time New Roman",
            Timezone: "Fuso orario",
            "Tirone Levels": "Livelli di Tirone",
            "To set your timezone use the location button below or scroll through the following list":
              "Per impostare il tuo fuso orario usa il pulsante ubicazione che segue o fai scorrere l'elenco che segue",
            "To set your timezone use the location button below, or scroll through the following list...":
              "Per impostare il Suo fuso orario, utilizzi il tasto di localizzazione qui sotto o scorra l'elenco seguente…",
            "Tolerance Percentage": "Percentuale di tolleranza",
            "Trade Vol": "Trade Vol",
            "Trade Volume Index": "Indice Trade Volume",
            "Trend Intensity Index": "Indice di intensità della tendenza",
            Triangular: "Triangolare",
            "Triple Exponential": "Triplo Esponenziale",
            TRIX: "TRIX",
            "True Range": "True Range",
            Twiggs: "Twiggs",
            "Twiggs Money Flow": "Twiggs Money Flow",
            Type: "Tipologia",
            "Typical Price": "Typical Price",
            "Ulcer Index": "Indice dell'ulcera",
            Ultimate: "Ultimo",
            "Ultimate Oscillator": "Oscillatore Ultimate",
            Underlay: "Substrato",
            Undo: "Annulla",
            Units: "Unità",
            "Unrealized Gain/Loss": "Guadagni/perdite non realizzate",
            "Up Volume": "Up Volume",
            "Uploading Image": "Caricamento Immagine",
            Uptrend: "Uptrend",
            "Use My Current Location": "Usa la mia ubicazione corrente",
            "Use the following link to share your chart:":
              "Usa il link seguente per condividere il tuo grafico",
            "Use Volume": "Utilizzare Volume",
            "Valuation Lines": "Linee di valutazione",
            Variable: "Variabile",
            Vchart: "grafico V",
            vdma: "vdma",
            Vertical: "Verticale",
            "Vertical Horizontal Filter": "Filtro verticale orizzontale",
            VIDYA: "VIDYA",
            Views: "Visualizzazioni",
            Vol: "Vol",
            "Vol Osc": "Vol Osc",
            "vol profile": "vol profile",
            "Vol ROC": "Vol ROC",
            "vol undr": "vol undr",
            Volume: "Volume",
            "Volume % of Avg": "% di volume della media",
            "Volume Candle": "Grafico a Candele Volumetrico",
            "Volume Chart": "Grafico volumi",
            "Volume Not Available": "Volume non disponibile",
            "Volume Oscillator": "Oscillatore Volume",
            "Volume Profile": "Profilo Volume",
            "Volume Rate of Change": "Tasso di variazione del volume",
            "Volume Spike": "Spike dei volumi",
            "Volume Underlay": "Volume Underlay",
            "Vortex Indicator": "Indicatore di vortice",
            "VT HZ Filter": "VT HZ Filter",
            VWAP: "VWAP",
            W: "s",
            "W Acc Dist": "W Acc Dist",
            "Weak Ratio": "Rapporto debole",
            weekly: "settimanale",
            Weighted: "Pesata",
            "Weighted Close": "Chiusura ponderata",
            "Welles Wilder": "Welles Wilder",
            White: "Bianco",
            "Williams %R": "Williams %R",
            "Your timezone is your current location":
              "Il tuo fuso orario è la tua posizione attuale",
            YTD: "anni a oggi",
            ZigZag: "ZigZag",
            "3 Min": ",",
            "3m": ",",
          },
          pt: {
            "-DI": "-DI",
            "-VI": "-VI",
            "(Scroll for more options)": "(Desloque para mais opções)",
            "(UTC-01:00) Azores": "(UTC-01:00) Açores",
            "(UTC-01:00) Cape Verde Islands": "(UTC-01:00) Ilhas de Cabo Verde",
            "(UTC-02:00) Mid-Atlantic": "(UTC-02:00) Médio-Atlântico",
            "(UTC-03:00) Buenos Aires": "(UTC-03:00) Buenos Aires",
            "(UTC-03:00) Montevideo": "(UTC-03:00) Montevidéu",
            "(UTC-03:00) Punta Arenas": "(UTC-03:00) Punta Arenas",
            "(UTC-03:00) Sao Paulo": "(UTC-03:00) São Paulo",
            "(UTC-03:30) Newfoundland and Labrador":
              "(UTC-03:30) Newfoundland e Labrador",
            "(UTC-04:00) Asuncion": "(UTC-04:00) Assunção",
            "(UTC-04:00) Atlantic Time (Canada)":
              "(UTC-04:00) Hora do Atlântico (Canadá)",
            "(UTC-04:00) Caracas": "(UTC-04:00) Caracas",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
            "(UTC-04:00) Santiago": "(UTC-04:00) Santiago",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "(UTC-05:00) Bogotá, Lima, Quito, Rio Branco",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "(UTC-05:00) Hora de Leste (EUA e Canadá)",
            "(UTC-05:00) Indiana (East)": "(UTC-05:00) Indiana (Leste)",
            "(UTC-06:00) Central America": "(UTC-06:00) América Central",
            "(UTC-06:00) Central Time (US and Canada)":
              "(UTC-06:00) Hora Central (EUA e Canadá)",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "(UTC-06:00) Guadalajara, Cidade do México, Monterrey",
            "(UTC-06:00) Saskatchewan": "(UTC-06:00) Saskatchewan",
            "(UTC-07:00) Arizona": "(UTC-07:00) Arizona",
            "(UTC-07:00) Chihuahua, Mazatlan":
              "(UTC-07:00) Chihuahua, Mazatlan",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "(UTC-07:00) Hora de Mountain (EUA e Canadá)",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "(UTC-08:00) Horário do Pacífico (EUA e Canadá)",
            "(UTC-08:00) Tijuana": "(UTC-08:00) Tijuana",
            "(UTC-09:00) Alaska": "(UTC-09:00) Alaska",
            "(UTC-10:00) Hawaii": "(UTC-10:00) Hawaii",
            "(UTC-11:00) American Samoa, Midway Island":
              "(UTC-11:00) Samoa Americana, Ilha Midway",
            "(UTC) Casablanca": "(UTC) Casablanca",
            "(UTC) Dublin": "(UTC) Dublin",
            "(UTC) Lisbon, London": "(UTC) Lisboa, Londres",
            "(UTC) Greenwich Mean Time, Reykjavik":
              "(UTC) Hora média de Greenwich, Reykjavik",
            "(UTC+01:00) Algiers, Tunis": "(UTC + 01:00) Argel, Tunis",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "(UTC + 01:00) Amsterdão, Berlim, Berna, Roma, Estocolmo, Viena",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "(UTC + 01:00) Belgrado, Bratislava, Budapeste, Ljubljana, Praga",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "(UTC + 01:00) Bruxelas, Copenhaga, Madrid, Paris",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "(UTC + 01:00) Sarajevo, Skopje, Varsóvia, Zagreb",
            "(UTC+02:00) Athens, Bucharest": "(UTC + 02:00) Atenas, Bucareste",
            "(UTC+02:00) Cairo": "(UTC + 02:00) Kaliningrado",
            "(UTC+02:00) Cyprus": "(UTC + 02:00) Chipre",
            "(UTC+02:00) Harare, Johannesburg":
              "(UTC + 02:00) Harare, Joanesburgo",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "(UTC + 02:00) Helsínquia, Kiev, Riga, Sofia, Tallinn, Vilnius",
            "(UTC+02:00) Jerusalem": "(UTC+02:00) Jerusalém",
            "(UTC+02:00) Kaliningrad": "(UTC + 02:00) Kaliningrado",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh",
            "(UTC+03:00) Istanbul": "(UTC + 03:00) Istambul",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "(UTC + 03:00) Minsk, Moscovo, Kirov, Volgogrado",
            "(UTC+03:00) Nairobi": "(UTC+03:00) Nairobi",
            "(UTC+03:00) Simferopol": "(UTC+03:00) Simferopol",
            "(UTC+03:30) Tehran": "(UTC + 03:30) Teerão",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk",
            "(UTC+04:00) Baku": "(UTC + 04:00) Baku",
            "(UTC+04:00) Dubai, Muscat": "(UTC + 04:00) Dubai, Muscat",
            "(UTC+04:30) Kabul": "(UTC+04:30) Kabul",
            "(UTC+05:00) Karachi, Tashkent": "(UTC+05:00) Karachi, Tashkent",
            "(UTC+05:00) Yekaterinburg": "(UTC+05:00) Yekaterinburg",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "(UTC + 05:30) Chennai, Calcutá, Mumbai, Nova Deli",
            "(UTC+05:45) Kathmandu": "(UTC+05:45) Kathmandu",
            "(UTC+06:00) Almaty": "(UTC+06:00) Almaty",
            "(UTC+06:00) Astana, Dhaka": "(UTC+06:00) Astana, Dhaka",
            "(UTC+06:00) Omsk": "(UTC+06:00) Omsk",
            "(UTC+06:30) Yangon": "(UTC+06:30) Yangon",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "(UTC+07:00) Bangkok, Jacarta, Vietname",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "(UTC+07:00) Barnaul, Novosibirsk, Tomsk",
            "(UTC+07:00) Hovd": "(UTC+07:00) Hovd",
            "(UTC+07:00) Krasnoyarsk": "(UTC+07:00) Krasnoyarsk",
            "(UTC+07:00) Novokuznetsk": "(UTC+07:00) Novokuznetsk",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "(UTC+08:00) Brunei, Kuala Lumpur, Singapura",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "(UTC+08:00) Choibalsan, Ulaanbaatar",
            "(UTC+08:00) Irkutsk": "(UTC+08:00) Irkutsk",
            "(UTC+08:00) Manila, Taipei": "(UTC+08:00) Manila, Taipei",
            "(UTC+08:00) Perth": "(UTC+08:00) Perth",
            "(UTC+08:45) Eucla": "(UTC+08:45) Eucla",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "(UTC + 09:00) Chita, Khandyga, Yakutsk",
            "(UTC+09:00) Osaka, Sapporo, Tokyo":
              "(UTC + 09:00) Osaka, Sapporo, Tóquio",
            "(UTC+09:00) Pyongyang": "(UTC+09:00) Pyongyang",
            "(UTC+09:00) Seoul": "(UTC + 09:00) Seul",
            "(UTC+09:30) Adelaide": "(UTC + 09:30) Adelaide",
            "(UTC+09:30) Darwin": "(UTC + 09:30) Darwin",
            "(UTC+10:00) Brisbane": "(UTC + 10:00) Brisbane",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "(UTC + 10:00) Canberra, Melbourne, Sydney",
            "(UTC+10:00) Guam, Port Moresby":
              "(UTC + 10:00) Guam, Port Moresby",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "(UTC + 10:00) Ust-Nera, Vladivostok",
            "(UTC+11:00) Magadan": "(UTC + 11:00) Magadan",
            "(UTC+11:00) Noumea, Solomon Islands":
              "(UTC + 11:00) NOUMEA, Ilhas Salomão",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "(UTC + 11:00) Sakhalin, Srednekolymsk",
            "(UTC+12:00) Anadyr, Kamchatka": "(UTC + 12:00) Anadyr, Kamchatka",
            "(UTC+12:00) Auckland, Wellington":
              "(UTC + 12:00) Auckland, Wellington",
            "(UTC+12:45) Chatham": "(UTC + 12:45) Chatham",
            "(UTC+13:00) Samoa": "(UTC + 13:00) Samoa",
            "(UTC+13:00) Tonga": "(UTC + 13:00) Tonga",
            "(UTC+14:00) Kiritimati": "(UTC + 14:00) Kiritimati",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "%D tipo de média móvel",
            "%D Periods": "%D períodos",
            "%K": "%K",
            "%K Double Smoothing Periods": "%K períodos de suavização dupla",
            "%K Periods": "%K Períodos",
            "%K Smoothing Periods": "%K períodos de suavização",
            "+DI": "+DI",
            "+VI": "+VI",
            "1 D": "1 Dia",
            "1 Hour": "1 Hora",
            "1 Min": "1 Min",
            "1 Mo": "1 Mês",
            "1 Standard Deviation (1σ)": "1 Desvio-padrão (1σ)",
            "1 W": "1 Semana",
            "10 Min": "10 Min",
            "10m": "10m",
            "13px": "13px",
            "15 Min": "15 Min",
            "15m": "15m",
            "1D": "1D",
            "1H": "1H",
            "1m": "1m",
            "1M": "1M",
            "1W": "1S",
            "1Y": "1A",
            "2 Standard Deviation (1σ)": "2 Desvios-padrão (1σ)",
            "2 Standard Deviation (2σ)": "2 Desvios-padrão (2σ)",
            "3 Standard Deviation (1σ)": "3 Desvios-padrão (1σ)",
            "3 Standard Deviation (3σ)": "3 Desvios-padrão (3σ)",
            "30 Min": "30 Min",
            "30m": "30m",
            "3M": "3M",
            "4 Hour": "4 Horas",
            "4H": "4H",
            "5 Min": "5 Min",
            "5D": "5D",
            "5m": "5m",
            "5Y": "5A",
            "6M": "6M",
            Abstract: "Abstrato",
            "Acc Swing": "Oscilação Acc",
            "Accumulation/Distribution": "Distribuição acumulativa de",
            "Accumulative Swing Index": "Índice de oscilação acumulativo",
            Add: "Adicionar",
            ADD: "ADD",
            "Add Stop Loss": "Adicionar parar perda",
            "Add Take Profit": "Adicionar recolher lucros",
            ADX: "ADX",
            "ADX/DMS": "ADX/DMS",
            ALL: "TUDO",
            "All-Time High Lookback Period":
              "Período de Lookback mais alto de sempre",
            Alligator: "Aligátor",
            Annotation: "Anotação",
            Arc: "Arco",
            Aroon: "Aroon",
            "Aroon Down": "Aroon para baixo",
            "Aroon Osc": "Aroon osc",
            "Aroon Oscillator": "Oscilador Aroon",
            "Aroon Up": "Aroon para cima",
            Arrow: "Seta",
            "ATH Lookback Period": "Período de Lookback ATH",
            ATR: "ATR",
            "ATR Bands": "Marcas ATR",
            "ATR Bands Bottom": "Fundo bandas ATR",
            "ATR Bands Channel": "Canal bandas ATR",
            "ATR Bands Top": "Topo bandas ATR",
            "ATR Trailing Stop": "Paragem móvel ATR",
            "ATR Trailing Stops": "Limites móveis ATR",
            "Auto Select": "Auto Seleccionar",
            Average: "Média",
            "Average Line": "Linha Média",
            "Average True Range": "Intervalo real médio",
            "Average Type": "Tipo Médio",
            Awesome: "Excelente",
            "Awesome Oscillator": "Awesome Oscillator",
            "Axis Label": "Rótulo do eixo",
            "Axis Label:": "Etiqueta Axis:",
            "Axis Text": "Texto de Eixo",
            B: "B",
            Background: "Plano de Fundo",
            "Background Color": "Cor de fundo",
            "Balance of Power": "Equilíbrio de Poder",
            Bandwidth: "Largura de banda",
            Bar: "Barras",
            Bars: "Barras",
            "Bars Color": "Cor das barras",
            "Base Line": "Linha de base",
            "Base Line Period": "Período de linha de base",
            Baseline: "Linha de base",
            "Baseline Delta": "Mudança da linha de base",
            "BATS BZX real-time.": "BATS BZX em tempo real.",
            Bearish: "Bearish",
            Beta: "Beta",
            "Beta Callouts Candle Border":
              "Fronteira de Textos Explicativos Vela Beta",
            Black: "Preto",
            "Boll %b": "Boll %b",
            "Boll BW": "Boll BW",
            "Bollinger %b": "Bollinger %b",
            "Bollinger Bands": "Marcas Bollinger",
            "Bollinger Bands Bottom": "Bandas Bollinger fundo",
            "Bollinger Bands Median": "Bandas Bollinger média",
            "Bollinger Bands Top": "Bandas Bollinger topo",
            "Bollinger Bandwidth": "Largura de banda Bollinger",
            Border: "Limite",
            "Bulge Threshold": "Limite da saliência",
            Bullish: "Bullish",
            "Buy Stops": "Comprar paragem",
            "by Xignite.": "por Xignite.",
            Callout: "Período de disponibilidade",
            Callouts: "Convocações",
            cancel: "cancelamento",
            Candle: "Vela",
            "Candle Border": "Borda da Vela",
            "Candle Borders": "Rebordos em forma de velas",
            "Candle Color": "Cor de Vela",
            "Candle Wick": "Pavio de Vela",
            Candles: "Velas",
            "Center Of Gravity": "Centro de gravidade",
            "Chaikin MF": "MF Chaikin",
            "Chaikin Money Flow": "Fluxo monetário Chaikin",
            "Chaikin Vol": "Vol Chaikin",
            "Chaikin Volatility": "Volatilidade Chaikin",
            "Chande Fcst": "Previsão Chande",
            "Chande Forecast Oscillator": "Oscilador de previsão Chande",
            "Chande Momentum Oscillator": "Oscilador de momentum Chande",
            "Chande Mtm": "Mtm Chande",
            "Change Timezone": "Alterar fuso horário",
            Channel: "Canal",
            "Channel Fill": "Preenchimento de canal",
            Chart: "Gráfico",
            "Chart Preferences": "Gráfico de Preferências",
            "Chart Scale": "Escala do gráfico",
            "Chart Shared Successfully!": "Gráfico partilhado com sucesso!",
            "Chart Style": "Estilo do gráfico",
            "Chart Type": "Tipo de gráfico",
            Check: "Verificação",
            "Choose language": "Escolha o idioma",
            "Choose Timezone": "Escolher o fuso horário",
            "Choppiness Index": "Índice de ondas",
            Clear: "Limpar",
            "Clear All": "Limpar Todos",
            "Clear Drawings": "Limpar desenhos",
            Close: "Fecho",
            close: "fechar",
            Color: "Cor",
            "Colored Bar": "Barra colorida",
            "Colored Line": "Linha colorida",
            COMMODITIES: "PRODUTOS",
            "Commodity Channel Index": "Índice de canal das mercadorias",
            Compare: "Comparar",
            "Comparison Symbol": "Símbolo de comparação",
            Composite: "Composto",
            "Composite RSI": "RSI composto",
            Continuous: "Contínuo",
            "Conversion Line": "Linha de conversão",
            "Conversion Line Period": "Período de conversão de linha",
            Coppock: "Coppock",
            "Coppock Curve": "Curva de Coppock",
            Correl: "Correl",
            Correlation: "Correlação",
            "Correlation Coefficient": "Coeficiente de Correlação",
            Courier: "Correio",
            Create: "Criação",
            "Create a New Custom Theme": "Criar novo tema personalizado",
            "Create Custom Theme": "Criar Tema Personalizado",
            "Create Image": "Criar Imagem",
            Cross: "Cruz",
            Crosshair: "Mira",
            Crosshairs: "Mira",
            Crossline: "Linha Cruzada",
            CURRENCIES: "MOEDAS",
            "Current Studies": "Estudos Actuais",
            "Current Symbols": "Símbolos atuais",
            "Current TimeZone is": "Fuso Horário Actual é",
            "Custom Themes": "Temas personalizados",
            "Cycle 1": "Ciclo 1",
            "Cycle 2": "Ciclo 2",
            "Cycle 3": "Ciclo 3",
            D: "Dia",
            daily: "diário",
            Darvas: "Darvas",
            "Darvas Box": "Caixa Darvas",
            "Data delayed 15 min.": "Dados atrasado 15 min.",
            "Data is randomized.": "Dados é aleatório.",
            "Data is real-time.": "Os dados estão em tempo real.",
            "Date Dividers": "Divisores de Data",
            "Date/Time": "Data/Hora",
            "Date/Time:": "Data/Hora:",
            Day: "Dia",
            "Days Per Year": "Dias por ano",
            "Decreasing Bar": "Diminuindo a barra",
            Default: "Pré-definido",
            "Default Themes": "Temas padrão",
            Delete: "Apagar",
            "Delete Study": "Eliminar Estudo",
            "Demo data.": "Dados de demonstração.",
            Detrended: "Destendenciada",
            "Detrended Price Oscillator": "Oscilador de preço destendenciada",
            Directional: "Direcional",
            "Disparity Index": "Índice de disparidade",
            Display: "Visualizar",
            "Display 1 Standard Deviation (1σ)": "Exibir 1 Desvio-padrão (1σ)",
            "Display 2 Standard Deviation (2σ)": "Exibir 2 Desvios-padrão (1σ)",
            "Display 3 Standard Deviation (3σ)": "Exibir 3 Desvios-padrão (1σ)",
            "Display Average": "Exibir a Média",
            "Distance(%)": "Distância(%)",
            Divergence: "Divergência",
            "Don't see your study below? Type in your search here.":
              "Não encontra o seu estudo em baixo? Escreva a sua pesquisa aqui.",
            "Donchian Channel": "Canal Donchian",
            "Donchian High": "Alto de Donchian",
            "Donchian Low": "Baixo Donchian",
            "Donchian Median": "Médio Donchian",
            "Donchian Width": "Largura Donchian",
            Done: "Feito",
            Doodle: "Forma livre",
            "Double Exponential": "Duplicar Exponencial",
            "Double Smoothing Period": "Período de suavização dupla",
            "Down Volume": "Descer volume",
            Downtrend: "Tendência de baixar",
            Draw: "Desenhar",
            "Ease of Movement": "Facilidade de movimento",
            Edit: "Editar",
            "Edit Settings...": "Editar Configurações...",
            EF: "EF",
            "EF Trigger": "EF Trigger",
            "Ehler Fisher": "Ehler Fisher",
            "Ehler Fisher Transform": "Transformação Ehler Fisher",
            "Elder Bear Power": "Potência Elder Bear",
            "Elder Bull Power": "Potência Elder Bull",
            "Elder Force": "Força Elder",
            "Elder Force Index": "Índice de força Elder",
            "Elder Impulse System": "Sistema de impulso ancião",
            "Elder Ray Index": "Raio Elder",
            Ellipse: "Elipse",
            ema: "ema",
            "End of day data.": "Os dados a partir do final do dia.",
            'Enter box size and hit "Enter"':
              'Introduzir tamanho da caixa e pressionar Enter""""',
            "Enter name of view:": "Introduzir nome da visualização:",
            'Enter reversal and hit "Enter"':
              'Introduzir reverso e pressionar Enter""""',
            "Enter Symbol": "Introduza símbolo",
            'Enter value and hit "Enter"':
              'Introduzir valor e pressionar Enter""""',
            Events: "Eventos",
            "Exit Field": "Sair do campo",
            Exponential: "Exponencial",
            "Extended Hours": "Horário Alargado",
            Fade: "Esbatimento",
            Fake: "Falso",
            Fan: "Ventilador",
            Fast: "Rápido",
            "Fast MA Period": "Período MA rápido",
            "Fib Arc": "Fib Arc",
            "Fib Fan": "Fib Fan",
            "Fib Time Zone": "Fuso Horário de Fib",
            Fibonacci: "Fibonacci",
            fibonacci: "fibonacci",
            Field: "Campo",
            field: "campo",
            Fill: "Preencher",
            "Focus Arrow": "Seta de foco",
            Forecast: "Previsão",
            FOREX: "FOREX",
            "Formula courtesy": "Fórmula graças à",
            "Fractal Channel": "Canal fraccionado",
            "Fractal Chaos": "Caos fraccionado",
            "Fractal Chaos Bands": "Bandas de caos fraccionadas",
            "Fractal Chaos Oscillator": "Oscilador de caos fraccionado",
            "Fractal High": "Alto fraccionado",
            "Fractal Low": "Baixo fraccionado",
            FUNDS: "FUNDOS",
            FUTURES: "FUTUROS",
            FX: "FX",
            Gain: "Ganho",
            "Gann Fan": "Gann Fan",
            Garamond: "Garamond",
            Gartley: "Gartley",
            Gator: "Gator",
            "Gator Oscillator": "Oscilador Gator",
            "Generating Image": "Criando Imagem",
            Ghost: "Fantasmas",
            "Ghost Boxes": "Caixas fantasma",
            Gopala: "Gopala",
            "Gopalakrishnan Range Index": "Índice de intervalo Gopalakrishnan",
            Gradient: "Gradiente",
            Green: "Verde",
            "Grid Lines": "Linhas grelha",
            H: "Hora",
            harmonic: "harmónica",
            Heart: "Coração",
            "Heaviest Rate of Change Period": "Período de maior taxa de troca",
            "Heaviest SMA Period": "Período maior de SMA",
            "Heavy Rate of Change Period": "Período de grande taxa de troca",
            "Heavy SMA Period": "Período maior de SMA",
            "Heikin Ashi": "Heikin Ashi",
            "Heikin-Ashi": "Heikin-Ashi",
            Helvetica: "Helvetica",
            "HHV/LLV Lookback": "HHV/LLV Lookback",
            High: "Alto",
            "High Low": "Máx. min.",
            "High Low Bands": "Bandas máx. min.",
            "High Low Bottom": "Máx. min. inferior",
            "High Low Median": "Máx. Min. Mediano",
            "High Low Top": "Máx. Min. Superior",
            "High Minus Low": "Máx. menos min.",
            "High Period": "Período alto",
            "High-Low": "Máx. - min.",
            "high/low": "alta/baixa",
            "Highest High Value": "Maior valor alto",
            HighLow: "MáxMin",
            "Hist Vol": "Volume histórico",
            Histogram: "Histograma",
            "Historical Volatility": "Volatilidade histórica",
            "Hollow Candle": "Vela vazia",
            Horizontal: "Horizontal",
            Hull: "Casco",
            I: "I",
            "Ichimoku Clouds": "Nuvens Ichimoku",
            "Increasing Bar": "Aumentando a barra",
            Index: "Índice",
            INDEXES: "ÍNDICES",
            INDICES: "ÍNDICES",
            Info: "Info",
            Intercept: "Intersetar",
            Interval: "Intervalo",
            "Intraday Momentum Index": "Índice de momentum intradiário",
            "Intraday Mtm": "Mtm intradiário",
            Jaw: "Queixo",
            "Jaw Offset": "Offset queixo",
            "Jaw Period": "Período queixo",
            Kagi: "Kagi",
            Keltner: "Keltner",
            "Keltner Bottom": "Fundo Keltner",
            "Keltner Channel": "Canal Keltner",
            "Keltner Median": "Média Keltner",
            "Keltner Top": "Topo Keltner",
            Klinger: "Klinger",
            "Klinger Volume Oscillator": "Oscilador de volume Klinger",
            KlingerSignal: "KlingerSignal",
            KST: "KST",
            KSTSignal: "KSTSignal",
            "Lagging Span": "Intervalo de liderança",
            "Lagging Span Period": "Período de duração de lag",
            "Leading Span A": "Intervalo de liderança A",
            "Leading Span B": "Intervalo de liderança B",
            "Leading Span B Period": "Intervalo de liderança período B",
            "Level Offset": "Nivelar Offset",
            Levels: "Níveis",
            "Light Rate of Change Period": "Período de baixa taxa de troca",
            "Light SMA Period": "Período SMA baixo",
            "Lightest Rate of Change Period": "Período de menor taxa de troca",
            "Lightest SMA Period": "Período SMA mais leve",
            "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.":
              "Como todos os comerciantes ChartIQ, o próprio objecto é gerido pelo gráfico e, como tal, quando você faz deslizar o gráfico, o objecto move-se consigo. Ele é também destruído, automaticamente, para si, quando o símbolo é alterado.",
            "Limit Move Value": "Valor limite de movimento",
            "Lin Fcst": "Previsão de linha",
            "Lin Incpt": "Lin Incpt",
            "Lin R2": "Lin R2",
            Line: "Linha",
            "Line Break": "Quebra de linha",
            "Line/Bar Chart": "Gráfico de Linha/Barra",
            "Linear Reg Forecast": "Previsão reg linear",
            "Linear Reg Intercept": "Interceção reg linear",
            "Linear Reg R2": "reg linear R2",
            "Linear Reg Slope": "Inclinação reg linear",
            Lips: "Lábios",
            "Lips Offset": "Offset lábios",
            "Lips Period": "Período lábios",
            Locale: "Localidade",
            "Log Scale": "Logarítmica",
            "Long Cycle": "Ciclo longo",
            "Long RoC": "RoC longo",
            Loss: "Perda",
            Low: "Baixo",
            "Low Period": "Período baixo",
            "Lowest Low Value": "Valor mais baixo dos baixos",
            "LR Slope": "Declive LR",
            M: "MINUTO",
            "M Flow": "Fluxo M",
            MA: "MA",
            ma: "ma",
            "MA Env": "Env MA",
            "MA Env Bottom": "Env MA fundo",
            "MA Env Median": "Env MA médio",
            "MA Env Top": "Env MA Topo",
            "MA Period": "Período MA",
            MACD: "MACD",
            "Market Data": "Dados de mercado",
            "Market Facilitation Index": "Índice de facilitação de mercado",
            "Mass Idx": "Índice de massa",
            "Mass Index": "Índice de massa",
            "Maximum AF": "AF máximo",
            mean: "significado",
            Measure: "Medir",
            "Med Price": "Preço médio",
            median: "mediano",
            "Median Price": "Preço médio",
            "Min Tick Value": "Valor Tick min.",
            "Minimum AF": "AF mínimo",
            Momentum: "Momentum",
            "Momentum Indicator": "Indicador de momentum",
            "Money Flow Index": "Índice de fluxo monetário",
            More: "Mais",
            "More studies": "Mais estudos",
            Mountain: "Montanha",
            "Mountain Charts": "Gráficos em forma de montanha",
            "Mountain Color": "Cor de Montanha",
            "Moving Average": "Média móvel",
            "Moving Average Deviation": "Movendo o Desvio Médio",
            "Moving Average Envelope": "Envelope média móvel",
            "Moving Average Type": "Tipo de média móvel",
            ms: "Milésima de segundo",
            Multiplier: "Multiplicador",
            Name: "Nome",
            "Neg Vol": "Vol neg",
            "Negative Bar": "Barra negativa",
            "Negative Volume Index": "Índice de volume negativo",
            Neutral: "Neutro",
            "New Custom Theme": "Novo tema personalizado",
            "New Theme": "Novo Tema",
            "New Theme Name": "Novo nome do tema",
            "New Theme Name:": "Novo nome do tema:",
            Night: "Noite",
            None: "Nenhum",
            "None available": "Nenhum disponível",
            "Not enough data to compute": "Dados insuficientes para processar",
            Offset: "Offset",
            "On Bal Vol": "Vol On Ball",
            "On Balance Volume": "Volume balanceado",
            Open: "Abrir",
            "Open shared chart in new window":
              "Abrir o gráfico partilhado numa nova janela",
            or: "ou",
            OverBought: "Sobrecompra",
            Overlay: "Sobreposição",
            OverSold: "Sobrevenda",
            "P Rel": "Rel P",
            Palatino: "Palatino",
            "Parabolic SAR": "SAR parabólico",
            Percent: "Por cento",
            percent: "por cento",
            "Perf Idx": "Índice Perf",
            "Performance Index": "Índice de desempenho",
            Period: "Período",
            pips: "pips",
            Pitchfork: "Forquilha",
            Pivot: "Eixo",
            "Pivot Points": "Pontos de rotação",
            "Plot Type": "Tipo de parcela",
            PMO: "PMO",
            PMOSignal: "PMOSignal",
            "Point & Figure": "Ponto & Figura",
            Points: "Pontos",
            points: "pontos",
            "Points Or Percent": "Pontos ou percentagem",
            "Popular Studies": "Estudos populares",
            "Pos Vol": "Vol pos",
            "Positive Bar": "Barra positiva",
            "Positive Volume Index": "Índice de volume positivo",
            "Press this button to generate a shareable image:":
              "Presione este botão para criar uma imagem partilhável:",
            "Pretty Good": "Bastante bom",
            "Pretty Good Oscillator": "Oscilador PGO",
            Price: "Preço",
            "Price Minimum": "Preço mínimo",
            "Price Momentum Oscillator": "Oscilador de momentum de preço",
            "Price Osc": "Osc preço",
            "Price Oscillator": "Oscilador de preço",
            "Price Rate of Change": "Taxa de variação de preço",
            "Price Relative": "Relativo de preço",
            "Price ROC": "Preço ROC",
            "Price Vol": "Vol de preço",
            "Price Volume Trend": "Tendência volume de preço",
            "Prime Bands Bottom": "Fundo bandas primárias",
            "Prime Bands Channel": "Canal bandas primárias",
            "Prime Bands Top": "Topo bandas primárias",
            "Prime Number": "Número primo",
            "Prime Number Bands": "Bandas de números primos",
            "Prime Number Oscillator": "Oscilador de número primo",
            "Pring's Know Sure Thing": "Pring sabe algo garantido",
            "Pring's Special K": "Special K da Pring",
            "Psychological Line": "Linha Psicológica",
            QStick: "QStick",
            "Quadrant Lines": "Linhas Quadrantes",
            "Rainbow Moving Average": "Média de movimento arco-íris",
            "Rainbow Oscillator": "Oscilador arco-íris",
            "Random Walk": "Percurso aleatório",
            "Random Walk High": "Alto percurso aleatório",
            "Random Walk Index": "Índice de percurso aleatório",
            "Random Walk Low": "Baixo percurso aleatório",
            "Range Bars": "Barras de intervalo",
            "Range Selector": "Seletor de Gama",
            "Rate Of Change": "Taxa de mudança",
            RAVI: "RAVI",
            Ray: "Raio",
            Rectangle: "Retângulo",
            Redo: "Refazer",
            "Regression Line": "Linha de Regressão",
            "Rel Vig": "Vig rel",
            "Rel Vol": "Vol rel",
            "Relative Vigor Index": "Índice de vigor relativo",
            "Relative Volatility": "Volatilidade relativa",
            RelVigSignal: "RelVigSignal",
            Renko: "Renko",
            "Resistance 1": "Resistência 1",
            "Resistance 2": "Resistência 2",
            "Resistance 3": "Resistência 3",
            Result: "Resultado",
            Retracement: "Retração",
            "right-click to delete": "Botão direito do mouse para apagar",
            "right-click to manage": "Botão direito do mouse para gerenciar",
            "Risk/Reward": "Risco/recompensa",
            RSI: "RSI",
            RSquared: "RSquared",
            s: "segundo",
            save: "guardado",
            Save: "Guardar",
            "Save Theme": "Guardar",
            "Save View": "Guardar Visão",
            "Saved View": "Visão Guardada",
            "Saved Views": "Visualizações Guardadas",
            "Scale Factor": "Factor Escala",
            Schaff: "Schaff",
            "Schaff Trend Cycle": "Ciclo de tendência de Schaff",
            Search: "Procurar",
            Segment: "Segmento",
            "Select Tool": "Selecionar",
            "Sell Stops": "Vender paragens",
            Series: "Séries",
            "Set Point & Figure Parameters":
              "Definir Parâmetros de Ponto & Figura",
            "Set Price Lines": "Definir Linhas de Preço",
            "Set Range": "Definir Variação",
            "Set Reversal Percentage": "Definir Percentagem de Reversão",
            Settings: "Configurações",
            Shading: "Sombreamento",
            Shape: "Forma",
            "Shape - Arrow": "Forma - Seta",
            "Shape - Check": "Forma - Verificar",
            "Shape - Cross": "Forma - Cruzar",
            "Shape - Focus": "Forma - Foco",
            "Shape - Heart": "Forma - Coração",
            "Shape - Star": "Forma - Estrela",
            Share: "Partilhar",
            "Share This Chart": "Partilhar este gráfico",
            "Share Your Chart": "Partilhar o Seu Gráfico",
            Shift: "Deslocação",
            "Shift Percentage": "Percentagem de deslocamento",
            "Shift Type": "Tipo de desvio",
            "Shinohara Intensity Ratio": "Relação de Intensidade Shinohara",
            "Short Cycle": "Ciclo curto",
            "Short RoC": "RoC curto",
            "Show All": "Mostrar tudo",
            "Show Fractals": "Mostrar fractais",
            "Show Zones": "Mostrar zonas",
            Signal: "Sinalização",
            "Signal Period": "Período de sinalização",
            "Signal Periods": "Períodos de sinalização",
            Simple: "Simples",
            "Simple Circle": "Círculo Simples",
            "Simple Square": "Praça Simples",
            "Simulated data.": "Dados simulados.",
            Slope: "Declive",
            Slow: "Lento",
            "Slow MA Period": "Período MA lento",
            SMA1: "SMA1",
            SMA10: "SMA10",
            SMA2: "SMA2",
            SMA3: "SMA3",
            SMA4: "SMA4",
            SMA5: "SMA5",
            SMA6: "SMA6",
            SMA7: "SMA7",
            SMA8: "SMA8",
            SMA9: "SMA9",
            Smooth: "Suave",
            "Smoothing Period": "Período de nivelamento",
            "Speed Resistance Arc": "Arco de Resistência Velocidade",
            "Speed Resistance Line": "Linha de Resistência Velocidade",
            SPY: "ESPIÃO",
            Squarewave: "Squarewave",
            squarewave: "squarewave",
            Squat: "Squat",
            standard: "padrão",
            "Standard Deviation": "Desvio-padrão",
            "Standard Deviations": "Desvios-padrão",
            Star: "Estrella",
            "STARC Bands": "Bandas STARC",
            "STARC Bands Bottom": "Fundo de bandas STARC",
            "STARC Bands Median": "Mediana de bandas STARC",
            "STARC Bands Top": "Topo de bandas STARC",
            "Stch Mtm": "Stch Mtm",
            "STD Dev": "STD Dev",
            "STD Period": "Período STD",
            "Stochastic Momentum Index": "Índice Momentum estocástico",
            Stochastics: "Estocásticos",
            STOCKS: "TÍTULOS",
            "Stop Levels": "Níveis de paragem",
            "Stop Loss": "Parar com perda",
            Stops: "Paragens",
            "Strong Ratio": "Ratio Forte",
            Studies: "Estudos",
            Study: "Estudo",
            Supertrend: "Supertendência",
            "Support 1": "Suporte 1",
            "Support 2": "Suporte 2",
            "Support 3": "Apoio 3",
            Swing: "Oscilação",
            "Swing Index": "Índice de oscilação",
            Symbol: "Símbolo",
            T: "Marcar",
            "Take Profit": "Recolher lucros",
            Teeth: "Dentes",
            "Teeth Offset": "Offset dentes",
            "Teeth Period": "Período dentes",
            Themes: "Temas",
            "This is a callout marker": "Este é um marcador de callout",
            "This is an example of a complex marker which can contain html, video, images, css, and animations.":
              "Este é um exemplo de um marcador complexo que pode conter animações, vídeo, imagens, css e html.",
            TII: "TII",
            "Time Cycle": "Ciclo de Tempo",
            "Time Fcst": "Previsão de tempo",
            "Time Series": "Séries Cronológicas",
            "Time Series Forecast": "Previsão de tempo das series",
            "Time Zone": "Fuso horário",
            "Times New Roman": "Times New Roman",
            Timezone: "Fuso horário",
            "Tirone Levels": "Níveis de Tirone",
            "To set your timezone use the location button below or scroll through the following list":
              "Para definir o seu fuso horário utilize o botão de localização abaixo ou navegue pela lista seguinte",
            "To set your timezone use the location button below, or scroll through the following list...":
              "Para definir o uso do seu fuso horário no botão de localização abaixo ou percorrer a lista seguinte...",
            "Tolerance Percentage": "Percentagem de tolerância",
            "Trade Vol": "Vol de negócios",
            "Trade Volume Index": "Índice de volume de negócios",
            "Trend Intensity Index": "Índice de Intensidade de Tendência",
            Triangular: "Triangular",
            "Triple Exponential": "Triplicar Exponencia",
            TRIX: "TRIX",
            "True Range": "Intervalo real",
            Twiggs: "Twiggs",
            "Twiggs Money Flow": "Fluxo monetário Twiggs",
            Type: "Tipo",
            "Typical Price": "Preço típico",
            "Ulcer Index": "Índice Ulcer",
            Ultimate: "Ultimar",
            "Ultimate Oscillator": "Derradeiro oscilador",
            Underlay: "Subjacente",
            Undo: "Retroceder",
            Units: "Unidades",
            "Unrealized Gain/Loss": "Ganhos/perdas não realizadas",
            "Up Volume": "Subir volume",
            "Uploading Image": "Carregando Imagem",
            Uptrend: "Tendência de aumentar",
            "Use My Current Location": "Utilizar a minha localização atual",
            "Use the following link to share your chart:":
              "Utilize a seguinte ligação para partilhar o seu gráfico",
            "Use Volume": "Utilize volume",
            "Valuation Lines": "Linhas de Avaliação",
            Variable: "Variável",
            Vchart: "Vchart",
            vdma: "vdma",
            Vertical: "Vertical",
            "Vertical Horizontal Filter": "Filtro horizontal vertical",
            VIDYA: "VIDYA",
            Views: "Visualizações",
            Vol: "Vol",
            "Vol Osc": "Osc vol",
            "vol profile": "Perfil do vol",
            "Vol ROC": "Vol ROC",
            "vol undr": "vol abai",
            Volume: "Volume",
            "Volume % of Avg": "Percentagem de volume na média",
            "Volume Candle": "Vela de volume",
            "Volume Chart": "Gráfico de volume",
            "Volume Not Available": "Volume Não Disponível",
            "Volume Oscillator": "Oscilador de volume",
            "Volume Profile": "Perfil do volume",
            "Volume Rate of Change": "Taxa de variação de volume",
            "Volume Spike": "Pico de volume",
            "Volume Underlay": "Vol subjacente",
            "Vortex Indicator": "Indicador de Vórtice",
            "VT HZ Filter": "Filtro VT HZ",
            VWAP: "VWAP",
            W: "Semanal",
            "W Acc Dist": "W Acc Dist",
            "Weak Ratio": "Ratio Fraca",
            weekly: "semanal",
            Weighted: "Ponderado",
            "Weighted Close": "Peso próximo",
            "Welles Wilder": "Welles Wilder",
            White: "Branco",
            "Williams %R": "Williams %R",
            "Your timezone is your current location":
              "O seu fuso horário é a sua localização actual",
            YTD: "YTD",
            ZigZag: "ZigZag",
            "3 Min": ",",
            "3m": ",",
          },
          ru: {
            "-DI": "-DI",
            "-VI": "-VI",
            "(Scroll for more options)":
              "(Прокрутить для выбора других вариантов)",
            "(UTC-01:00) Azores": "(UTC-01:00) Азорские острова",
            "(UTC-01:00) Cape Verde Islands": "(UTC-01:00) Кабо-Верде",
            "(UTC-02:00) Mid-Atlantic":
              "(UTC-02:00) Центральноатлантическое время",
            "(UTC-03:00) Buenos Aires": "(UTC-03:00) Буэнос-Айрес",
            "(UTC-03:00) Montevideo": "(UTC-03:00) Монтевидео",
            "(UTC-03:00) Punta Arenas": "(UTC-03:00) Пунта-Аренас",
            "(UTC-03:00) Sao Paulo": "(UTC-03:00) Сан-Паулу",
            "(UTC-03:30) Newfoundland and Labrador":
              "(UTC-03:30) Ньюфаундленд и Лабрадор",
            "(UTC-04:00) Asuncion": "(UTC-04:00) Асунсьон",
            "(UTC-04:00) Atlantic Time (Canada)":
              "(UTC-04:00) Атлантическое время (Канада)",
            "(UTC-04:00) Caracas": "(UTC-04:00) Каракас",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "(UTC-04:00) Джорджтаун, Ла-Пас, Манаус, Сан-Хуан",
            "(UTC-04:00) Santiago": "(UTC-04:00) Сантьяго",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "(UTC-05:00) Богота, Лима, Кито, Рио-Бланко",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "(UTC-05:00) Восточное время (США и Канада)",
            "(UTC-05:00) Indiana (East)": "(UTC-05:00) Индиана",
            "(UTC-06:00) Central America": "(UTC-06:00) Центральная Америка",
            "(UTC-06:00) Central Time (US and Canada)":
              "(UTC-06:00) Центральное время (США и Канада)",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "(UTC-06:00) Гуадалахара, Мехико, Монтеррей",
            "(UTC-06:00) Saskatchewan": "(UTC-06:00) Саскачеван",
            "(UTC-07:00) Arizona": "(UTC-07:00) Аризона",
            "(UTC-07:00) Chihuahua, Mazatlan": "(UTC-07:00) Чиуауа, Масатлан",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "(UTC-07:00) Зимнее время (США и Канада)",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "(UTC-08:00) Тихоокеанское время (США и Канада)",
            "(UTC-08:00) Tijuana": "(UTC-08:00) Тихуана",
            "(UTC-09:00) Alaska": "(UTC-09:00) Аляска",
            "(UTC-10:00) Hawaii": "(UTC-10:00) Гавайи",
            "(UTC-11:00) American Samoa, Midway Island":
              "(UTC-11:00) Американское Самоа, острова Мидуэй",
            "(UTC) Casablanca": "(UTC) Касабланка",
            "(UTC) Dublin": "(UTC) Дублин",
            "(UTC) Lisbon, London": "(UTC) Лиссабон, Лондон",
            "(UTC) Greenwich Mean Time, Reykjavik": "(UTC) Гринвич, Рейкьявик",
            "(UTC+01:00) Algiers, Tunis": "(UTC+01:00) Алжир, Тунис",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "(UTC+01:00) Амстердам, Берлин, Берн, Рим, Стокгольм, Вена",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "(UTC+01:00) Белград, Братислава, Будапешт, Любляна, Прага",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "(UTC+01:00) Брюссель, Копенгаген, Мадрид, Париж",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "(UTC+01:00) Сараево, Скопье, Варшава, Загреб",
            "(UTC+02:00) Athens, Bucharest": "(UTC+02:00) Афины, Бухарест",
            "(UTC+02:00) Cairo": "(UTC+02:00) Каир",
            "(UTC+02:00) Cyprus": "(UTC+02:00) Кипр",
            "(UTC+02:00) Harare, Johannesburg":
              "(UTC+02:00) Хараре, Йоханнесбург",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "(UTC+02:00) Хельсинки, Киев, Рига, София, Таллин, Вильнюс",
            "(UTC+02:00) Jerusalem": "(UTC+02:00) Иерусалим",
            "(UTC+02:00) Kaliningrad": "(UTC+02:00) Калининград",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "(UTC+03:00) Багдад, Кувейт, Катар, Эр-Рияд",
            "(UTC+03:00) Istanbul": "(UTC+03:00) Стамбул",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "(UTC+03:00) Минск, Москва, Киров, Волгоград",
            "(UTC+03:00) Nairobi": "(UTC+03:00) Найроби",
            "(UTC+03:00) Simferopol": "(UTC+03:00) Симферополь",
            "(UTC+03:30) Tehran": "(UTC+03:30) Тегеран",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "(UTC+04:00) Астрахань, Самара, Саратов, Ульяновск",
            "(UTC+04:00) Baku": "(UTC+04:00) Баку",
            "(UTC+04:00) Dubai, Muscat": "(UTC+04:00) Дубай, Маскат",
            "(UTC+04:30) Kabul": "(UTC+04:30) Кабул",
            "(UTC+05:00) Karachi, Tashkent": "(UTC+05:00) Карачи, Ташкент",
            "(UTC+05:00) Yekaterinburg": "(UTC+05:00) Екатеринбург",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "(UTC+05:30) Ченнай, Калькутта, Мумбаи, Нью-Дели",
            "(UTC+05:45) Kathmandu": "(UTC+05:45) Катманду",
            "(UTC+06:00) Almaty": "(UTC+06:00) Алма-Аты",
            "(UTC+06:00) Astana, Dhaka": "(UTC+06:00) Астана, Дакка",
            "(UTC+06:00) Omsk": "(UTC+06:00) Омск",
            "(UTC+06:30) Yangon": "(UTC+06:30) Янгон (Рангун)",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "(UTC+07:00) Бангкок, Джакарта, Вьетнам",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "(UTC+07:00) Барнаул, Новосибирск, Томск",
            "(UTC+07:00) Hovd": "(UTC+07:00) Ховд",
            "(UTC+07:00) Krasnoyarsk": "(UTC+07:00) Красноярск",
            "(UTC+07:00) Novokuznetsk": "(UTC+07:00) Новокузнецк",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "(UTC+08:00) Пекин, Чунцин, Гонконг",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "(UTC+08:00) Бруней, Куала-Лумпур, Сингапур",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "(UTC+08:00) Чойбалсан, Улан-Батор",
            "(UTC+08:00) Irkutsk": "(UTC+08:00) Иркутск",
            "(UTC+08:00) Manila, Taipei": "(UTC+08:00) Манила, Тайбэй",
            "(UTC+08:00) Perth": "(UTC+08:00) Перт",
            "(UTC+08:45) Eucla": "(UTC+08:45) Евкла",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "(UTC+09:00) Чита, Хандыга, Якутск",
            "(UTC+09:00) Osaka, Sapporo, Tokyo":
              "(UTC+09:00) Осака, Саппоро, Токио",
            "(UTC+09:00) Pyongyang": "(UTC+09:00) Пхеньян",
            "(UTC+09:00) Seoul": "(UTC+09:00) Сеул",
            "(UTC+09:30) Adelaide": "(UTC+09:30) Аделаида",
            "(UTC+09:30) Darwin": "(UTC+09:30) Дарвин",
            "(UTC+10:00) Brisbane": "(UTC+10:00) Брисбен",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "(UTC+10:00) Канберра, Мельбурн, Сидней",
            "(UTC+10:00) Guam, Port Moresby": "(UTC+10:00) Гуам, Порт-Морсби",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "(UTC+10:00) Усть-Нера, Владивосток",
            "(UTC+11:00) Magadan": "(UTC+11:00) Магадан",
            "(UTC+11:00) Noumea, Solomon Islands":
              "(UTC+11:00) Нумеа, Соломоновы острова",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "(UTC+11:00) Сахалин, Среднеколымск",
            "(UTC+12:00) Anadyr, Kamchatka": "(UTC+12:00) Анадырь, Камчатка",
            "(UTC+12:00) Auckland, Wellington":
              "(UTC+12:00) Окленд, Веллингтон",
            "(UTC+12:45) Chatham": "(UTC+12:45) Чатем",
            "(UTC+13:00) Samoa": "(UTC+13:00) Самоа",
            "(UTC+13:00) Tonga": "(UTC+13:00) Тонга",
            "(UTC+14:00) Kiritimati": "(UTC+14:00) Киримати",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "Тип скользящего среднего %D",
            "%D Periods": "Периоды %D",
            "%K": "%K",
            "%K Double Smoothing Periods": "Периоды двойного сглаживания %K",
            "%K Periods": "Периоды %K",
            "%K Smoothing Periods": "Периоды сглаживания %K",
            "+DI": "+DI",
            "+VI": "+VI",
            "1 D": "1 Д",
            "1 Hour": "1 час",
            "1 Min": "1 Мин",
            "1 Mo": "1 Мес",
            "1 Standard Deviation (1σ)":
              "Среднеквадратическое отклонение 1 (1σ)",
            "1 W": "1 Н",
            "10 Min": "10 мин",
            "10m": "10m",
            "13px": "13px",
            "15 Min": "15 мин",
            "15m": "15m",
            "1D": "1д",
            "1H": "1час",
            "1m": "1m",
            "1M": "1мес",
            "1W": "1Н",
            "1Y": "1г",
            "2 Standard Deviation (1σ)":
              "Среднеквадратическое отклонение 2 (1σ)",
            "2 Standard Deviation (2σ)":
              "Среднеквадратическое отклонение 2 (2σ)",
            "3 Standard Deviation (1σ)":
              "Среднеквадратическое отклонение 3 (1σ)",
            "3 Standard Deviation (3σ)":
              "Среднеквадратическое отклонение 3 (3σ)",
            "30 Min": "30 мин",
            "30m": "30m",
            "3M": "3мес",
            "4 Hour": "4 часа",
            "4H": "4часа",
            "5 Min": "5 Мин",
            "5D": "5д",
            "5m": "5m",
            "5Y": "5лет",
            "6M": "6мес",
            Abstract: "Абстрактн.",
            "Acc Swing": "Кумулятивный индекс колебаний",
            "Accumulation/Distribution": "Индикатор накопления/распределения",
            "Accumulative Swing Index": "Кумулятивный индекс колебаний",
            Add: "Добавить",
            ADD: "добавить",
            "Add Stop Loss": "Добавить стоп-лосс",
            "Add Take Profit": "Добавить тейк-профит",
            ADX: "ADX",
            "ADX/DMS": "ADX/DMS",
            ALL: "ВСЕ",
            "All-Time High Lookback Period":
              "Период ретроспективного анализа абсолютных максимумов",
            Alligator: "Аллигатор",
            Annotation: "Примечание",
            Arc: "Дуга",
            Aroon: "Арун",
            "Aroon Down": "Арун (вниз)",
            "Aroon Osc": "Осциллятор Арун",
            "Aroon Oscillator": "Осциллятор Арун",
            "Aroon Up": "Арун (вверх)",
            Arrow: "Стрелка",
            "ATH Lookback Period": "Период ATH",
            ATR: "ATR",
            "ATR Bands": "Полосы ATR",
            "ATR Bands Bottom": "Нижняя граница полос ATR",
            "ATR Bands Channel": "Канал полос ATR",
            "ATR Bands Top": "Верхняя граница полос ATR",
            "ATR Trailing Stop": "Скользящий стоп ATR",
            "ATR Trailing Stops": "Скользящие стопы ATR",
            "Auto Select": "Автоматическое выделение",
            Average: "Среднее",
            "Average Line": "Средняя линия",
            "Average True Range": "Средний истинный диапазон (ATR)",
            "Average Type": "Тип среднего",
            Awesome: "Великолепно",
            "Awesome Oscillator": "Волшебный осциллятор",
            "Axis Label": "Обозначение оси",
            "Axis Label:": "Обозначение оси:",
            "Axis Text": "Тест оси",
            B: "Ж",
            Background: "Фон",
            "Background Color": "Фоновый цвет",
            "Balance of Power": "Баланс мощности",
            Bandwidth: "Ширина полосы",
            Bar: "Бар",
            Bars: "Полосы",
            "Bars Color": "Цвет столбцов",
            "Base Line": "Базовая линия",
            "Base Line Period": "Период усреднения базовой линии",
            Baseline: "Основная линия",
            "Baseline Delta": "изменение по сравнению с исходным",
            "BATS BZX real-time.": "BATS BZX в режиме реального времени.",
            Bearish: "Медвежий",
            Beta: "Бета-версия",
            "Beta Callouts Candle Border": "Границы свечи",
            Black: "Черная",
            "Boll %b": "%b Боллинджера",
            "Boll BW": "Ширина полосы Боллинджера",
            "Bollinger %b": "%b Боллинджера",
            "Bollinger Bands": "Полоса Боллинджера",
            "Bollinger Bands Bottom": "Полосы Боллинджера (нижний уровень)",
            "Bollinger Bands Median": "Полосы Боллинджера (медианный уровень)",
            "Bollinger Bands Top": "Полосы Боллинджера (верхний уровень)",
            "Bollinger Bandwidth": "Ширина полосы Боллинджера",
            Border: "Контур",
            "Bulge Threshold": "Порог повышения",
            Bullish: "Бычий",
            "Buy Stops": "Стопы на покупку",
            "by Xignite.": " по Xignite.",
            Callout: "Сноска",
            Callouts: "Позиции",
            cancel: "отмена",
            Candle: "Свеча",
            "Candle Border": "Контур свечи",
            "Candle Borders": "Границы свечи",
            "Candle Color": "Цвет свечи",
            "Candle Wick": "Тень свеч",
            Candles: "Свечи",
            "Center Of Gravity": "Центр тяжести",
            "Chaikin MF": "Денежный поток Чайкина",
            "Chaikin Money Flow": "Денежный поток Чайкина",
            "Chaikin Vol": "Волатильность Чайкина",
            "Chaikin Volatility": "Волатильность Чайкина",
            "Chande Fcst": "Предсказующий осциллятор Чанде",
            "Chande Forecast Oscillator": "Предсказующий осциллятор Чанде",
            "Chande Momentum Oscillator": "Моментум-осциллятор Чанде",
            "Chande Mtm": "Моментум-осциллятор Чанде",
            "Change Timezone": "Изменить часовой пояс",
            Channel: "Канал",
            "Channel Fill": "Заполнение канала",
            Chart: "График",
            "Chart Preferences": "Настройки графика",
            "Chart Scale": "Шкала графика",
            "Chart Shared Successfully!": "График успешно опубликован!",
            "Chart Style": "Тип графика",
            "Chart Type": "Тип графика",
            Check: "Галочка",
            "Choose language": "Выбор языка",
            "Choose Timezone": "Выбор врем. пояса",
            "Choppiness Index": "Индекс зыбучести",
            Clear: "Очистить",
            "Clear All": "Очистить все",
            "Clear Drawings": "Удалить изображения",
            Close: "Закрыть",
            close: "закрыть",
            Color: "Цвет",
            "Colored Bar": "Цветной бар",
            "Colored Line": "цветной линия",
            COMMODITIES: "ТОВАРЫ",
            "Commodity Channel Index": "Индекс товарного канала",
            Compare: "Сравнить",
            "Comparison Symbol": "Символ сравнения",
            Composite: "Составной",
            "Composite RSI": "Составной индекс относительной силы (RSI)",
            Continuous: "Непрерывный",
            "Conversion Line": "Конверсионная линия",
            "Conversion Line Period": "Период усреднения конверсионной линии",
            Coppock: "Коппок",
            "Coppock Curve": "Кривая Коппока",
            Correl: "Корреляция",
            Correlation: "Корреляция",
            "Correlation Coefficient": "Коэффициент корреляции",
            Courier: "Courier",
            Create: "Создать",
            "Create a New Custom Theme": "Создать новую пользовательскую тему",
            "Create Custom Theme": "Пользовательская тема",
            "Create Image": "Создать изображение",
            Cross: "Крест",
            Crosshair: "Перекрестие",
            Crosshairs: "Перекрестья",
            Crossline: "Линия пересечения",
            CURRENCIES: "ВАЛЮТЫ",
            "Current Studies": "Текущая аналитика",
            "Current Symbols": "Используемые символы",
            "Current TimeZone is": "Текущий часовой пояс:",
            "Custom Themes": "Пользовательские темы",
            "Cycle 1": "Цикл 1",
            "Cycle 2": "Цикл 2",
            "Cycle 3": "Цикл 3",
            D: "Д",
            daily: "ежедневный",
            Darvas: "Дарвас",
            "Darvas Box": "Область Дарваса",
            "Data delayed 15 min.": "Данные с задержкой 15 мин.",
            "Data is randomized.": "Данные рандомизированных.",
            "Data is real-time.": "Данные в режиме реального времени.",
            "Date Dividers": "Разделители дат",
            "Date/Time": "Дата/время",
            "Date/Time:": "Дата/время:",
            Day: "День",
            "Days Per Year": "Дней в году",
            "Decreasing Bar": "Столбец падения",
            Default: "По умолчанию",
            "Default Themes": "Исходные темы",
            Delete: "Удалить",
            "Delete Study": "Удалить аналитику",
            "Demo data.": "Демо-данные.",
            Detrended: "Бестрендовая",
            "Detrended Price Oscillator": "Осциллятор бестрендовой цены",
            Directional: "Направленный",
            "Disparity Index": "Индекс диспаритета",
            Display: "Отображение",
            "Display 1 Standard Deviation (1σ)":
              "Отображать среднеквадратическое отклонение 1 (1σ)",
            "Display 2 Standard Deviation (2σ)":
              "Отображать среднеквадратическое отклонение 2 (2σ)",
            "Display 3 Standard Deviation (3σ)":
              "Отображать среднеквадратическое отклонение 3 (3σ)",
            "Display Average": "Отображать среднее",
            "Distance(%)": "Расстояние (%)",
            Divergence: "Дивергенция",
            "Don't see your study below? Type in your search here.":
              "Не видите результатов своего анализа ниже? Впишите предмет Вашего поиска сюда.",
            "Donchian Channel": "Канал Дончиана",
            "Donchian High": "Канал Дончиана (высокий уровень)",
            "Donchian Low": "Канал Дончиана (низкий уровень)",
            "Donchian Median": "Канал Дончиана (медианный уровень)",
            "Donchian Width": "Ширина канала Дончиана",
            Done: "Готово",
            Doodle: "Произвольной формы",
            "Double Exponential": "Двойная экспоненциальная",
            "Double Smoothing Period": "Период двойного сглаживания",
            "Down Volume": "объем понижения",
            Downtrend: "Нисходящий тренд",
            Draw: "Рисование",
            "Ease of Movement": "Легкость движения",
            Edit: "Редактировать",
            "Edit Settings...": "Изменить настройки…",
            EF: "EF",
            "EF Trigger": "Триггер EF",
            "Ehler Fisher": "Преобразование Фишера по Элерсу (EF)",
            "Ehler Fisher Transform": "Преобразование Фишера",
            "Elder Bear Power": "Сила медведей по Элдеру",
            "Elder Bull Power": "Сила быков по Элдеру",
            "Elder Force": "Индекс силы Элдера",
            "Elder Force Index": "Индекс силы Элдера",
            "Elder Impulse System": "Импульсная система Элдера",
            "Elder Ray Index": "Луч Элдера",
            Ellipse: "Эллипс",
            ema: "экспоненциальная скользящая средняя",
            "End of day data.": "Данные полученные в конце рабочего дня.",
            'Enter box size and hit "Enter"':
              "Введите размер окна и нажмите Enter",
            "Enter name of view:": "Введите название панели:",
            'Enter reversal and hit "Enter"':
              "Введите точку разворота и нажмите Enter",
            "Enter Symbol": "Ввести символ",
            'Enter value and hit "Enter"': "Введите значение и нажмите Enter",
            Events: "События",
            "Exit Field": "Выйти из поля",
            Exponential: "Экспоненциальная",
            "Extended Hours": "Расширенные часы",
            Fade: "Угасание",
            Fake: "Фальсификация",
            Fan: "Веер",
            Fast: "Быстрый",
            "Fast MA Period": "Период быстрой скользящей средней",
            "Fib Arc": "Дуга Фибоначчи",
            "Fib Fan": "Веер Фибоначчи",
            "Fib Time Zone": "Часовой пояс Фибоначчи",
            Fibonacci: "Фибоначчи",
            fibonacci: "фибоначчи",
            Field: "Поле",
            field: "поле",
            Fill: "Заполнение",
            "Focus Arrow": "Сходящаяся стрелка",
            Forecast: "Прогноз",
            FOREX: "ФОРЕКС",
            "Formula courtesy": "Формула благодаря",
            "Fractal Channel": "Канал фракталов",
            "Fractal Chaos": "Фрактал/хаос",
            "Fractal Chaos Bands": "Полосы фрактала и хаоса",
            "Fractal Chaos Oscillator": "Осциллятор фракталов и хаоса",
            "Fractal High": "Фрактал (высокий)",
            "Fractal Low": "Фрактал (низкий)",
            FUNDS: "ФОНДЫ",
            FUTURES: "ФЬЮЧЕРСЫ",
            FX: "ФОРЕКС",
            Gain: "Прибыль",
            "Gann Fan": "Веер Ганна",
            Garamond: "Garamond",
            Gartley: "Гартли",
            Gator: "Гатор",
            "Gator Oscillator": "Осциллятор Гатор",
            "Generating Image": "Идет создание изображения…",
            Ghost: "Гост",
            "Ghost Boxes": "Области Госта",
            Gopala: "Гопала",
            "Gopalakrishnan Range Index": "Индекс диапазона Гопалакришнана",
            Gradient: "Градиент",
            Green: "Зеленый",
            "Grid Lines": "Линии сетки",
            H: "Ч",
            harmonic: "гармонич.",
            Heart: "Сердечко",
            "Heaviest Rate of Change Period":
              "Период тяжелейшей нормы изменений",
            "Heaviest SMA Period":
              "Период тяжелейшей простой скользящей средней",
            "Heavy Rate of Change Period": "Период тяжелой нормы изменений",
            "Heavy SMA Period": "Период тяжелой простой скользящей средней",
            "Heikin Ashi": "Хайкен Аши",
            "Heikin-Ashi": "Heikin-Ashi",
            Helvetica: "Helvetica",
            "HHV/LLV Lookback": "Ретроспективный обзор HHV/LLV",
            High: "Максимум",
            "High Low": "Высокий/низкий",
            "High Low Bands": "Высокие/низкие полосы",
            "High Low Bottom": "Высокий/низкий/минимальный",
            "High Low Median": "Высокий/низкий/медианный",
            "High Low Top": "Высокий/низкий/максимальный",
            "High Minus Low": "Высокий минус низкий",
            "High Period": "Высокий период",
            "High-Low": "Высокий-низкий",
            "high/low": "максимум/минимум",
            "Highest High Value": "Максимальное/высокое значение",
            HighLow: "Высокий/низкий",
            "Hist Vol": "Статистика волатильности",
            Histogram: "Гистограмма",
            "Historical Volatility": "Статистика волатильности",
            "Hollow Candle": "Полая свеча",
            Horizontal: "Горизонт.",
            Hull: "Халл",
            I: "К",
            "Ichimoku Clouds": "Облака Ишимоку",
            "Increasing Bar": "Столбец роста",
            Index: "Индекс",
            INDEXES: "ИНДЕКСЫ",
            INDICES: "ИНДЕКСЫ",
            Info: "Информация",
            Intercept: "Отрезок",
            Interval: "Интервал",
            "Intraday Momentum Index": "Индикатор внутридневного импульса",
            "Intraday Mtm": "Внутридневной импульс",
            Jaw: "Синяя линия (челюсти аллигатора)",
            "Jaw Offset": "Смещение синей линии",
            "Jaw Period": "Период усреднения синей линии",
            Kagi: "Kagi",
            Keltner: "Канал Кельтнера",
            "Keltner Bottom": "Канал Кельтнера (нижний уровень)",
            "Keltner Channel": "Канал Кельтнера",
            "Keltner Median": "Канал Кельтнера (медианный уровень)",
            "Keltner Top": "Канал Кельтнера (верхний уровень)",
            Klinger: "Клингер",
            "Klinger Volume Oscillator": "Объемный осциллятор Клингера",
            KlingerSignal: "Сигнал Клингера",
            KST: "KST",
            KSTSignal: "KSTSignal",
            "Lagging Span": "Период отставания",
            "Lagging Span Period": "Период отставания",
            "Leading Span A": "Период опережения A",
            "Leading Span B": "Период опережения B",
            "Leading Span B Period": "Период опережения B",
            "Level Offset": "Смещение уровня",
            Levels: "Уровни",
            "Light Rate of Change Period": "Период легкой нормы изменений",
            "Light SMA Period": "Период легкой простой скользящей средней",
            "Lightest Rate of Change Period":
              "Период легчайшей нормы изменений",
            "Lightest SMA Period":
              "Период легчайшей простой скользящей средней",
            "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.":
              "Как и в случае с остальными метками ChartIQ, объект привязан к графику; таким образом, при прокрутке графика он перемещается вместе с ним. Объект автоматически удаляется при смене инструмента.",
            "Limit Move Value": "Значение сдвига лимита",
            "Lin Fcst": "Линейный прогноз",
            "Lin Incpt": "Секущая",
            "Lin R2": "Линейный R2",
            Line: "Линия",
            "Line Break": "Разрыв строки",
            "Line/Bar Chart": "Линейный или барный график",
            "Linear Reg Forecast": "Прогноз линейной регрессии",
            "Linear Reg Intercept": "Отрезок линейной регрессии",
            "Linear Reg R2": "R2 линейной регрессии",
            "Linear Reg Slope": "Наклон линейной регрессии",
            Lips: "Зеленая линия (губы аллигатора)",
            "Lips Offset": "Смещение зеленый линии",
            "Lips Period": "Период усреднения зеленой линии",
            Locale: "Локаль",
            "Log Scale": "Лог. шкала",
            "Long Cycle": "Длинный цикл",
            "Long RoC": "Долговременная скорость изменения",
            Loss: "Убыток",
            Low: "Минимум",
            "Low Period": "Низкий период",
            "Lowest Low Value": "Минимальное/низкое значение",
            "LR Slope": "Наклон линейной регрессии",
            M: "М",
            "M Flow": "Денежный поток",
            MA: "MA",
            ma: "скользящее среднее",
            "MA Env": "Конверт скользящих средних",
            "MA Env Bottom": "Конверт скользящих средних (минимальный)",
            "MA Env Median": "Конверт скользящих средних (медианный)",
            "MA Env Top": "Конверт скользящих средних (максимальный)",
            "MA Period": "Период скользящей средней",
            MACD: "MACD",
            "Market Data": "Данные рынка",
            "Market Facilitation Index": "Индекс облегчения рынка",
            "Mass Idx": "Индекс массы",
            "Mass Index": "Индекс массы",
            "Maximum AF": "Макс. AF",
            mean: "среднее",
            Measure: "Измерить",
            "Med Price": "Мед. цена",
            median: "медиана",
            "Median Price": "Медианная цена",
            "Min Tick Value": "Минимальное значение тика",
            "Minimum AF": "Мин. AF",
            Momentum: "Темп",
            "Momentum Indicator": "Индикатор темпа",
            "Money Flow Index": "Индекс денежных потоков",
            More: "Еще",
            "More studies": "Другие исследования",
            Mountain: "Гора",
            "Mountain Charts": "Графики в виде линий с заполнением",
            "Mountain Color": "Цвет Mountain",
            "Moving Average": "Скользящее среднее",
            "Moving Average Deviation": "Отклонение скользящей средней",
            "Moving Average Envelope": "Конверт скользящих средних",
            "Moving Average Type": "Тип скользящего среднего",
            ms: "мс",
            Multiplier: "Мультипликатор",
            Name: "Имя",
            "Neg Vol": "Отрицательный объем",
            "Negative Bar": "Отрицательная граница",
            "Negative Volume Index": "Индекс отрицательного объема",
            Neutral: "Нейтральный",
            "New Custom Theme": "Создать пользовательскую тему",
            "New Theme": "Новая тема",
            "New Theme Name": "Название темы",
            "New Theme Name:": "Название новой темы:",
            Night: "Ночь",
            None: "Нет",
            "None available": "Доступных вариантов нет",
            "Not enough data to compute": "Недостаточно данных для вычисления",
            Offset: "Офсет",
            "On Bal Vol": "Балансовый объем",
            "On Balance Volume": "Балансовый объем",
            Open: "Открытие",
            "Open shared chart in new window":
              "Открыть опубликованный график в новом окне",
            or: "или",
            OverBought: "OverBought (перекупленность)",
            Overlay: "Основание",
            OverSold: "OverSold (перепроданность)",
            "P Rel": "Относительное значение цен",
            Palatino: "Palatino",
            "Parabolic SAR": "Параболическая система SAR",
            Percent: "Процент",
            percent: "процент",
            "Perf Idx": "Индекс эффективности",
            "Performance Index": "Индекс эффективности",
            Period: "Период",
            pips: "пипсы",
            Pitchfork: "Вилка",
            Pivot: "Разворот",
            "Pivot Points": "Точки разворота",
            "Plot Type": "Тип схемы",
            PMO: "PMO",
            PMOSignal: "PMOSignal",
            "Point & Figure": "Точка & Рис",
            Points: "Точки",
            points: "точки",
            "Points Or Percent": "Пункты или проценты",
            "Popular Studies": "Популярные исследования",
            "Pos Vol": "Волатильность позиций",
            "Positive Bar": "Положительная граница",
            "Positive Volume Index": "Индекс положительного объема",
            "Press this button to generate a shareable image:":
              "Нажмите эту кнопку, чтобы получить изображение, которым можно будет поделиться:",
            "Pretty Good": "Pretty Good",
            "Pretty Good Oscillator": "Осциллятор Pretty Good",
            Price: "Цена",
            "Price Minimum": "Ценовой минимум",
            "Price Momentum Oscillator": "Ценовой моментум-осциллятор",
            "Price Osc": "Осциллятор цены",
            "Price Oscillator": "Ценовой осциллятор",
            "Price Rate of Change": "Скорость изменения цены",
            "Price Relative": "Относительное значение цен",
            "Price ROC": "Скорость изменения цены",
            "Price Vol": "Волатильность цен",
            "Price Volume Trend": "Тренд цены и объема",
            "Prime Bands Bottom": "Полосы простых чисел (нижний уровень)",
            "Prime Bands Channel": "Канал полос простых чисел",
            "Prime Bands Top": "Полосы простых чисел (верхний уровень)",
            "Prime Number": "Простое число",
            "Prime Number Bands": "Полосы простых чисел",
            "Prime Number Oscillator": "Осциллятор простых чисел",
            "Pring's Know Sure Thing": "Индикатор Принга “Знать наверняка”",
            "Pring's Special K": "Индикатор Принга Special K",
            "Psychological Line": "Психологическая линия",
            QStick: "QStick",
            "Quadrant Lines": "Перпендикулярные линии",
            "Rainbow Moving Average": "Радужная скользящая средняя",
            "Rainbow Oscillator": "Радужный осциллятор",
            "Random Walk": "Случайное блуждание",
            "Random Walk High": "Случайное блуждание (высокий уровень)",
            "Random Walk Index": "Индекс случайного блуждания",
            "Random Walk Low": "Случайное блуждание (низкий уровень)",
            "Range Bars": "Пределы диапазона",
            "Range Selector": "Выбор диапазонов",
            "Rate Of Change": "Скорость изменения",
            RAVI: "RAVI",
            Ray: "Луч",
            Rectangle: "Прямоугольник",
            Redo: "Вернуть",
            "Regression Line": "Регресионная линия",
            "Rel Vig": "Относительная бодрость",
            "Rel Vol": "Относительная волатильность",
            "Relative Vigor Index": "Индекс относительной бодрости",
            "Relative Volatility": "Относительная волатильность",
            RelVigSignal: "Сигнал относительной бодрости",
            Renko: "Renko",
            "Resistance 1": "Устойчивость 1",
            "Resistance 2": "Устойчивость 2",
            "Resistance 3": "Устойчивость 3",
            Result: "Результат",
            Retracement: "Коррекция",
            "right-click to delete":
              "Щелкните правой кнопкой мыши чтобы удалить",
            "right-click to manage":
              "Щелкните правой кнопкой мыши чтобы управлять",
            "Risk/Reward": "Риск/Вознаграждение",
            RSI: "RSI",
            RSquared: "R-квадрат",
            s: "с",
            save: "сохранение",
            Save: "Сохранить",
            "Save Theme": "Сохранить",
            "Save View": "Сохранить отображение",
            "Saved View": "Сохраненные отображения",
            "Saved Views": "Сохраненные панели",
            "Scale Factor": "Фактор масштаба",
            Schaff: "Шафф",
            "Schaff Trend Cycle": "Трендовый цикл Шаффа",
            Search: "Поиск",
            Segment: "Сегмент",
            "Select Tool": "Выбор",
            "Sell Stops": "Стопы на продажу",
            Series: "Серия",
            "Set Point & Figure Parameters":
              "Установка параметров точки и фигуры",
            "Set Price Lines": "Установка линий цены",
            "Set Range": "Установка диапазона",
            "Set Reversal Percentage": "Установка обратного процента",
            Settings: "Настройки",
            Shading: "Незначительное понижение",
            Shape: "Форма",
            "Shape - Arrow": "Фигура - Стрелка",
            "Shape - Check": "Фигура - Галочка",
            "Shape - Cross": "Фигура - Крест",
            "Shape - Focus": "Фигура - Фокус",
            "Shape - Heart": "Фигура - Сердце",
            "Shape - Star": "Фигура - Звезда",
            Share: "Поделиться",
            "Share This Chart": "Поделиться этим графиком",
            "Share Your Chart": "Поделиться графиком",
            Shift: "Сдвиг",
            "Shift Percentage": "Процент заполнения",
            "Shift Type": "Тип сдвигу",
            "Shinohara Intensity Ratio": "Коэффициент интенсивности Синохара",
            "Short Cycle": "Короткий цикл",
            "Short RoC": "Кратковременная скорость изменения",
            "Show All": "Показать все",
            "Show Fractals": "Показать фракталы",
            "Show Zones": "Показать зоны",
            Signal: "Сигнал",
            "Signal Period": "Период сигнала",
            "Signal Periods": "Периоды сигнала",
            Simple: "Обыкновенная",
            "Simple Circle": "Обыкновенная окружность",
            "Simple Square": "Обыкновенный квадрат",
            "Simulated data.": "Симуляция данных",
            Slope: "Наклон",
            Slow: "Медленный",
            "Slow MA Period": "Период медленной скользящей средней",
            SMA1: "SMA1",
            SMA10: "SMA10",
            SMA2: "SMA2",
            SMA3: "SMA3",
            SMA4: "SMA4",
            SMA5: "SMA5",
            SMA6: "SMA6",
            SMA7: "SMA7",
            SMA8: "SMA8",
            SMA9: "SMA9",
            Smooth: "Плавный",
            "Smoothing Period": "Период сглаживания",
            "Speed Resistance Arc": "Дуга сопротивления",
            "Speed Resistance Line": "Линия сопротивления",
            SPY: "SPY",
            Squarewave: "Squarewave",
            squarewave: "прямоугольник",
            Squat: "Проседание",
            standard: "стандартный",
            "Standard Deviation": "Среднеквадратичное отклонение",
            "Standard Deviations": "Среднеквадратичные отклонения",
            Star: "Звездочка",
            "STARC Bands": "STARC-полосы",
            "STARC Bands Bottom": "Нижняя STARC-полоса",
            "STARC Bands Median": "Медиана STARC-полос",
            "STARC Bands Top": "Верхняя STARC-полоса",
            "Stch Mtm": "Стохастический темп",
            "STD Dev": "Ср-квадр отклонение",
            "STD Period": "Базисный период",
            "Stochastic Momentum Index": "Индекс стохастического темпа",
            Stochastics: "Стохастика",
            STOCKS: "АКЦИИ",
            "Stop Levels": "Уровни остановки",
            "Stop Loss": "Стоп-лосс",
            Stops: "Стопы",
            "Strong Ratio": "Сильное соотношение",
            Studies: "Моделирование",
            Study: "Аналитика",
            Supertrend: "Супертренд",
            "Support 1": "Поддержка 1",
            "Support 2": "Поддержка 2",
            "Support 3": "Поддержка 3",
            Swing: "Колебания",
            "Swing Index": "Индекс колебаний",
            Symbol: "Символ",
            T: "Т",
            "Take Profit": "Тейк-профит",
            Teeth: "Красная линия (зубы аллигатора)",
            "Teeth Offset": "Смещение красной линии",
            "Teeth Period": "Период усреднения красной линии",
            Themes: "Темы",
            "This is a callout marker": "Маркер элемента",
            "This is an example of a complex marker which can contain html, video, images, css, and animations.":
              "Пример сложного маркера, содержащего html, видео, изображения, css или анимацию.",
            TII: "TII",
            "Time Cycle": "Временной круг",
            "Time Fcst": "Временной прогноз",
            "Time Series": "Периоды",
            "Time Series Forecast": "Временной прогноз",
            "Time Zone": "Часовой пояс",
            "Times New Roman": "Times New Roman",
            Timezone: "Часовой пояс",
            "Tirone Levels": "Уровни Тирона",
            "To set your timezone use the location button below or scroll through the following list":
              "Для установки часового пояса используйте расположенную внизу кнопку местоположения или прокрутите следующий список",
            "To set your timezone use the location button below, or scroll through the following list...":
              'Для установки часового пояса воспользуйтесь кнопкой Местоположение"" или выберите пояс из списка...""',
            "Tolerance Percentage": "Погрешность в процентах",
            "Trade Vol": "Объем торговли",
            "Trade Volume Index": "Индекс торгового объема",
            "Trend Intensity Index": "Индекс интенсивности тренда",
            Triangular: "Треугольная",
            "Triple Exponential": "Тройная экспоненциальная",
            TRIX: "TRIX",
            "True Range": "Истинный диапазон",
            Twiggs: "Твиггс",
            "Twiggs Money Flow": "Индекс денежных потоков Твиггса",
            Type: "Тип",
            "Typical Price": "Типичная цена",
            "Ulcer Index": "Индекс Ульцера",
            Ultimate: "Окончательный",
            "Ultimate Oscillator": "Окончательный осциллятор",
            Underlay: "Под кривой",
            Undo: "Отменить",
            Units: "Единицы",
            "Unrealized Gain/Loss": "Нереализованная прибыль/убыток",
            "Up Volume": "Объем повышения",
            "Uploading Image": "Идет загрузка изображения…",
            Uptrend: "Восходящий тренд",
            "Use My Current Location":
              "Использовать мое текущее местоположение",
            "Use the following link to share your chart:":
              "Для публикации Вашего графика используйте следующую ссылку",
            "Use Volume": "объем Использование",
            "Valuation Lines": "Линии оценки",
            Variable: "Переменная",
            Vchart: "Vchart",
            vdma: "vdma",
            Vertical: "Вертикаль",
            "Vertical Horizontal Filter": "Вертикальный/горизонтальный фильтр",
            VIDYA: "VIDYA",
            Views: "Панели",
            Vol: "Объем",
            "Vol Osc": "Объемный осциллятор",
            "vol profile": "профиль объемов",
            "Vol ROC": "Скорость изменения объема",
            "vol undr": "vol undr",
            Volume: "Объем",
            "Volume % of Avg": "Объем % от среднего",
            "Volume Candle": "Объемная свеча",
            "Volume Chart": "Схема оборотов",
            "Volume Not Available": "Объем недоступен",
            "Volume Oscillator": "Объемный осциллятор",
            "Volume Profile": "Профиль объемов",
            "Volume Rate of Change": "Скорость изменения объема",
            "Volume Spike": "“Шпилька” объема",
            "Volume Underlay": "Объем под кривой",
            "Vortex Indicator": "Индикатор Vortex",
            "VT HZ Filter": "Верт/гор фильтр",
            VWAP: "VWAP",
            W: "Н",
            "W Acc Dist": "Индикатор накопления/распределения Уильямса",
            "Weak Ratio": "Слабое соотношение",
            weekly: "недельный",
            Weighted: "Взвешенная",
            "Weighted Close": "Взвешенная цена закрытия",
            "Welles Wilder": "Уэллс Уалдер",
            White: "Белая",
            "Williams %R": "%R Уильямса",
            "Your timezone is your current location":
              "Часовой пояс соответствует текущему местоположению",
            YTD: "С начала года",
            ZigZag: "Зигзаг",
            "3 Min": ",",
            "3m": ",",
          },
          es: {
            "-DI": "-DI",
            "-VI": "-VI",
            "(Scroll for more options)": "(Desplazar para más opciones)",
            "(UTC-01:00) Azores": "(UTC-01:00) Azores",
            "(UTC-01:00) Cape Verde Islands": "(UTC-01:00) Islas de Cabo Verde",
            "(UTC-02:00) Mid-Atlantic": "(UTC-02:00) Atlántico medio",
            "(UTC-03:00) Buenos Aires": "(UTC-03:00) Buenos Aires",
            "(UTC-03:00) Montevideo": "(UTC-03:00) Montevideo",
            "(UTC-03:00) Punta Arenas": "(UTC-03:00) Punta Arenas",
            "(UTC-03:00) Sao Paulo": "(UTC-03:00) Sao Paulo",
            "(UTC-03:30) Newfoundland and Labrador":
              "(UTC-03:30) Península de Terranova y Labrador",
            "(UTC-04:00) Asuncion": "(UTC-04:00) Asunción",
            "(UTC-04:00) Atlantic Time (Canada)":
              "(UTC-04:00) Horario atlántico (Canadá)",
            "(UTC-04:00) Caracas": "(UTC-04:00) Caracas",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "(UTC-04:00) Georgetown, La Paz, Manaos, San Juan",
            "(UTC-04:00) Santiago": "(UTC-04:00) Santiago",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "(UTC-05:00) Bogotá, Lima, Quito, Rio Branco",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "(UTC-05:00) Horario del este (EE.UU. Y Canadá)Eastern Time (US and Canada)",
            "(UTC-05:00) Indiana (East)": "(UTC-05:00) Indiana (Este)",
            "(UTC-06:00) Central America": "(UTC-06:00) América central",
            "(UTC-06:00) Central Time (US and Canada)":
              "(UTC-06:00) Horario central (EE.UU. Y Canadá)",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "(UTC-06:00) Guadalajara, Ciudad de México, Monterrey",
            "(UTC-06:00) Saskatchewan": "(UTC-06:00) Saskatchewan",
            "(UTC-07:00) Arizona": "(UTC-07:00) Arizona",
            "(UTC-07:00) Chihuahua, Mazatlan":
              "(UTC-07:00) Chihuahua, Mazatlán",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "(UTC-07:00) Horario montañés (EE.UU. Y Canadá)",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "(UTC-08:00) Hora del pacífico (EE.UU. Y Canadá)",
            "(UTC-08:00) Tijuana": "(UTC-08:00) Tijuana",
            "(UTC-09:00) Alaska": "(UTC-09:00) Alaska",
            "(UTC-10:00) Hawaii": "(UTC-10:00) Hawái",
            "(UTC-11:00) American Samoa, Midway Island":
              "(UTC-11:00) Samoa americana, Islas Midway",
            "(UTC) Casablanca": "(UTC) Casablanca",
            "(UTC) Dublin": "(UTC) Dublín",
            "(UTC) Lisbon, London": "(UTC) Lisboa, Londres",
            "(UTC) Greenwich Mean Time, Reykjavik":
              "(UTC) Huso horario principal de Greenwich, Reikiavik",
            "(UTC+01:00) Algiers, Tunis": "(UTC+01:00) Argel, Túnez",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "(UTC+01:00) Ámsterdam, Berlín, Berna, Roma, Estocolmo, Viena",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "(UTC+01:00) Belgrado, Bratislava, Budapest, e, Bratislava, Budapest, Liubliana, Praga",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "(UTC+01:00) Bruselas, Copenhague, Madrid, París",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "(UTC+01:00) Sarajevo, Skopie, Varsovia, Zagreb",
            "(UTC+02:00) Athens, Bucharest": "(UTC+02:00) Atenas, Bucarest",
            "(UTC+02:00) Cairo": "(UTC+02:00 ) El Cairo",
            "(UTC+02:00) Cyprus": "(UTC+02:00) Chipre",
            "(UTC+02:00) Harare, Johannesburg":
              "(UTC+02:00) Harare, Johannesburgo",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallin, Vilnius",
            "(UTC+02:00) Jerusalem": "(UTC+02:00) Jerusalén",
            "(UTC+02:00) Kaliningrad": "(UTC+02:00) Kaliningrado",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "(UTC+03:00) Bagdad, Kuwait, Qatar, Riyadh",
            "(UTC+03:00) Istanbul": "(UTC+03:00) Estambul",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "(UTC+03:00) Minsk, Moscú, Kírov, Volgogrado",
            "(UTC+03:00) Nairobi": "(UTC+03:00) Nairobi",
            "(UTC+03:00) Simferopol": "(UTC+03:00) Simferópol",
            "(UTC+03:30) Tehran": "(UTC+03:30) Teherán",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "(UTC+04:00) Astracán, Samara, Sarátov, Uliánovsk",
            "(UTC+04:00) Baku": "(UTC+04:00) Bakú",
            "(UTC+04:00) Dubai, Muscat": "(UTC+04:00) Dubái, Muscat",
            "(UTC+04:30) Kabul": "(UTC+04:30) Kabul",
            "(UTC+05:00) Karachi, Tashkent": "(UTC+05:00) Karachi, Taskent",
            "(UTC+05:00) Yekaterinburg": "(UTC+05:00) Ekaterimburgo",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "(UTC+05:30) Chennai, Kolkata, Bombay, Nueva Deli",
            "(UTC+05:45) Kathmandu": "(UTC+05:45) Katmandú",
            "(UTC+06:00) Almaty": "(UTC+06:00) Almaty",
            "(UTC+06:00) Astana, Dhaka": "(UTC+06:00) Astana, Daca",
            "(UTC+06:00) Omsk": "(UTC+06:00) Omsk",
            "(UTC+06:30) Yangon": "(UTC+06:30) Yangón",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "(UTC+07:00) Bangkok, Yakarta, Vietnam",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "(UTC+07:00) Barnaul, Novosibirsk, Tomsk",
            "(UTC+07:00) Hovd": "(UTC+07:00) Hovd",
            "(UTC+07:00) Krasnoyarsk": "(UTC+07:00) Krasnoiarsk",
            "(UTC+07:00) Novokuznetsk": "(UTC+07:00) Novokuznetsk",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "(UTC+08:00) Brunei, Kuala Lumpur, Singapur",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "(UTC+08:00) Choibalsan, Ulan-Bator",
            "(UTC+08:00) Irkutsk": "(UTC+08:00) Irkutsk",
            "(UTC+08:00) Manila, Taipei": "(UTC+08:00) Manila, Taipéi",
            "(UTC+08:00) Perth": "(UTC+08:00) Perth",
            "(UTC+08:45) Eucla": "(UTC+08:45) Eucla",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "(UTC+09:00) Chita, Chandia, Yakutsk",
            "(UTC+09:00) Osaka, Sapporo, Tokyo":
              "(UTC+09:00) Osaka, Sapporo, Tokio",
            "(UTC+09:00) Pyongyang": "(UTC+09:00) Pyongyang",
            "(UTC+09:00) Seoul": "(UTC+09:00) Seúl",
            "(UTC+09:30) Adelaide": "(UTC+09:30) Adelaida",
            "(UTC+09:30) Darwin": "(UTC+09:30) Darwin",
            "(UTC+10:00) Brisbane": "(UTC+10:00) Brisbane",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "(UTC+10:00) Canberra, Melbourne, Sídney",
            "(UTC+10:00) Guam, Port Moresby":
              "(UTC+10:00) Guam, Puerto Moresby",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "(UTC+10:00) Ust-Nera, Vladivostok",
            "(UTC+11:00) Magadan": "(UTC+11:00) Magadan",
            "(UTC+11:00) Noumea, Solomon Islands":
              "(UTC+11:00) Numea, Islas Salomón",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "(UTC+11:00) Sakhalin, Srednekolymsk",
            "(UTC+12:00) Anadyr, Kamchatka": "(UTC+12:00) Anadir, Kamchatka",
            "(UTC+12:00) Auckland, Wellington":
              "(UTC+12:00) Auckland, Wellington",
            "(UTC+12:45) Chatham": "(UTC+12:45) Chatham",
            "(UTC+13:00) Samoa": "(UTC+13:00) Samoa",
            "(UTC+13:00) Tonga": "(UTC+13:00) Tonga",
            "(UTC+14:00) Kiritimati": "(UTC+14:00) Kiritimati",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "Tipo de media móvil %D",
            "%D Periods": "Períodos %D",
            "%K": "%K",
            "%K Double Smoothing Periods": "Períodos de uniformidad doble %K",
            "%K Periods": "Períodos %K",
            "%K Smoothing Periods": "Períodos de uniformidad %K",
            "+DI": "+DI",
            "+VI": "+VI",
            "1 D": "1 D",
            "1 Hour": "1 Hora",
            "1 Min": "1 Min",
            "1 Mo": "1 Mes",
            "1 Standard Deviation (1σ)": "1 desviación estándar (1σ)",
            "1 W": "1 S",
            "10 Min": "10 Min",
            "10m": "10m",
            "13px": "13px",
            "15 Min": "15 Min",
            "15m": "15m",
            "1D": "1D",
            "1H": "1H",
            "1m": "1m",
            "1M": "1M",
            "1W": "1S",
            "1Y": "1A",
            "2 Standard Deviation (1σ)": "2 desviaciones estándar (1σ)",
            "2 Standard Deviation (2σ)": "2 desviaciones estándar (2σ)",
            "3 Standard Deviation (1σ)": "3 desviaciones estándar (1σ)",
            "3 Standard Deviation (3σ)": "3 desviaciones estándar (3σ)",
            "30 Min": "30 Min",
            "30m": "30m",
            "3M": "3M",
            "4 Hour": "4 Horas",
            "4H": "4H",
            "5 Min": "5 Min",
            "5D": "5D",
            "5m": "5m",
            "5Y": "5A",
            "6M": "6M",
            Abstract: "Abstracto",
            "Acc Swing": "Oscilación Acc.",
            "Accumulation/Distribution": "Distribución de acumulación",
            "Accumulative Swing Index": "Índice de oscilación acumulativo",
            Add: "Añadir",
            ADD: "ADD",
            "Add Stop Loss": "Añadir límite de pérdidas",
            "Add Take Profit": "Añadir límite de ganancias",
            ADX: "ADX",
            "ADX/DMS": "ADX/DMS",
            ALL: "TODO",
            "All-Time High Lookback Period":
              "Periodo retrospectivo alto general",
            Alligator: "Alligator",
            Annotation: "Anotación",
            Arc: "Arco",
            Aroon: "Aroon",
            "Aroon Down": "Aroon abajo",
            "Aroon Osc": "Osc. Aroon",
            "Aroon Oscillator": "Oscilador Aroon",
            "Aroon Up": "Aroon arriba",
            Arrow: "Flecha",
            "ATH Lookback Period": "Perido retrospectivo ATH",
            ATR: "ATR (Media de rango verdadero)",
            "ATR Bands": "Bandas ATR",
            "ATR Bands Bottom": "Bandas ATR inferiores",
            "ATR Bands Channel": "Canal de bandas ATR",
            "ATR Bands Top": "Bandas ATR superiores",
            "ATR Trailing Stop": "Orden de arrastre de pérdidas ATR",
            "ATR Trailing Stops": "Órdenes de arrastre de pérdidas ATR",
            "Auto Select": "Seleccione automáticamente",
            Average: "Medio",
            "Average Line": "Línea media",
            "Average True Range": "Rango medio verdadero (ATR)",
            "Average Type": "Tipo medio",
            Awesome: "Fantástico",
            "Awesome Oscillator": "Oscilador asombroso",
            "Axis Label": "Etiqueta de eje",
            "Axis Label:": "Etiqueta de eje:",
            "Axis Text": "Texto de eje",
            B: "N",
            Background: "Fondo",
            "Background Color": "Color de fondo",
            "Balance of Power": "Equilibrio de poder",
            Bandwidth: "Ancho de banda",
            Bar: "Barra",
            Bars: "Barras",
            "Bars Color": "Color de las barras",
            "Base Line": "Línea base",
            "Base Line Period": "Período de línea base",
            Baseline: "Referencia",
            "Baseline Delta": "Cambio de línea de base",
            "BATS BZX real-time.": "BATS BZX en tiempo real.",
            Bearish: "Bajista",
            Beta: "Beta",
            "Beta Callouts Candle Border": "Borde de vela de referencia Beta",
            Black: "Negro",
            "Boll %b": "Boll %b",
            "Boll BW": "Ancho de banda Boll",
            "Bollinger %b": "Bollinger %b",
            "Bollinger Bands": "Bandas de Bollinger",
            "Bollinger Bands Bottom": "Bandas de Bollinger inferiores",
            "Bollinger Bands Median": "Bandas de Bollinger medias",
            "Bollinger Bands Top": "Bandas de Bollinger superiores",
            "Bollinger Bandwidth": "Ancho de banda de Bollinger",
            Border: "Borde",
            "Bulge Threshold": "Umbral de abultamiento",
            Bullish: "Alcista",
            "Buy Stops": "Paradas de compra",
            "by Xignite.": " por Xignite.",
            Callout: "Llamada",
            Callouts: "Llamadas",
            cancel: "cancelar",
            Candle: "Vela",
            "Candle Border": "Borde la vela",
            "Candle Borders": "Bordes de vela",
            "Candle Color": "Color de la vela",
            "Candle Wick": "Mecha de la vela",
            Candles: "Velas",
            "Center Of Gravity": "Centro de gravedad",
            "Chaikin MF": "MF de Chaikin",
            "Chaikin Money Flow": "Flujo de dinero Chaikin",
            "Chaikin Vol": "Vol. de Chaikin",
            "Chaikin Volatility": "Volatilidad Chaikin",
            "Chande Fcst": "Prev. Chande",
            "Chande Forecast Oscillator": "Oscilador de previsión Chande",
            "Chande Momentum Oscillator": "Oscilador de momento Chande",
            "Chande Mtm": "Momento Chande",
            "Change Timezone": "Cambiar zona horaria",
            Channel: "Canal",
            "Channel Fill": "Llenado del canal",
            Chart: "Gráfica",
            "Chart Preferences": "Preferencias del gráfico",
            "Chart Scale": "Escala de la gráfica",
            "Chart Shared Successfully!": "¡Gráfica compartida correctamente!",
            "Chart Style": "Estilo de gráfica",
            "Chart Type": "Tipo de gráfico",
            Check: "Comprobar",
            "Choose language": "Elegir idioma",
            "Choose Timezone": "Elegir zona horaria",
            "Choppiness Index": "Índice de fluctuación de tendencias",
            Clear: "Borrar",
            "Clear All": "Eliminar todo",
            "Clear Drawings": "Eliminar los dibujos",
            Close: "Cerrar",
            close: "cerrar",
            Color: "Color",
            "Colored Bar": "Barra de color",
            "Colored Line": "Línea de color",
            COMMODITIES: "MATERIAS PRIMAS",
            "Commodity Channel Index": "Índice de canal de materias primas",
            Compare: "Comparar",
            "Comparison Symbol": "Símbolo de comparación",
            Composite: "Mixto",
            "Composite RSI": "RSI mixto",
            Continuous: "Continuo",
            "Conversion Line": "Línea de conversión",
            "Conversion Line Period": "Período de línea de conversión",
            Coppock: "Coppock",
            "Coppock Curve": "Curva de Coppock",
            Correl: "Correl.",
            Correlation: "Correlación",
            "Correlation Coefficient": "Coeficiente de correlación",
            Courier: "Courier",
            Create: "Crear",
            "Create a New Custom Theme": "Crear un nuevo tema personalizado",
            "Create Custom Theme": "Crear tema personalizado",
            "Create Image": "Crear imagen",
            Cross: "Cruz",
            Crosshair: "Punto de mira",
            Crosshairs: "Cruz visor",
            Crossline: "Línea de cruce",
            CURRENCIES: "DIVISAS",
            "Current Studies": "Estudios actuales",
            "Current Symbols": "Símbolos actuales",
            "Current TimeZone is": "El huso horario actual es",
            "Custom Themes": "Temas personalizados",
            "Cycle 1": "Ciclo 1",
            "Cycle 2": "Ciclo 2",
            "Cycle 3": "Ciclo 3",
            D: "D",
            daily: "diario",
            Darvas: "Darvas",
            "Darvas Box": "Caja de Darvas",
            "Data delayed 15 min.": "Datos retrasó 15 minutos.",
            "Data is randomized.": "De datos es aleatorizado.",
            "Data is real-time.": "Los datos es en tiempo real.",
            "Date Dividers": "Divisores de fecha",
            "Date/Time": "Fecha/Hora",
            "Date/Time:": "Fecha/Hora:",
            Day: "Claro",
            "Days Per Year": "Días por año",
            "Decreasing Bar": "Barra decreciente",
            Default: "Por defecto",
            "Default Themes": "Temas predeterminados",
            Delete: "Eliminar",
            "Delete Study": "Eliminar estudio",
            "Demo data.": "Datos de demostración.",
            Detrended: "Sin tendencia",
            "Detrended Price Oscillator": "Oscilador de precio sin tendencia",
            Directional: "Direccional",
            "Disparity Index": "Índice de disparidad",
            Display: "Visualizar",
            "Display 1 Standard Deviation (1σ)":
              "Mostrar desviación estándar 1(1σ)",
            "Display 2 Standard Deviation (2σ)":
              "Mostrar desviación estándar 2 (2σ)",
            "Display 3 Standard Deviation (3σ)":
              "Mostrar desviación estándar 3 (3σ)",
            "Display Average": "Mostrar media",
            "Distance(%)": "Distancia(%)",
            Divergence: "Divergencia",
            "Don't see your study below? Type in your search here.":
              "¿No ve sus estudio más abajo? Introduzca aquí su término de búsqueda.",
            "Donchian Channel": "Canal Donchian",
            "Donchian High": "Donchian alto",
            "Donchian Low": "Donchian bajo",
            "Donchian Median": "Donchian medio",
            "Donchian Width": "Amplitud Donchian",
            Done: "Hecho",
            Doodle: "Forma libre",
            "Double Exponential": "Exponencial doble",
            "Double Smoothing Period": "Período de uniformidad doble",
            "Down Volume": "Volumen abajo",
            Downtrend: "Tendencia a la baja",
            Draw: "Dibujar",
            "Ease of Movement": "Facilidad de movimiento",
            Edit: "Editar",
            "Edit Settings...": "Editar configuración…",
            EF: "EF",
            "EF Trigger": "Activador EF",
            "Ehler Fisher": "Ehler Fisher",
            "Ehler Fisher Transform": "Transformación Ehler Fisher",
            "Elder Bear Power": "Fuerza alcista (vendedor) de Elder",
            "Elder Bull Power": "Fuerza bajista (comprador) de Elder",
            "Elder Force": "Fuerza de Elder",
            "Elder Force Index": "Índice de fuerza de Elder",
            "Elder Impulse System": "Sistema de impulso de Elder",
            "Elder Ray Index": "Rayo de Elder",
            Ellipse: "Elipse",
            ema: "ema",
            "End of day data.": "Los datos de la final del día.",
            'Enter box size and hit "Enter"':
              'Introduzca el tamaño de la casilla y pulse Entrar""""',
            "Enter name of view:": "Introducir el nombre de la vista:",
            'Enter reversal and hit "Enter"':
              'Introduzca retroceso y pulse Entrar""""',
            "Enter Symbol": "Introducir símbolo",
            'Enter value and hit "Enter"':
              'Introduzca el valor y pulse Entrar""Enter value and hit “Enter”""',
            Events: "Eventos",
            "Exit Field": "Campo de salida",
            Exponential: "Exponencial",
            "Extended Hours": "Horas prolongadas",
            Fade: "Difuminado",
            Fake: "Falso",
            Fan: "Seguidor",
            Fast: "Rápido",
            "Fast MA Period": "Período de media móvil rápida",
            "Fib Arc": "Fib Arc",
            "Fib Fan": "Fib Fan",
            "Fib Time Zone": "Fib de huso horario",
            Fibonacci: "Fibonacci",
            fibonacci: "fibonacci",
            Field: "Campo",
            field: "campo",
            Fill: "Rellenar",
            "Focus Arrow": "Flecha de foco",
            Forecast: "Previsión",
            FOREX: "FOREX",
            "Formula courtesy": "Fórmula gracias a",
            "Fractal Channel": "Canal fractal",
            "Fractal Chaos": "Caos fractal",
            "Fractal Chaos Bands": "Bandas de caos fractales",
            "Fractal Chaos Oscillator": "Oscilador de caos fractal",
            "Fractal High": "Fractal alto",
            "Fractal Low": "Fractal bajo",
            FUNDS: "FONDOS",
            FUTURES: "FUTUROS",
            FX: "FX",
            Gain: "Ganancia",
            "Gann Fan": "Gann Fan",
            Garamond: "Garamond",
            Gartley: "Gartley",
            Gator: "Gator",
            "Gator Oscillator": "Oscilador Gator",
            "Generating Image": "Generar imagen",
            Ghost: "Fantasma",
            "Ghost Boxes": "Cajas fantasma",
            Gopala: "Gopala",
            "Gopalakrishnan Range Index": "Índice de rango Gopalakrishnan",
            Gradient: "Gradiente",
            Green: "Verde",
            "Grid Lines": "Líneas de cuadrícula",
            H: "H",
            harmonic: "armónico",
            Heart: "Corazón",
            "Heaviest Rate of Change Period":
              "Tasa más elevada de periodo de cambio",
            "Heaviest SMA Period": "Periodo de SMA más elevado",
            "Heavy Rate of Change Period": "Tasa elevada de periodo de cambio",
            "Heavy SMA Period": "Periodo de SMA elevado",
            "Heikin Ashi": "Heikin Ashi",
            "Heikin-Ashi": "Heikin-Ashi",
            Helvetica: "Helvética",
            "HHV/LLV Lookback": "HHV/LLV en retrospección",
            High: "Al alza",
            "High Low": "Alto Bajo",
            "High Low Bands": "Bandas alto bajo",
            "High Low Bottom": "Alto Bajo inferior",
            "High Low Median": "Alto Bajo medio",
            "High Low Top": "Alto Bajo superior",
            "High Minus Low": "Alto menos Bajo",
            "High Period": "Período alto",
            "High-Low": "Alto-Bajo",
            "high/low": "alza/baja",
            "Highest High Value": "Valor alto más alto",
            HighLow: "Alto/Bajo",
            "Hist Vol": "Vol. histórico",
            Histogram: "Histograma (Diagrama de barras)",
            "Historical Volatility": "Volatilidad histórica",
            "Hollow Candle": "Vela hueca",
            Horizontal: "Horizontal",
            Hull: "Casco",
            I: "C",
            "Ichimoku Clouds": "Nubes de Ichimoku",
            "Increasing Bar": "Barra creciente",
            Index: "Índice",
            INDEXES: "ÍNDICES",
            INDICES: "ÍNDICES",
            Info: "Información",
            Intercept: "Intercepción",
            Interval: "Intervalo",
            "Intraday Momentum Index": "Índice de momento intradía",
            "Intraday Mtm": "Momento intradía",
            Jaw: "Mandíbula",
            "Jaw Offset": "Compensación de mandíbula",
            "Jaw Period": "Período de mandíbula",
            Kagi: "Kagi",
            Keltner: "Keltner",
            "Keltner Bottom": "Keltner inferior",
            "Keltner Channel": "Canal de Keltner",
            "Keltner Median": "Keltner medio",
            "Keltner Top": "Keltner superior",
            Klinger: "Klinger",
            "Klinger Volume Oscillator": "Oscilador de volumen de Klinger",
            KlingerSignal: "Señal Klinger",
            KST: "KST",
            KSTSignal: "Señal KST",
            "Lagging Span": "Tramo rezagado",
            "Lagging Span Period": "Período de tramo rezagado",
            "Leading Span A": "Tramo A destacado",
            "Leading Span B": "Tramo B destacado",
            "Leading Span B Period": "Período tramo B destacado",
            "Level Offset": "Desviación de nivel",
            Levels: "Niveles",
            "Light Rate of Change Period": "Tasa baja de periodo de cambio",
            "Light SMA Period": "Periodo de SMA bajo",
            "Lightest Rate of Change Period":
              "Tasa más baja de periodo de cambio",
            "Lightest SMA Period": "Periodo de SMA más bajo",
            "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.":
              "Como todos los marcadores ChartIQ, el objeto se gestiona por el gráfico, por tanto cuando se desplaza por el gráfico, el objeto se mueve con usted. Se destruye automáticamente cuando se cambia el símbolo.",
            "Limit Move Value": "Valor del límite de movimiento",
            "Lin Fcst": "Prev. lineal",
            "Lin Incpt": "Intercepción lin.",
            "Lin R2": "Lin R2",
            Line: "Línea",
            "Line Break": "Salto de línea",
            "Line/Bar Chart": "Gráfico de líneas/barra",
            "Linear Reg Forecast": "Previsión de reg. lineal",
            "Linear Reg Intercept": "Interceptar reg. lineal",
            "Linear Reg R2": "Reg. lineal R2",
            "Linear Reg Slope": "Pendiente de reg. lineal",
            Lips: "Labios",
            "Lips Offset": "Compensación de labios",
            "Lips Period": "Período de labios",
            Locale: "Local",
            "Log Scale": "Logaritmo",
            "Long Cycle": "Ciclo largo",
            "Long RoC": "RoC largo",
            Loss: "Pérdida",
            Low: "A la baja",
            "Low Period": "Período bajo",
            "Lowest Low Value": "Valor bajo más bajo",
            "LR Slope": "Pendiente LR",
            M: "M",
            "M Flow": "Flujo M",
            MA: "MA",
            ma: "ma",
            "MA Env": "Sobre MM",
            "MA Env Bottom": "Sobre MM inferior",
            "MA Env Median": "Sobre MM medio",
            "MA Env Top": "Sobre MM superior",
            "MA Period": "Periodo MA",
            MACD: "MACD",
            "Market Data": "Datos del mercado",
            "Market Facilitation Index": "Índice de facilitación de mercado",
            "Mass Idx": "Índ. de masa",
            "Mass Index": "Índice de masa",
            "Maximum AF": "AF máximo",
            mean: "significado",
            Measure: "Medir",
            "Med Price": "Precio med.",
            median: "mediano",
            "Median Price": "Precio medio",
            "Min Tick Value": "Valor mín. de marca",
            "Minimum AF": "AF mínimo",
            Momentum: "Momento",
            "Momentum Indicator": "Indicador de momento",
            "Money Flow Index": "Índice de flujo de dinero",
            More: "Ninguno",
            "More studies": "Más estudios",
            Mountain: "Montaña",
            "Mountain Charts": "Gráficas de montaña",
            "Mountain Color": "Color de montaña",
            "Moving Average": "Media móvil",
            "Moving Average Deviation": "Desviación de la media variable",
            "Moving Average Envelope": "Sobre de media móvil",
            "Moving Average Type": "Tipo de media móvil",
            ms: "ms",
            Multiplier: "Multiplicador",
            Name: "Nombre",
            "Neg Vol": "Vol. negativo",
            "Negative Bar": "Barra negativa",
            "Negative Volume Index": "Índice de volumen negativo",
            Neutral: "Neutral",
            "New Custom Theme": "Nuevo tema personalizado",
            "New Theme": "Tema nuevo",
            "New Theme Name": "Nombre del nuevo tema",
            "New Theme Name:": "Nuevo nombre de tema:",
            Night: "Oscuro",
            None: "Ninguno",
            "None available": "Ninguno disponible",
            "Not enough data to compute":
              "No existe suficientes datos para calcular",
            Offset: "Compensación",
            "On Bal Vol": "Vol. en equilibrio",
            "On Balance Volume": "Volumen en equilibrio",
            Open: "Abrir",
            "Open shared chart in new window":
              "Abrir la gráfica compartida en una nueva ventana",
            or: "o",
            OverBought: "Exceso compra",
            Overlay: "Superposición",
            OverSold: "Exceso venta",
            "P Rel": "P rel.",
            Palatino: "Palatino",
            "Parabolic SAR": "Sistema parabólico SAR",
            Percent: "Por ciento",
            percent: "por ciento",
            "Perf Idx": "Índ. de desempeño",
            "Performance Index": "Índice de desempeño",
            Period: "Período",
            pips: "Pips",
            Pitchfork: "Horquilla",
            Pivot: "Pivote",
            "Pivot Points": "Puntos de pivote",
            "Plot Type": "Tipo de diagrama",
            PMO: "PMO",
            PMOSignal: "Señal PMO",
            "Point & Figure": "Punto y Figura",
            Points: "Puntos",
            points: "puntos",
            "Points Or Percent": "Puntos o Porcentaje",
            "Popular Studies": "Estudios populares",
            "Pos Vol": "Vol. positivo",
            "Positive Bar": "Barra positiva",
            "Positive Volume Index": "Índice de volumen positivo",
            "Press this button to generate a shareable image:":
              "Pulse este botón para generar una imagen compartible:",
            "Pretty Good": "Bastante bueno",
            "Pretty Good Oscillator": "Oscilador bastante bueno",
            Price: "Precio",
            "Price Minimum": "Precio mínimo",
            "Price Momentum Oscillator": "Oscilador de momento de precios",
            "Price Osc": "Osc. de precio",
            "Price Oscillator": "Oscilador de precio",
            "Price Rate of Change": "Precio tipo de cambio",
            "Price Relative": "Precio relativo",
            "Price ROC": "Precio ROC",
            "Price Vol": "Vol. de precio",
            "Price Volume Trend": "Tendencias de volumen de precio",
            "Prime Bands Bottom": "Bandas primas inferiores",
            "Prime Bands Channel": "Canal de bandas primas",
            "Prime Bands Top": "Bandas primas superiores",
            "Prime Number": "Número primo",
            "Prime Number Bands": "Bandas de número primo",
            "Prime Number Oscillator": "Oscilador de número primo",
            "Pring's Know Sure Thing": "Oscilador “Know Sure Thing” de Pring",
            "Pring's Special K": "Oscilador “Special K” de Pring",
            "Psychological Line": "Línea psicológica",
            QStick: "QStick",
            "Quadrant Lines": "Líneas cuadrantes",
            "Rainbow Moving Average": "Media móvil Rainbow",
            "Rainbow Oscillator": "Oscilador Rainbow",
            "Random Walk": "Camino aleatorio",
            "Random Walk High": "Camino aleatorio alto",
            "Random Walk Index": "Índice de camino aleatorio",
            "Random Walk Low": "Camino aleatorio bajo",
            "Range Bars": "Barras de intervalo",
            "Range Selector": "Selector de rango",
            "Rate Of Change": "Tipo de cambio",
            RAVI: "RAVI",
            Ray: "Rayo",
            Rectangle: "Rectángulo",
            Redo: "Volver a hacer",
            "Regression Line": "Línea de regresión",
            "Rel Vig": "Vig. rel.",
            "Rel Vol": "Vol. rel.",
            "Relative Vigor Index": "Índice de vigor relativo",
            "Relative Volatility": "Volatilidad relativa",
            RelVigSignal: "Señal de vig. rel.",
            Renko: "Renko",
            "Resistance 1": "Resistencia 1",
            "Resistance 2": "Resistencia 2",
            "Resistance 3": "Resistencia 3",
            Result: "Resultado",
            Retracement: "Rebote",
            "right-click to delete": "botón derecho para borrar",
            "right-click to manage": "botón derecho para manejar",
            "Risk/Reward": "Riesgo/Recompensa",
            RSI: "RSI",
            RSquared: "RSquared",
            s: "s",
            save: "guardar",
            Save: "Guardar",
            "Save Theme": "Guardar",
            "Save View": "Guardar visualización",
            "Saved View": "Visualización guardada",
            "Saved Views": "Guardar vistas",
            "Scale Factor": "Factor de escala",
            Schaff: "Schaff",
            "Schaff Trend Cycle": "Ciclo de tendencia de Schaff",
            Search: "Buscar",
            Segment: "Segmento",
            "Select Tool": "Seleccionar",
            "Sell Stops": "Paradas de venta",
            Series: "Series",
            "Set Point & Figure Parameters":
              "Establecer puntos y parámetros de cifras",
            "Set Price Lines": "Establecer líneas de precios",
            "Set Range": "Establecer rango",
            "Set Reversal Percentage": "Establecer porcentaje de retroceso",
            Settings: "Configuración",
            Shading: "Sombreado",
            Shape: "Forma",
            "Shape - Arrow": "Forma -Flecha",
            "Shape - Check": "Forma - Verificación",
            "Shape - Cross": "Forma - Cruce",
            "Shape - Focus": "Forma - Centro",
            "Shape - Heart": "Forma - Corazón",
            "Shape - Star": "Forma - Estrella",
            Share: "Compartir",
            "Share This Chart": "Compartir esta gráfica",
            "Share Your Chart": "Compartir su gráfico",
            Shift: "Giro",
            "Shift Percentage": "Porcentaje de giro",
            "Shift Type": "Tipo de giro",
            "Shinohara Intensity Ratio": "Radio de intensidad Shinohara",
            "Short Cycle": "Ciclo corto",
            "Short RoC": "RoC corto",
            "Show All": "Mostrar todo",
            "Show Fractals": "Mostrar fractales",
            "Show Zones": "Mostrar zonas",
            Signal: "Señal",
            "Signal Period": "Período de señal",
            "Signal Periods": "Períodos de señal",
            Simple: "Simple",
            "Simple Circle": "Círculo simple",
            "Simple Square": "Cuadrado simple",
            "Simulated data.": "Datos simulados.",
            Slope: "Pendiente",
            Slow: "Lento",
            "Slow MA Period": "Período de media móvil lenta",
            SMA1: "SMA1 (Media móvil simple 1)",
            SMA10: "SMA10",
            SMA2: "SMA2",
            SMA3: "SMA3",
            SMA4: "SMA4",
            SMA5: "SMA5",
            SMA6: "SMA6",
            SMA7: "SMA7",
            SMA8: "SMA8",
            SMA9: "SMA9",
            Smooth: "Uniforme",
            "Smoothing Period": "Período de uniformidad",
            "Speed Resistance Arc": "Arco de resistencia a la velocidad",
            "Speed Resistance Line": "Línea de resistencia a la velocidad",
            SPY: "SPY",
            Squarewave: "Ola Cuadrada",
            squarewave: "onda cuadrada",
            Squat: "Asentado",
            standard: "estándar",
            "Standard Deviation": "Desviación estándar",
            "Standard Deviations": "Desviaciones estándar",
            Star: "Estrella",
            "STARC Bands": "Bandas STARC",
            "STARC Bands Bottom": "Valor inferior de bandas STARC",
            "STARC Bands Median": "Mediana de bandas STARC",
            "STARC Bands Top": "Valor superior de bandas STARC",
            "Stch Mtm": "Mom. est.",
            "STD Dev": "Desv. EST.",
            "STD Period": "Período STD",
            "Stochastic Momentum Index": "Índice de momento estocástico",
            Stochastics: "Estocástico",
            STOCKS: "ACCIONES",
            "Stop Levels": "Niveles de límite",
            "Stop Loss": "Límite de pérdidas",
            Stops: "Paradas",
            "Strong Ratio": "Ratio sólido",
            Studies: "Estudios",
            Study: "Estudio",
            Supertrend: "Supertendencia",
            "Support 1": "Soporte 1",
            "Support 2": "Soporte 2",
            "Support 3": "Soporte 3",
            Swing: "Oscilación",
            "Swing Index": "Índice de oscilación",
            Symbol: "Símbolo",
            T: "T",
            "Take Profit": "Límite de ganancias",
            Teeth: "Dientes",
            "Teeth Offset": "Compensación de dientes",
            "Teeth Period": "Período de dientes",
            Themes: "Temas",
            "This is a callout marker": "Este es un marcador de referencia",
            "This is an example of a complex marker which can contain html, video, images, css, and animations.":
              "Este es un ejemplo de un marcador complejo que puede contener html, video, imágenes, css y animaciones.",
            TII: "TII",
            "Time Cycle": "Ciclo de tiempo",
            "Time Fcst": "Prev. de tiempo",
            "Time Series": "Series de tiempo",
            "Time Series Forecast": "Pronóstico de evolución temporal",
            "Time Zone": "Zona horaria",
            "Times New Roman": "Times New Roman",
            Timezone: "Zona horaria",
            "Tirone Levels": "Niveles de Tirone",
            "To set your timezone use the location button below or scroll through the following list":
              "Para fijar su zona horaria utilice el botón de ubicación de abajo o desplácese por la siguiente lista",
            "To set your timezone use the location button below, or scroll through the following list...":
              "Para establecer su huso horario, utilice el botón de localización inferior, o desplácese a lo largo de la lista siguiente…",
            "Tolerance Percentage": "Porcentaje de tolerancia",
            "Trade Vol": "Volumen de operaciones",
            "Trade Volume Index": "Índice de volumen de operaciones",
            "Trend Intensity Index": "Índice de intensidad de tendencia",
            Triangular: "Triangular",
            "Triple Exponential": "Exponencial triple",
            TRIX: "TRIX",
            "True Range": "rango verdadero",
            Twiggs: "Twiggs",
            "Twiggs Money Flow": "Flujo de dinero de Twiggs",
            Type: "Tipo",
            "Typical Price": "Precio típico",
            "Ulcer Index": "Índice Ulcer",
            Ultimate: "Definitivo",
            "Ultimate Oscillator": "Oscilador definitivo",
            Underlay: "Subyacente",
            Undo: "Deshacer",
            Units: "Unidades",
            "Unrealized Gain/Loss": "Ganancias/pérdidas no realizadas",
            "Up Volume": "Volumen arriba",
            "Uploading Image": "Cargar imagen",
            Uptrend: "Tendencia al alza",
            "Use My Current Location": "Usar mi ubicación actual",
            "Use the following link to share your chart:":
              "Utilizar el siguiente enlace para compartir su gráfica",
            "Use Volume": "Utilizar Volumen",
            "Valuation Lines": "Líneas de valoración",
            Variable: "Variable",
            Vchart: "Gráfica V",
            vdma: "vdma",
            Vertical: "Vertical",
            "Vertical Horizontal Filter": "Filtro vertical horizontal",
            VIDYA: "VIDYA",
            Views: "Vistas",
            Vol: "Vol.",
            "Vol Osc": "Osc. vol.",
            "vol profile": "Perfil vol.",
            "Vol ROC": "Vol. ROC",
            "vol undr": "Debajo vol.",
            Volume: "Volumen",
            "Volume % of Avg": "% de volumen de la media",
            "Volume Candle": "Vela de volumen",
            "Volume Chart": "Gráfica de volumen",
            "Volume Not Available": "Volumen no disponible",
            "Volume Oscillator": "Oscilador de volumen",
            "Volume Profile": "Perfil de volumen",
            "Volume Rate of Change": "Volumen de tipo de cambio",
            "Volume Spike": "Punta de volumen",
            "Volume Underlay": "Vol. subyacente",
            "Vortex Indicator": "Indicador Vortex",
            "VT HZ Filter": "Filtro VT HZ",
            VWAP: "VWAP (Precio promedio ponderado por volumen)",
            W: "S",
            "W Acc Dist": "Dist. A acu.",
            "Weak Ratio": "Ratio débil",
            weekly: "semanal",
            Weighted: "Pesado",
            "Weighted Close": "Cierre ponderado",
            "Welles Wilder": "Welles Wilder",
            White: "Blanco",
            "Williams %R": "Williams %R",
            "Your timezone is your current location":
              "Su huso horario es su ubicación actual",
            YTD: "HLF",
            ZigZag: "ZigZag",
            "3 Min": ",",
            "3m": ",",
          },
          zh: {
            "-DI": "下降方向线",
            "-VI": "负成交量指标",
            "(Scroll for more options)": "（滚动查看更多选项）",
            "(UTC-01:00) Azores": "（国际协调时间-01:00）亚速尔群岛",
            "(UTC-01:00) Cape Verde Islands":
              "（国际协调时间-01:00）佛得角群岛",
            "(UTC-02:00) Mid-Atlantic": "（国际协调时间-02:00）大西洋中部",
            "(UTC-03:00) Buenos Aires": "（国际协调时间-03:00）布宜诺斯艾利斯",
            "(UTC-03:00) Montevideo": "（国际协调时间-03:00）蒙得维的亚",
            "(UTC-03:00) Punta Arenas": "（国际协调时间-03:00）蓬塔阿雷纳斯",
            "(UTC-03:00) Sao Paulo": "（国际协调时间-03:00）圣保罗",
            "(UTC-03:30) Newfoundland and Labrador":
              "（国际协调时间-03:30）纽芬兰和拉布拉多",
            "(UTC-04:00) Asuncion": "（国际协调时间-04:00）亚松森",
            "(UTC-04:00) Atlantic Time (Canada)":
              "（国际协调时间-04:00）大西洋时间（加拿大）",
            "(UTC-04:00) Caracas": "（国际协调时间-04:00）加拉加斯",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "（国际协调时间-04:00）乔治城、拉巴斯、马努斯、圣胡安",
            "(UTC-04:00) Santiago": "（国际协调时间-04:00）圣地亚哥",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "（国际协调时间-05:00）波哥大、利马、基多、里约布兰科",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "（国际协调时间-05:00）东部时间（美国和加拿大）",
            "(UTC-05:00) Indiana (East)":
              "（国际协调时间-05:00）印第安纳（东部）",
            "(UTC-06:00) Central America": "（国际协调时间-06:00）中美洲",
            "(UTC-06:00) Central Time (US and Canada)":
              "（国际协调时间-06:00）中央标准时间（美国和加拿大）",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "（国际协调时间-06:00）瓜达拉哈拉、墨西哥城、蒙特雷",
            "(UTC-06:00) Saskatchewan": "（国际协调时间-06:00）萨斯喀彻温",
            "(UTC-07:00) Arizona": "（国际协调时间-07:00）亚利桑那",
            "(UTC-07:00) Chihuahua, Mazatlan":
              "（国际协调时间-07:00）奇瓦瓦、马萨特兰",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "（国际协调时间-07:00）山地标准时间（美国和加拿大）",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "（国际协调时间-08:00）太平洋时间（美国和加拿大）",
            "(UTC-08:00) Tijuana": "（国际协调时间-08:00）提华纳",
            "(UTC-09:00) Alaska": "（国际协调时间-09:00）阿拉斯加",
            "(UTC-10:00) Hawaii": "（国际协调时间-10:00）夏威夷",
            "(UTC-11:00) American Samoa, Midway Island":
              "（国际协调时间-11:00）美属萨摩亚、中途岛",
            "(UTC) Casablanca": "（国际协调时间）卡萨布兰卡",
            "(UTC) Dublin": "（国际协调时间）都柏林",
            "(UTC) Lisbon, London": "（国际协调时间）里斯本、伦敦",
            "(UTC) Greenwich Mean Time, Reykjavik":
              "（国际协调时间）格林威治标准时间、雷克雅未克",
            "(UTC+01:00) Algiers, Tunis":
              "（国际协调时间+01:00）阿尔及尔、突尼斯",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "（国际协调时间+01:00）阿姆斯特丹、柏林、伯尔尼、罗马、斯德哥尔摩、维也纳",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "（国际协调时间+01:00）贝尔格莱德、伯拉第斯拉瓦、布达佩斯、卢布尔雅那、布拉格",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "（国际协调时间+01:00）布鲁塞尔、哥本哈根、马德里、巴黎",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "（国际协调时间+01:00）萨拉热窝、斯科普里、华沙、萨格勒布",
            "(UTC+02:00) Athens, Bucharest":
              "（国际协调时间+02:00）雅典、布加勒斯特",
            "(UTC+02:00) Cairo": "（国际协调时间+02:00）开罗",
            "(UTC+02:00) Cyprus": "（国际协调时间+02:00）塞浦路斯",
            "(UTC+02:00) Harare, Johannesburg":
              "（国际协调时间+02:00）哈拉雷、约翰尼斯堡",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "（国际协调时间+02:00）赫尔辛基、基辅、里加、索非亚、塔林、维尔纽斯",
            "(UTC+02:00) Jerusalem": "（国际协调时间+02:00）耶路撒冷",
            "(UTC+02:00) Kaliningrad": "（国际协调时间+02:00）加里宁格勒",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "（国际协调时间+03:00）巴格达、科威特、卡塔尔、利雅得",
            "(UTC+03:00) Istanbul": "（国际协调时间+03:00）伊斯坦布尔",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "（国际协调时间+03:00）明斯克、莫斯科、基洛夫、伏尔加格勒",
            "(UTC+03:00) Nairobi": "（国际协调时间+03:00）内罗毕",
            "(UTC+03:00) Simferopol": "（国际协调时间+03:00）辛菲罗波尔",
            "(UTC+03:30) Tehran": "（国际协调时间+03:00）德黑兰",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "（国际协调时间+04:00）阿斯特拉罕、萨马拉、萨拉托夫、乌里扬诺夫斯克",
            "(UTC+04:00) Baku": "（国际协调时间+04:00）巴库",
            "(UTC+04:00) Dubai, Muscat": "（国际协调时间+04:00）迪拜、马斯喀特",
            "(UTC+04:30) Kabul": "（国际协调时间+04:30）喀布尔",
            "(UTC+05:00) Karachi, Tashkent":
              "（国际协调时间+05:00）卡拉奇、塔什干",
            "(UTC+05:00) Yekaterinburg": "（国际协调时间+05:00）叶卡捷琳堡",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "（国际协调时间+05:30）金奈、加尔各答、孟买、新德里",
            "(UTC+05:45) Kathmandu": "（国际协调时间+05:45）加德满都",
            "(UTC+06:00) Almaty": "（国际协调时间+06:00）阿拉木图",
            "(UTC+06:00) Astana, Dhaka": "（国际协调时间+06:00）阿斯塔纳、达卡",
            "(UTC+06:00) Omsk": "（国际协调时间+06:00）鄂木斯克",
            "(UTC+06:30) Yangon": "（国际协调时间+06:30）仰光",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "（国际协调时间+07:00）曼谷、雅加达、越南",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "（国际协调时间+07:00）巴尔瑙尔、新西伯利亚、托木斯克",
            "(UTC+07:00) Hovd": "（国际协调时间+07:00）科布多",
            "(UTC+07:00) Krasnoyarsk": "（国际协调时间+07:00）克拉斯诺亚尔斯克",
            "(UTC+07:00) Novokuznetsk": "（国际协调时间+07:00）新库兹涅茨克",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "（国际协调时间+08:00）北京、重庆、香港特别行政区",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "（国际协调时间+08:00）文莱、吉隆坡、新加坡",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "（国际协调时间+08:00）乔巴山、乌兰巴托",
            "(UTC+08:00) Irkutsk": "（国际协调时间+08:00）伊尔库茨克",
            "(UTC+08:00) Manila, Taipei": "（国际协调时间+08:00）马尼拉、台北",
            "(UTC+08:00) Perth": "（国际协调时间+08:00）珀斯",
            "(UTC+08:45) Eucla": "（国际协调时间+08:45）尤克拉",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "（国际协调时间+09:00）赤塔市、汉德加、雅库茨克",
            "(UTC+09:00) Osaka, Sapporo, Tokyo":
              "（国际协调时间+09:00）大阪、札幌、东京",
            "(UTC+09:00) Pyongyang": "（国际协调时间+09:00）平壤",
            "(UTC+09:00) Seoul": "（国际协调时间+09:00）汉城",
            "(UTC+09:30) Adelaide": "（国际协调时间+09:30）阿德莱德",
            "(UTC+09:30) Darwin": "（国际协调时间+09:30）达尔文",
            "(UTC+10:00) Brisbane": "（国际协调时间+10:00）布里斯班",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "（国际协调时间+10:00）堪培拉、墨尔本、悉尼",
            "(UTC+10:00) Guam, Port Moresby":
              "（国际协调时间+10:00）关岛、莫尔兹比港",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "（国际协调时间+10:00）乌斯季涅拉、海参崴",
            "(UTC+11:00) Magadan": "（国际协调时间+11:00）马加丹",
            "(UTC+11:00) Noumea, Solomon Islands":
              "（国际协调时间+11:00）努美阿、所罗门群岛",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "（国际协调时间+11:00）库页岛、中科雷姆斯克",
            "(UTC+12:00) Anadyr, Kamchatka":
              "（国际协调时间+12:00）阿纳德尔、堪察加",
            "(UTC+12:00) Auckland, Wellington":
              "（国际协调时间+12:00）奥克兰、惠灵顿",
            "(UTC+12:45) Chatham": "（国际协调时间+12:45）查塔姆",
            "(UTC+13:00) Samoa": "（国际协调时间+13:00）萨摩亚",
            "(UTC+13:00) Tonga": "（国际协调时间+13:00）汤加",
            "(UTC+14:00) Kiritimati": "（国际协调时间+14:00）圣诞岛",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "%D移动平均线类型",
            "%D Periods": "%D周期",
            "%K": "%K",
            "%K Double Smoothing Periods": "%K双重平滑周期",
            "%K Periods": "%K周期",
            "%K Smoothing Periods": "%K平滑周期",
            "+DI": "上升方向线",
            "+VI": "正成交量指标",
            "1 D": "1 天",
            "1 Hour": "1 小时",
            "1 Min": "1 分钟",
            "1 Mo": "1 个月",
            "1 Standard Deviation (1σ)": "1 标准偏差 (1σ)",
            "1 W": "1 周",
            "10 Min": "10 分钟",
            "10m": "10分钟",
            "13px": "13像素",
            "15 Min": "15 分钟",
            "15m": "15分钟",
            "1D": "1天",
            "1H": "1小时",
            "1m": "1分钟",
            "1M": "1个月",
            "1W": "1周",
            "1Y": "1年",
            "2 Standard Deviation (1σ)": "2 标准偏差 (1σ)",
            "2 Standard Deviation (2σ)": "2 标准偏差 (2σ)",
            "3 Standard Deviation (1σ)": "3 标准偏差 (1σ)",
            "3 Standard Deviation (3σ)": "3 标准偏差 (3σ)",
            "30 Min": "30 分钟",
            "30m": "30分钟",
            "3M": "3个月",
            "4 Hour": "4 小时",
            "4H": "4小时",
            "5 Min": "5 分钟",
            "5D": "5天",
            "5m": "5分钟",
            "5Y": "5年",
            "6M": "6个月",
            Abstract: "摘要",
            "Acc Swing": "积累摆动指标",
            "Accumulation/Distribution": "威廉多空力度线",
            "Accumulative Swing Index": "积累摆动指标",
            Add: "添加",
            ADD: "添加",
            "Add Stop Loss": "增加止损",
            "Add Take Profit": "增加止盈",
            ADX: "趋向平均值",
            "ADX/DMS": "自动数据交换系统/数据库管理系统",
            ALL: "全部",
            "All-Time High Lookback Period": "随时高回顾期间",
            Alligator: "鳄鱼指标",
            Annotation: "注释",
            Arc: "弧形",
            Aroon: "阿隆指标",
            "Aroon Down": "阿隆指标下降",
            "Aroon Osc": "阿隆震荡指标",
            "Aroon Oscillator": "阿隆摆动指标",
            "Aroon Up": "阿隆指标上升",
            Arrow: "箭头",
            "ATH Lookback Period": "ATH 回顾周期",
            ATR: "平均真实波幅",
            "ATR Bands": "ATR带",
            "ATR Bands Bottom": "ATR带底部",
            "ATR Bands Channel": "斯塔克带顶部值",
            "ATR Bands Top": "ATR带顶部",
            "ATR Trailing Stop": "ATR追踪止损",
            "ATR Trailing Stops": "ATR追踪止损",
            "Auto Select": "自动选择",
            Average: "平均",
            "Average Line": "平均线",
            "Average True Range": "平均真实范围",
            "Average Type": "平均型",
            Awesome: "不错指标",
            "Awesome Oscillator": "AO震荡指标",
            "Axis Label": "轴标签",
            "Axis Label:": "坐标轴标签：",
            "Axis Text": "轴文本",
            B: "粗体",
            Background: "背景",
            "Background Color": "背景颜色",
            "Balance of Power": "力量的均衡",
            Bandwidth: "带宽",
            Bar: "直线",
            Bars: "柱",
            "Bars Color": "柱线颜色",
            "Base Line": "基础线",
            "Base Line Period": "基础线周期",
            Baseline: "基线",
            "Baseline Delta": "从基线的变化",
            "BATS BZX real-time.": "BATS BZX实时性。",
            Bearish: "看跌",
            Beta: "测试",
            "Beta Callouts Candle Border": "Beta 标注蜡烛边框",
            Black: "黑色",
            "Boll %b": "布林线%b",
            "Boll BW": "布林带宽度",
            "Bollinger %b": "布林%b",
            "Bollinger Bands": "布林线",
            "Bollinger Bands Bottom": "布林线底部",
            "Bollinger Bands Median": "布林线中位",
            "Bollinger Bands Top": "布林线顶部",
            "Bollinger Bandwidth": "布林带宽",
            Border: "边框",
            "Bulge Threshold": "突出部门槛",
            Bullish: "看涨",
            "Buy Stops": "止损买单",
            "by Xignite.": "由Xignite。",
            Callout: "卖出",
            Callouts: "图例",
            cancel: "取消",
            Candle: "蜡烛",
            "Candle Border": "烛边缘",
            "Candle Borders": "蜡烛国界",
            "Candle Color": "蜡烛颜色",
            "Candle Wick": "蜡烛烛心",
            Candles: "蜡烛",
            "Center Of Gravity": "重心指标",
            "Chaikin MF": "佳庆现金流量指标",
            "Chaikin Money Flow": "佳庆现金流指标",
            "Chaikin Vol": "佳庆成交量指标",
            "Chaikin Volatility": "佳庆波动指标",
            "Chande Fcst": "钱德预测指标",
            "Chande Forecast Oscillator": "钱德预测摆动指标",
            "Chande Momentum Oscillator": "钱德动量摆动指标",
            "Chande Mtm": "钱德动量指标",
            "Change Timezone": "更改时区",
            Channel: "通道",
            "Channel Fill": "通道填充",
            Chart: "图表",
            "Chart Preferences": "图表选择",
            "Chart Scale": "图表尺度",
            "Chart Shared Successfully!": "成功分享图表！",
            "Chart Style": "图表类型",
            "Chart Type": "图表类型",
            Check: "勾",
            "Choose language": "选择语言",
            "Choose Timezone": "选择时区",
            "Choppiness Index": "翻滚度指数",
            Clear: "清除",
            "Clear All": "全部清除",
            "Clear Drawings": "清空图示",
            Close: "关闭",
            close: "关闭",
            Color: "颜色",
            "Colored Bar": "彩条",
            "Colored Line": "色线",
            COMMODITIES: "商品",
            "Commodity Channel Index": "顺势通道指标",
            Compare: "比较",
            "Comparison Symbol": "比较代码",
            Composite: "综合",
            "Composite RSI": "综合RSI（相对强弱指标）",
            Continuous: "连续线",
            "Conversion Line": "对话线",
            "Conversion Line Period": "对话线周期",
            Coppock: "估波指标",
            "Coppock Curve": "估波曲线",
            Correl: "相关",
            Correlation: "相关",
            "Correlation Coefficient": "相关系数",
            Courier: "Courier 字体",
            Create: "创建",
            "Create a New Custom Theme": "创建新的自定义主题",
            "Create Custom Theme": "创建自定义主题",
            "Create Image": "创建图像",
            Cross: "叉",
            Crosshair: "十字光标",
            Crosshairs: "十字线",
            Crossline: "单行标题",
            CURRENCIES: "货币",
            "Current Studies": "当前研究",
            "Current Symbols": "当前符号",
            "Current TimeZone is": "当前的时区是",
            "Custom Themes": "自定义主题",
            "Cycle 1": "周期1",
            "Cycle 2": "周期2",
            "Cycle 3": "周期3",
            D: "日",
            daily: "日常",
            Darvas: "达瓦斯",
            "Darvas Box": "股票箱理论",
            "Data delayed 15 min.": "数据延迟15分钟。",
            "Data is randomized.": "数据是随机的。",
            "Data is real-time.": "数据是实时的。",
            "Date Dividers": "日期分隔线",
            "Date/Time": "日期/时间",
            "Date/Time:": "日期/时间",
            Day: "白天",
            "Days Per Year": "每年天数",
            "Decreasing Bar": "减少柱线",
            Default: "默认",
            "Default Themes": "默认主题",
            Delete: "删除",
            "Delete Study": "删除研究",
            "Demo data.": "示范数据。",
            Detrended: "非趋势指标",
            "Detrended Price Oscillator": "非趋势价格摆动指标",
            Directional: "方向",
            "Disparity Index": "差异指数",
            Display: "显示",
            "Display 1 Standard Deviation (1σ)": "显示 1 标准偏差  (1σ)",
            "Display 2 Standard Deviation (2σ)": "显示 2 标准偏差  (2σ)",
            "Display 3 Standard Deviation (3σ)": "显示 3 标准偏差  (3σ)",
            "Display Average": "显示平均值",
            "Distance(%)": "差距（%）",
            Divergence: "背离",
            "Don't see your study below? Type in your search here.":
              "下方未看到您的研究？在此键入您的搜索。",
            "Donchian Channel": "唐奇安通道",
            "Donchian High": "唐奇安高点",
            "Donchian Low": "唐奇安低点",
            "Donchian Median": "唐奇安中位",
            "Donchian Width": "唐奇安宽度指标",
            Done: "完成",
            Doodle: "自由形式",
            "Double Exponential": "双指数",
            "Double Smoothing Period": "双平滑期间",
            "Down Volume": "下降成交量",
            Downtrend: "下降趋势",
            Draw: "图画",
            "Ease of Movement": "简易波动指标",
            Edit: "编辑",
            "Edit Settings...": "编辑设置",
            EF: "EF",
            "EF Trigger": "EF触发器",
            "Ehler Fisher": "埃勒斯费舍尔变换",
            "Ehler Fisher Transform": "埃勒斯费舍尔变换转化",
            "Elder Bear Power": "爱耳德空头力量指标",
            "Elder Bull Power": "爱耳德多头力量指标",
            "Elder Force": "爱耳德强力指标",
            "Elder Force Index": "爱耳德强力指数指标",
            "Elder Impulse System": "较长的脉冲系统",
            "Elder Ray Index": "爱耳德射线指标",
            Ellipse: "椭圆",
            ema: "ema",
            "End of day data.": "从一天结束的数据。",
            'Enter box size and hit "Enter"': "输入方框尺寸并点击“回车”",
            "Enter name of view:": "输入视图名称：",
            'Enter reversal and hit "Enter"': "输入逆转并点击“回车”",
            "Enter Symbol": "输入符号",
            'Enter value and hit "Enter"': "输入数值并点击“回车”",
            Events: "事件",
            "Exit Field": "退出领域",
            Exponential: "指数",
            "Extended Hours": "延长时间",
            Fade: "衰退",
            Fake: "伪装",
            Fan: "扇形",
            Fast: "快速",
            "Fast MA Period": "快速移动平均线周期",
            "Fib Arc": "Fib 弧形图",
            "Fib Fan": "Fib 扇形图",
            "Fib Time Zone": "Fib 时区",
            Fibonacci: "斐波那契数列",
            fibonacci: "斐波纳契",
            Field: "域",
            field: "领域",
            Fill: "填入",
            "Focus Arrow": "焦点箭头",
            Forecast: "预测",
            FOREX: "外汇",
            "Formula courtesy": "公式感谢",
            "Fractal Channel": "分形通道",
            "Fractal Chaos": "分形混沌",
            "Fractal Chaos Bands": "分形混沌带",
            "Fractal Chaos Oscillator": "分形混沌摆动指标",
            "Fractal High": "分形最高点",
            "Fractal Low": "分形最低点",
            FUNDS: "基金",
            FUTURES: "期货",
            FX: "外汇",
            Gain: "利润",
            "Gann Fan": "江恩角度线",
            Garamond: "Garamond 字体",
            Gartley: "Gartley形态",
            Gator: "鳄鱼",
            "Gator Oscillator": "鳄鱼震荡指标",
            "Generating Image": "生成图像",
            Ghost: "幽灵",
            "Ghost Boxes": "幽灵盒",
            Gopala: "高帕拉克里施南",
            "Gopalakrishnan Range Index": "高帕拉克里施南范围指标",
            Gradient: "斜率",
            Green: "绿色",
            "Grid Lines": "网格线",
            H: "时",
            harmonic: "谐波",
            Heart: "心形",
            "Heaviest Rate of Change Period": "变化率最大期间",
            "Heaviest SMA Period": "最大SMA期间",
            "Heavy Rate of Change Period": "变化率大期间",
            "Heavy SMA Period": "大SMA期间",
            "Heikin Ashi": "平均柱形",
            "Heikin-Ashi": "平均酒吧",
            Helvetica: "Helvetica 字体",
            "HHV/LLV Lookback": "HHV/LLV回顾",
            High: "高",
            "High Low": "最高的最低价",
            "High Low Bands": "最高价最低价带",
            "High Low Bottom": "最高的最低价底部",
            "High Low Median": "最高的最低价中位",
            "High Low Top": "最高的最低价顶部",
            "High Minus Low": "最高价减最低价",
            "High Period": "高位期间",
            "High-Low": "最高价-最低价",
            "high/low": "高/低",
            "Highest High Value": "最高最高价",
            HighLow: "最高价最低价",
            "Hist Vol": "历史波动",
            Histogram: "直方图",
            "Historical Volatility": "历史波动",
            "Hollow Candle": "空心蜡烛",
            Horizontal: "水平",
            Hull: "Hull",
            I: "斜体",
            "Ichimoku Clouds": "一目均衡表",
            "Increasing Bar": "增加柱线",
            Index: "指数",
            INDEXES: "指数",
            INDICES: "指数",
            Info: "信息",
            Intercept: "截距",
            Interval: "间隔",
            "Intraday Momentum Index": "日内动量指标",
            "Intraday Mtm": "日内动量",
            Jaw: "颌",
            "Jaw Offset": "颌抵消",
            "Jaw Period": "颌周期",
            Kagi: "卡吉",
            Keltner: "肯特纳通道",
            "Keltner Bottom": "肯特纳底部",
            "Keltner Channel": "肯特纳通道",
            "Keltner Median": "肯特纳中位",
            "Keltner Top": "肯特纳顶部",
            Klinger: "克林格指标",
            "Klinger Volume Oscillator": "克林格成交量摆动指标",
            KlingerSignal: "克林格信号",
            KST: "完全肯定指标",
            KSTSignal: "KST信号",
            "Lagging Span": "滞后扩展",
            "Lagging Span Period": "滞后扩展周期",
            "Leading Span A": "领先扩展A",
            "Leading Span B": "领先扩展B",
            "Leading Span B Period": "领先扩展B周期",
            "Level Offset": "位移",
            Levels: "水平",
            "Light Rate of Change Period": "变化率小期间",
            "Light SMA Period": "小SMA期间",
            "Lightest Rate of Change Period": "变化率最小期间",
            "Lightest SMA Period": "最小SMA期间",
            "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.":
              "与所有ChartIQ标记一样，此对象本身由图表管理，所以当您滚动图表时，此对象会跟着一起移动。当符号发生变化时，它也会自动消失。",
            "Limit Move Value": "限制运行值",
            "Lin Fcst": "线性预测",
            "Lin Incpt": "线性截距",
            "Lin R2": "线性相关R2",
            Line: "曲线",
            "Line Break": "线路中断",
            "Line/Bar Chart": "线形/柱形图",
            "Linear Reg Forecast": "线性回归预测",
            "Linear Reg Intercept": "线性回归截距",
            "Linear Reg R2": "线性回归相关系数R2",
            "Linear Reg Slope": "线性回归斜率",
            Lips: "唇",
            "Lips Offset": "唇抵消",
            "Lips Period": "唇周期",
            Locale: "语境",
            "Log Scale": "对数尺度",
            "Long Cycle": "长周期",
            "Long RoC": "做多变化率",
            Loss: "损失",
            Low: "低",
            "Low Period": "低位期间",
            "Lowest Low Value": "最低最低价",
            "LR Slope": "线斜率",
            M: "月",
            "M Flow": "现金流",
            MA: "移动平均数",
            ma: "ma",
            "MA Env": "移动平均线通道",
            "MA Env Bottom": "移动平均线通道底部",
            "MA Env Median": "移动平均线通道中位",
            "MA Env Top": "移动平均线通道顶部",
            "MA Period": "MA期间",
            MACD: "移动平均汇聚背驰指标",
            "Market Data": "市场数据",
            "Market Facilitation Index": "市场促进指数指标",
            "Mass Idx": "梅斯指标",
            "Mass Index": "梅斯指标",
            "Maximum AF": "最大AF",
            mean: "平均",
            Measure: "测量",
            "Med Price": "中位价格",
            median: "中位数",
            "Median Price": "中间价位指数",
            "Min Tick Value": "最小点数值",
            "Minimum AF": "最小AF",
            Momentum: "动量",
            "Momentum Indicator": "动量",
            "Money Flow Index": "资金流量指标",
            More: "更多",
            "More studies": "更多研究……",
            Mountain: "山",
            "Mountain Charts": "山峰图",
            "Mountain Color": "山色",
            "Moving Average": "移动平均线",
            "Moving Average Deviation": "移动平均偏差",
            "Moving Average Envelope": "移动平均线通道",
            "Moving Average Type": "移动平均线类型",
            ms: "毫秒",
            Multiplier: "乘数",
            Name: "名称",
            "Neg Vol": "负成交量",
            "Negative Bar": "负柱",
            "Negative Volume Index": "负成交量指标",
            Neutral: "中立",
            "New Custom Theme": "新自定义主题",
            "New Theme": "新主题",
            "New Theme Name": "新主题名称",
            "New Theme Name:": "新的主题名称：",
            Night: "夜晚",
            None: "没有",
            "None available": "无可提供",
            "Not enough data to compute": "没有足够的数据进行计算",
            Offset: "抵消",
            "On Bal Vol": "能量潮",
            "On Balance Volume": "能量潮",
            Open: "开盘",
            "Open shared chart in new window": "在新窗口中打开分享的图表",
            or: "或者",
            OverBought: "超买",
            Overlay: "覆盖图",
            OverSold: "超卖",
            "P Rel": "价格相关",
            Palatino: "Palatino 字体",
            "Parabolic SAR": "抛物线SAR",
            Percent: "百分比",
            percent: "百分比",
            "Perf Idx": "性能指标",
            "Performance Index": "性能指标",
            Period: "周期",
            pips: "基点",
            Pitchfork: "叉子",
            Pivot: "轴心",
            "Pivot Points": "轴心点",
            "Plot Type": "作图类型",
            PMO: "价格动量震荡指标",
            PMOSignal: "PMO信号",
            "Point & Figure": "点与图",
            Points: "点",
            points: "点",
            "Points Or Percent": "点数或百分比",
            "Popular Studies": "受欢迎的研究",
            "Pos Vol": "正成交量",
            "Positive Bar": "正柱",
            "Positive Volume Index": "正成交量指标",
            "Press this button to generate a shareable image:":
              "按此按钮生成可共享的图像：",
            "Pretty Good": "棒极了",
            "Pretty Good Oscillator": "不错震荡指标",
            Price: "价格",
            "Price Minimum": "最低价",
            "Price Momentum Oscillator": "价格势头震荡指标",
            "Price Osc": "价格震荡指标",
            "Price Oscillator": "价格震荡指标",
            "Price Rate of Change": "价格变化率",
            "Price Relative": "价格相对指标",
            "Price ROC": "价格变化率",
            "Price Vol": "价格成交量",
            "Price Volume Trend": "价格成交量趋势",
            "Prime Bands Bottom": "质数通道底部",
            "Prime Bands Channel": "质数带通道",
            "Prime Bands Top": "质数通道顶部",
            "Prime Number": "质数",
            "Prime Number Bands": "质数通道",
            "Prime Number Oscillator": "质数震荡指标",
            "Pring's Know Sure Thing": "普林格确然指标",
            "Pring's Special K": "普林格特殊K线",
            "Psychological Line": "心理线",
            QStick: "量化蜡烛线",
            "Quadrant Lines": "四等分线",
            "Rainbow Moving Average": "彩虹移动平均值",
            "Rainbow Oscillator": "彩虹震荡指标",
            "Random Walk": "随机漫步指标",
            "Random Walk High": "随机漫步最高点",
            "Random Walk Index": "随机漫步指标",
            "Random Walk Low": "随机漫步最低点",
            "Range Bars": "范围柱",
            "Range Selector": "范围选择器",
            "Rate Of Change": "变化率指标",
            RAVI: "RAVI",
            Ray: "射线",
            Rectangle: "四边形",
            Redo: "重做",
            "Regression Line": "回归线",
            "Rel Vig": "相对能量指数指标",
            "Rel Vol": "相关成交量",
            "Relative Vigor Index": "相对能量指数指标",
            "Relative Volatility": "相对波幅",
            RelVigSignal: "相对能量信号",
            Renko: "砖形图",
            "Resistance 1": "压力1",
            "Resistance 2": "压力2",
            "Resistance 3": "压力3",
            Result: "结果",
            Retracement: "回调",
            "right-click to delete": "右键单击鼠标删除",
            "right-click to manage": "右键单击管理",
            "Risk/Reward": "风险/回报",
            RSI: "相对强弱指数",
            RSquared: "R相关",
            s: "秒",
            save: "存档",
            Save: "保存",
            "Save Theme": "保存主题",
            "Save View": "保存视图",
            "Saved View": "已保存的视图",
            "Saved Views": "已保存视图",
            "Scale Factor": "比例系数",
            Schaff: "沙夫指标",
            "Schaff Trend Cycle": "沙夫趋势周期",
            Search: "搜索",
            Segment: "细分",
            "Select Tool": "选择工具",
            "Sell Stops": "止损卖单",
            Series: "系列",
            "Set Point & Figure Parameters": "设定值和图形指数",
            "Set Price Lines": "设置价格线",
            "Set Range": "设置范围",
            "Set Reversal Percentage": "设置逆转百分比",
            Settings: "设置",
            Shading: "暗影",
            Shape: "形状",
            "Shape - Arrow": "形状 – 箭头",
            "Shape - Check": "形状 – 打勾",
            "Shape - Cross": "形状 – 十字",
            "Shape - Focus": "形状 – 焦点",
            "Shape - Heart": "形状 – 心形",
            "Shape - Star": "形状 – 星形",
            Share: "分享此图",
            "Share This Chart": "分享此图",
            "Share Your Chart": "分享您的图表",
            Shift: "转换",
            "Shift Percentage": "变换百分比",
            "Shift Type": "转换类型",
            "Shinohara Intensity Ratio": "筱原强度比",
            "Short Cycle": "短周期",
            "Short RoC": "做空变化率",
            "Show All": "显示所有",
            "Show Fractals": "显示分形",
            "Show Zones": "显示区域",
            Signal: "信号",
            "Signal Period": "信号周期",
            "Signal Periods": "信号周期",
            Simple: "简单",
            "Simple Circle": "简单圆形",
            "Simple Square": "简单的广场",
            "Simulated data.": "模拟数据",
            Slope: "斜率",
            Slow: "慢速",
            "Slow MA Period": "慢速移动平均线周期",
            SMA1: "简单移动平均线1",
            SMA10: "简单移动平均线10",
            SMA2: "简单移动平均线2",
            SMA3: "简单移动平均线3",
            SMA4: "简单移动平均线4",
            SMA5: "简单移动平均线5",
            SMA6: "简单移动平均线6",
            SMA7: "简单移动平均线7",
            SMA8: "简单移动平均线8",
            SMA9: "简单移动平均线9",
            Smooth: "平滑",
            "Smoothing Period": "平滑周期",
            "Speed Resistance Arc": "速阻弧形线",
            "Speed Resistance Line": "速阻线",
            SPY: "SPY",
            Squarewave: "方波",
            squarewave: "方波",
            Squat: "蛰伏",
            standard: "标准",
            "Standard Deviation": "时序预测",
            "Standard Deviations": "标准差",
            Star: "星形",
            "STARC Bands": "标准差",
            "STARC Bands Bottom": "斯塔克带中间值",
            "STARC Bands Median": "ATR带通道",
            "STARC Bands Top": "斯塔克带底部值",
            "Stch Mtm": "随机动量",
            "STD Dev": "标准差",
            "STD Period": "标准周期",
            "Stochastic Momentum Index": "随机动量指标",
            Stochastics: "随机指标",
            STOCKS: "股票",
            "Stop Levels": "止位",
            "Stop Loss": "止损",
            Stops: "止损",
            "Strong Ratio": "强比例",
            Studies: "研究",
            Study: "研究",
            Supertrend: "超级趋势",
            "Support 1": "支撑1",
            "Support 2": "支撑2",
            "Support 3": "支撑3",
            Swing: "摆动",
            "Swing Index": "时序预测",
            Symbol: "用户名",
            T: "时间",
            "Take Profit": "止盈",
            Teeth: "牙",
            "Teeth Offset": "牙抵消",
            "Teeth Period": "牙周期",
            Themes: "主题",
            "This is a callout marker": "这是一个标注标记",
            "This is an example of a complex marker which can contain html, video, images, css, and animations.":
              "这是一个可包含 HTML、视频、图像、CSS 和动画的复杂标记示例。",
            TII: "TII",
            "Time Cycle": "时间周期",
            "Time Fcst": "时间预测",
            "Time Series": "时间序列",
            "Time Series Forecast": "摆动指标",
            "Time Zone": "时区",
            "Times New Roman": "新罗马字体",
            Timezone: "时区",
            "Tirone Levels": "泰龙水平线",
            "To set your timezone use the location button below or scroll through the following list":
              "使用上面的位置按钮或滚动查看跟踪清单设置你的时间区域",
            "To set your timezone use the location button below, or scroll through the following list...":
              "要设置您的时区，使用下面的位置按钮，或者滚动浏览以下列表...",
            "Tolerance Percentage": "容忍百分比",
            "Trade Vol": "交易量",
            "Trade Volume Index": "交易量指标",
            "Trend Intensity Index": "趋势强度指数",
            Triangular: "三角",
            "Triple Exponential": "三重指数",
            TRIX: "TRIX",
            "True Range": "真实范围",
            Twiggs: "TMF现金流量指标",
            "Twiggs Money Flow": "TMF现金流量指标",
            Type: "类型",
            "Typical Price": "典型价格",
            "Ulcer Index": "终极波动指数",
            Ultimate: "终极震荡指标",
            "Ultimate Oscillator": "终极震荡指标",
            Underlay: "基础",
            Undo: "撤销",
            Units: "单位",
            "Unrealized Gain/Loss": "未实现收益/亏损",
            "Up Volume": "上升成交量",
            "Uploading Image": "上传图片",
            Uptrend: "上升趋势",
            "Use My Current Location": "使用我的当前位置",
            "Use the following link to share your chart:":
              "使用下列链接分享你的图表",
            "Use Volume": "利用卷",
            "Valuation Lines": "价值线",
            Variable: "变量",
            Vchart: "成交量图",
            vdma: "vdma",
            Vertical: "垂直的",
            "Vertical Horizontal Filter": "成交量图",
            VIDYA: "VIDYA",
            Views: "视图",
            Vol: "交易量",
            "Vol Osc": "成交量震荡指标",
            "vol profile": "成交量特点",
            "Vol ROC": "成交量变化率",
            "vol undr": "成交量下置",
            Volume: "成交量",
            "Volume % of Avg": "平均成交量%",
            "Volume Candle": "成交量K线图",
            "Volume Chart": "十字过滤线",
            "Volume Not Available": "该卷不可用",
            "Volume Oscillator": "成交量震荡指标",
            "Volume Profile": "成交量特点",
            "Volume Rate of Change": "成交量变化率",
            "Volume Spike": "柱状成交量",
            "Volume Underlay": "成交量下置",
            "Vortex Indicator": "漩涡指示器",
            "VT HZ Filter": "VT HZ过滤线",
            VWAP: "成交量加权平均价",
            W: "周",
            "W Acc Dist": "累积摆动距离",
            "Weak Ratio": "弱比例",
            weekly: "每周",
            Weighted: "加权重",
            "Weighted Close": "权重收盘价",
            "Welles Wilder": "Welles Wilder",
            White: "白色",
            "Williams %R": "威廉指标",
            "Your timezone is your current location": "您的时区即您当前的位置",
            YTD: "最近的一年",
            ZigZag: "锯齿状",
            "3 Min": ",",
            "3m": ",",
          },
          ja: {
            "-DI": "-DI",
            "-VI": "-VI",
            "(Scroll for more options)":
              "（スクロールして他のオプションを表示）",
            "(UTC-01:00) Azores": "(UTC-01:00) アゾレス諸島",
            "(UTC-01:00) Cape Verde Islands": "(UTC-01:00) カポヴェルデ諸島",
            "(UTC-02:00) Mid-Atlantic": "(UTC-02:00) 中部大西洋",
            "(UTC-03:00) Buenos Aires": "(UTC-03:00) ブエノスアイレス",
            "(UTC-03:00) Montevideo": "(UTC-03:00) モンテビデオ",
            "(UTC-03:00) Punta Arenas": "(UTC-03:00) プンタ・アレーナス",
            "(UTC-03:00) Sao Paulo": "(UTC-03:00) サンパウロ",
            "(UTC-03:30) Newfoundland and Labrador":
              "(UTC-03:30) ニューファウンドランドとラブラドール",
            "(UTC-04:00) Asuncion": "(UTC-04:00) アスンシオン",
            "(UTC-04:00) Atlantic Time (Canada)":
              "(UTC-04:00) 大西洋標準時（カナダ）",
            "(UTC-04:00) Caracas": "(UTC-04:00) カラカス",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "(UTC-04:00) ジョージタウン、ラパス、マナウス、サンフアン",
            "(UTC-04:00) Santiago": "(UTC-04:00) サンチアゴ",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "(UTC-05:00) ボゴタ、リマ、キート、リオ・ブランコ",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "(UTC-05:00) 東部標準時（アメリカおよびカナダ）",
            "(UTC-05:00) Indiana (East)": "(UTC-05:00) インディアナ（東）",
            "(UTC-06:00) Central America": "(UTC-06:00) 中央アメリカ",
            "(UTC-06:00) Central Time (US and Canada)":
              "(UTC-06:00) 中部標準時（アメリカおよびカナダ）",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "(UTC-06:00) グアダラハラ、メキシコシティー、モンテレイ",
            "(UTC-06:00) Saskatchewan": "(UTC-06:00) サスカチュワン州",
            "(UTC-07:00) Arizona": "(UTC-07:00) アリゾナ",
            "(UTC-07:00) Chihuahua, Mazatlan": "(UTC-07:00) チワワ, マサトラン",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "(UTC-07:00) 山地標準時（アメリカおよびカナダ）",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "(UTC-08:00) 太平洋標準時（アメリカおよびカナダ）",
            "(UTC-08:00) Tijuana": "(UTC-08:00) ティファナ",
            "(UTC-09:00) Alaska": "(UTC-09:00) アラスカ",
            "(UTC-10:00) Hawaii": "(UTC-10:00) ハワイ",
            "(UTC-11:00) American Samoa, Midway Island":
              "(UTC-11:00) アメリカ領サモア, ミッドウェー諸島",
            "(UTC) Casablanca": "(UTC) カサブランカ",
            "(UTC) Dublin": "(UTC) ダブリン",
            "(UTC) Lisbon, London": "(UTC) リスボン、ロンドン",
            "(UTC) Greenwich Mean Time, Reykjavik":
              "(UTC) グリニッジ標準時、レイキャビク",
            "(UTC+01:00) Algiers, Tunis": "(UTC+01:00) アルジェ、チュニス",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "(UTC+01:00) アムステルダム、ベルリン、ベルン、ローマ、ストックホルム、ウィーン",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "(UTC+01:00) ベルグラード、ブラチスラバ、ブダペスト、リュブリャナ、プラハ",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "(UTC+01:00) ブリュッセル、コペンハーゲン、マドリード、パリ",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "(UTC+01:00) サラエボ、スコピエ、ワルシャワ、ザグレブ",
            "(UTC+02:00) Athens, Bucharest": "(UTC+02:00) アテネ、ブカレスト",
            "(UTC+02:00) Cairo": "(UTC+02:00) カイロ",
            "(UTC+02:00) Cyprus": "(UTC+02:00) キプロス",
            "(UTC+02:00) Harare, Johannesburg":
              "(UTC+02:00) ハラーレ、ヨハネスブルグ",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "(UTC+02:00) ヘルシンキ、キエフ、リガ、ソフィア、タリン、ビリニュス",
            "(UTC+02:00) Jerusalem": "(UTC+02:00) エルサレム",
            "(UTC+02:00) Kaliningrad": "(UTC+02:00) カリーニングラード",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "(UTC+03:00) バグダッド、クウェート、カタール、リヤド",
            "(UTC+03:00) Istanbul": "(UTC+03:00) イスタンブール",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "(UTC+03:00) ミンスク、モスクワ、キーロフ、ボルゴグラード",
            "(UTC+03:00) Nairobi": "(UTC+03:00) ナイロビ",
            "(UTC+03:00) Simferopol": "(UTC+03:00) シンフェロポリ",
            "(UTC+03:30) Tehran": "(UTC+03:30) テヘラン",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "(UTC+04:00) アストラカン、サマラ、サラトフ、ウリヤノフスク",
            "(UTC+04:00) Baku": "(UTC+04:00) バクー",
            "(UTC+04:00) Dubai, Muscat": "(UTC+04:00) ドバイ、マスカット",
            "(UTC+04:30) Kabul": "(UTC+04:30) カブール",
            "(UTC+05:00) Karachi, Tashkent": "(UTC+05:00) カラチ、タシュケント",
            "(UTC+05:00) Yekaterinburg": "(UTC+05:00) エカテリンブルグ",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "(UTC+05:30) チェンマイ、コルカタ、ムンバイ、ニューデリー",
            "(UTC+05:45) Kathmandu": "(UTC+05:45) カトマンドゥ",
            "(UTC+06:00) Almaty": "(UTC+06:00) アルマトイ",
            "(UTC+06:00) Astana, Dhaka": "(UTC+06:00) アスタナ、ダッカ",
            "(UTC+06:00) Omsk": "(UTC+06:00) オムスク",
            "(UTC+06:30) Yangon": "(UTC+06:30) ヤンゴン",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "(UTC+07:00) バンコク、ジャカルタ、ベトナム",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "(UTC+07:00) バルナウル、ノヴォシビルスク、トムスク",
            "(UTC+07:00) Hovd": "(UTC+07:00) ホブド",
            "(UTC+07:00) Krasnoyarsk": "(UTC+07:00) クラスノヤルスク",
            "(UTC+07:00) Novokuznetsk": "(UTC+07:00) ノヴォクズネツク",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "(UTC+08:00) 北京、重慶、香港特別自治区",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "(UTC+08:00) ブルネイ、クアラルンプール、シンガポール",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "(UTC+08:00) チョイバルサン、ウランバートル",
            "(UTC+08:00) Irkutsk": "(UTC+08:00) イルクーツク",
            "(UTC+08:00) Manila, Taipei": "(UTC+08:00) マニラ、台北",
            "(UTC+08:00) Perth": "(UTC+08:00) パース",
            "(UTC+08:45) Eucla": "(UTC+08:45) ユークラ",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "(UTC+09:00) チタ、ハンドゥイガ、ヤクーツク",
            "(UTC+09:00) Osaka, Sapporo, Tokyo": "(UTC+09:00) 大阪、札幌、東京",
            "(UTC+09:00) Pyongyang": "(UTC+09:00) ピョンヤン",
            "(UTC+09:00) Seoul": "(UTC+09:00) ソウル",
            "(UTC+09:30) Adelaide": "(UTC+09:30) アデレード",
            "(UTC+09:30) Darwin": "(UTC+09:30) ダーウィン",
            "(UTC+10:00) Brisbane": "(UTC+10:00) ブリスベン",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "(UTC+10:00) キャンベラ、メルボルン、シドニー",
            "(UTC+10:00) Guam, Port Moresby":
              "(UTC+10:00) グアム、ポートモレスビー",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "(UTC+10:00) ウスチ＝ネラ、ウラジオストク",
            "(UTC+11:00) Magadan": "(UTC+11:00) マガダン",
            "(UTC+11:00) Noumea, Solomon Islands":
              "(UTC+11:00) ヌメア、ソロモン諸島",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "(UTC+11:00) サハリン、スレドネコリムスク",
            "(UTC+12:00) Anadyr, Kamchatka":
              "(UTC+12:00) アナディリ、カムチャツカ",
            "(UTC+12:00) Auckland, Wellington":
              "(UTC+12:00) オークランド、ウェリントン",
            "(UTC+12:45) Chatham": "(UTC+12:45) チャタム",
            "(UTC+13:00) Samoa": "(UTC+13:00) サモア",
            "(UTC+13:00) Tonga": "(UTC+13:00) トンガ",
            "(UTC+14:00) Kiritimati": "(UTC+14:00) キリスィマスィ",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "%D移動平均タイプ",
            "%D Periods": "%D期間",
            "%K": "%K",
            "%K Double Smoothing Periods": "%Kダブルスムージング期間",
            "%K Periods": "%K期間",
            "%K Smoothing Periods": "%Kスムージング期間",
            "+DI": "+DI",
            "+VI": "+VI",
            "1 D": "1日",
            "1 Hour": "1時間",
            "1 Min": "1分",
            "1 Mo": "1月",
            "1 Standard Deviation (1σ)": "1標準偏差（1σ）",
            "1 W": "1週",
            "10 Min": "10分",
            "10m": "10分",
            "13px": "13px",
            "15 Min": "15分",
            "15m": "15分",
            "1D": "1日",
            "1H": "1時間",
            "1m": "1分",
            "1M": "1ヶ月",
            "1W": "1週",
            "1Y": "1年",
            "2 Standard Deviation (1σ)": "2標準偏差（1σ）",
            "2 Standard Deviation (2σ)": "2標準偏差（2σ）",
            "3 Standard Deviation (1σ)": "3標準偏差（1σ）",
            "3 Standard Deviation (3σ)": "3標準偏差（3σ）",
            "30 Min": "30分",
            "30m": "30分",
            "3M": "3ヶ月",
            "4 Hour": "4時間",
            "4H": "4時間",
            "5 Min": "5分",
            "5D": "5日",
            "5m": "5分",
            "5Y": "5年",
            "6M": "6ヶ月",
            Abstract: "要約",
            "Acc Swing": "集積スイング",
            "Accumulation/Distribution": "集積/離散",
            "Accumulative Swing Index": "アキューミュレーション・スイング指数",
            Add: "追加",
            ADD: "ADD",
            "Add Stop Loss": "ストップロスを追加",
            "Add Take Profit": "テイクプロフィットを追加",
            ADX: "ADX",
            "ADX/DMS": "ADX/DMS",
            ALL: "全て",
            "All-Time High Lookback Period":
              "過去最高値遡及（ルックバック）期間",
            Alligator: "アリゲーター",
            Annotation: "注釈",
            Arc: "アーク",
            Aroon: "アルーン",
            "Aroon Down": "アルーン・ダウン",
            "Aroon Osc": "アルーン・オシレーター",
            "Aroon Oscillator": "アルーン・オシレーター",
            "Aroon Up": "アルーン・アップ",
            Arrow: "矢印",
            "ATH Lookback Period": "ATH後退期間",
            ATR: "ATR",
            "ATR Bands": "アベレージ・トゥルー・レンジ・バンド",
            "ATR Bands Bottom": "アベレージ・トゥルー・レンジ・バンド・ボトム",
            "ATR Bands Channel":
              "アベレージ・トゥルー・レンジ・バンド・チャネル",
            "ATR Bands Top": "アベレージ・トゥルー・レンジ・バンド・トップ",
            "ATR Trailing Stop":
              "アベレージ・トゥルー・レンジ・トレーリング・ストップ",
            "ATR Trailing Stops":
              "アベレージ・トゥルー・レンジ・トレーリング・ストップ",
            "Auto Select": "自動選択",
            Average: "平均",
            "Average Line": "平均線",
            "Average True Range": "アベレージ・トゥルー・レンジ",
            "Average Type": "平均タイプ",
            Awesome: "オーサム",
            "Awesome Oscillator": "オーサム・オシレーター",
            "Axis Label": "軸ラベル",
            "Axis Label:": "軸ラベル：",
            "Axis Text": "中心線のテキスト",
            B: "太字",
            Background: "背景",
            "Background Color": "背景カラー",
            "Balance of Power": "力のバランス",
            Bandwidth: "幅",
            Bar: "棒",
            Bars: "バー",
            "Bars Color": "バーカラー",
            "Base Line": "基礎ライン",
            "Base Line Period": "基礎ライン期間",
            Baseline: "ベースライン",
            "Baseline Delta": "ベースラインからの変化",
            "BATS BZX real-time.": "BATSはリアルタイムBZX。",
            Bearish: "弱気",
            Beta: "Beta",
            "Beta Callouts Candle Border":
              "ベータコールアウトロウソク足ボーダー",
            Black: "黒",
            "Boll %b": "ボリンジャー %b",
            "Boll BW": "ボリンジャーバンド幅",
            "Bollinger %b": "ボリンジャー %b",
            "Bollinger Bands": "ボリンジャーバンド",
            "Bollinger Bands Bottom": "ボリンジャーバンド・ボトム",
            "Bollinger Bands Median": "ボリンジャーバンド中央値",
            "Bollinger Bands Top": "ボリンジャーバンド・トップ",
            "Bollinger Bandwidth": "ボリンジャーバンド幅",
            Border: "境界",
            "Bulge Threshold": "バルジ閾値",
            Bullish: "強気",
            "Buy Stops": "買い逆指値",
            "by Xignite.": "Xigniteによる。",
            Callout: "コールアウト",
            Callouts: "コールアウト",
            cancel: "キャンセル",
            Candle: "ローソク足",
            "Candle Border": "ロウソク足の縁",
            "Candle Borders": "キャンドルボーダー",
            "Candle Color": "ロウソク足の色",
            "Candle Wick": "ロウソク足の本体",
            Candles: "ローソク足",
            "Center Of Gravity": "重心",
            "Chaikin MF": "チャイキン・マネーフロー",
            "Chaikin Money Flow": "チャイキン・マネー・フロー",
            "Chaikin Vol": "チャイキン・ボラティリティ",
            "Chaikin Volatility": "チャイキン・ボラティリティ",
            "Chande Fcst": "シャンデ予想",
            "Chande Forecast Oscillator": "シャンデ予想オシレーター",
            "Chande Momentum Oscillator": "シャンデ・モメンタム・オシレーター",
            "Chande Mtm": "シャンデ・モメンタム",
            "Change Timezone": "タイムゾーンの変更",
            Channel: "チャネル",
            "Channel Fill": "チャネル・フィル",
            Chart: "チャート",
            "Chart Preferences": "チャート設定",
            "Chart Scale": "チャート目盛",
            "Chart Shared Successfully!": "チャートの共有が完了しました！",
            "Chart Style": "チャート形式",
            "Chart Type": "グラフの種類",
            Check: "チェック",
            "Choose language": "言語を選択する",
            "Choose Timezone": "タイムゾーンの選択",
            "Choppiness Index": "チョピネス・インデックス",
            Clear: "消去",
            "Clear All": "全てをクリアする",
            "Clear Drawings": "描画をクリア",
            Close: "閉じる",
            close: "閉じる",
            Color: "カラー",
            "Colored Bar": "カラー棒",
            "Colored Line": "色付きのライン",
            COMMODITIES: "商品",
            "Commodity Channel Index": "コモディティ・チャネル指数",
            Compare: "比較",
            "Comparison Symbol": "比較記号",
            Composite: "総合",
            "Composite RSI": "総合RSI",
            Continuous: "連続的",
            "Conversion Line": "変換ライン",
            "Conversion Line Period": "変換ライン期間",
            Coppock: "コポック",
            "Coppock Curve": "コポック指標",
            Correl: "相関係数",
            Correlation: "相関関係",
            "Correlation Coefficient": "相関係数",
            Courier: "Courier",
            Create: "新規作成",
            "Create a New Custom Theme": "カスタムテーマの新規作成",
            "Create Custom Theme": "カスタムテーマを作成する",
            "Create Image": "画像を作成する",
            Cross: "クロス",
            Crosshair: "十字線",
            Crosshairs: "十字",
            Crossline: "十字線",
            CURRENCIES: "通貨",
            "Current Studies": "現在のスタディー",
            "Current Symbols": "現在の記号",
            "Current TimeZone is": "現在のタイムゾーンは",
            "Custom Themes": "カスタムテーマ",
            "Cycle 1": "サイクル1",
            "Cycle 2": "サイクル2",
            "Cycle 3": "サイクル3",
            D: "日",
            daily: "デイリー",
            Darvas: "ダーバス",
            "Darvas Box": "ダーバス・ボックス",
            "Data delayed 15 min.": "データは15分遅れ。",
            "Data is randomized.": "データがランダム化されます。",
            "Data is real-time.": "データはリアルタイムです。",
            "Date Dividers": "日付分割",
            "Date/Time": "日付/時間",
            "Date/Time:": "日付／時間：",
            Day: "日中",
            "Days Per Year": "年間あたり日数",
            "Decreasing Bar": "減少バー",
            Default: "初期設定",
            "Default Themes": "既定のテーマ",
            Delete: "削除",
            "Delete Study": "スタディーを削除する",
            "Demo data.": "デモデータ。",
            Detrended: "デトレンディッド",
            "Detrended Price Oscillator":
              "デトレンディッド・プライス・オシレーター",
            Directional: "ディレクショナル",
            "Disparity Index": "ディスパリティ・インデックス",
            Display: "表示",
            "Display 1 Standard Deviation (1σ)": "1標準偏差（1σ）を表示する",
            "Display 2 Standard Deviation (2σ)": "2標準偏差（2σ）を表示する",
            "Display 3 Standard Deviation (3σ)": "3標準偏差（3σ）を表示する",
            "Display Average": "平均を表示する",
            "Distance(%)": "距離(%)",
            Divergence: "ダイバージェンス",
            "Don't see your study below? Type in your search here.":
              "調査結果が以下に見当たりませんか？こちらに検索ワードを入力してください。",
            "Donchian Channel": "ドンチャン・チャネル",
            "Donchian High": "ドンチャン高値",
            "Donchian Low": "ドンチャン安値",
            "Donchian Median": "ドンチャン中央値",
            "Donchian Width": "ドンチャン幅",
            Done: "完了",
            Doodle: "フリーフォーム",
            "Double Exponential": "二重指数",
            "Double Smoothing Period": "2重平滑期間",
            "Down Volume": "ダウン取引高",
            Downtrend: "下降トレンド",
            Draw: "描画",
            "Ease of Movement": "動きやすさ",
            Edit: "編集",
            "Edit Settings...": "設定を編集する…",
            EF: "EF",
            "EF Trigger": "EFトリガー",
            "Ehler Fisher": "エーラース・フィッシャー",
            "Ehler Fisher Transform":
              "エーラース・フィッシャー・トランスフォーム",
            "Elder Bear Power": "エルダー・ベア・パワー",
            "Elder Bull Power": "エルダー・ブル・パワー",
            "Elder Force": "エルダー・フォース",
            "Elder Force Index": "エルダー・フォース指数",
            "Elder Impulse System": "エルダー・インパルス・システム",
            "Elder Ray Index": "エルダー線",
            Ellipse: "楕円",
            ema: "指数平滑移動平均線",
            "End of day data.": "一日の終わりからのデータ。",
            'Enter box size and hit "Enter"':
              "ボックスサイズを入力して「入力する」を押す",
            "Enter name of view:": "ビューの名前を入力する",
            'Enter reversal and hit "Enter"':
              "反転を入力して「入力する」を押す",
            "Enter Symbol": "記号を入力",
            'Enter value and hit "Enter"': "値を入力して「入力する」を押す",
            Events: "イベント",
            "Exit Field": "出口フィールド",
            Exponential: "指数",
            "Extended Hours": "延長時間",
            Fade: "フェード",
            Fake: "フェイク",
            Fan: "ファン",
            Fast: "速い",
            "Fast MA Period": "速いMA期間",
            "Fib Arc": "フィボナッチアーク",
            "Fib Fan": "フィボナッチファン",
            "Fib Time Zone": "フィボナッチタイムゾーン",
            Fibonacci: "フィボナッチ",
            fibonacci: "フィボナッチ",
            Field: "分野",
            field: "フィールド",
            Fill: "フィル",
            "Focus Arrow": "注目矢印",
            Forecast: "予想",
            FOREX: "FX",
            "Formula courtesy": "式のおかげで",
            "Fractal Channel": "フラクタル・チャネル",
            "Fractal Chaos": "フラクタル・カオス",
            "Fractal Chaos Bands": "フラクタル・カオス・バンド",
            "Fractal Chaos Oscillator": "フラクタル・カオス・オシレーター",
            "Fractal High": "フラクタル高値",
            "Fractal Low": "フラクタル安値",
            FUNDS: "資金",
            FUTURES: "先物",
            FX: "FX",
            Gain: "利益",
            "Gann Fan": "ギャンファン",
            Garamond: "Garamond",
            Gartley: "ガートレイ",
            Gator: "ワニ",
            "Gator Oscillator": "ゲーター・オシレーター",
            "Generating Image": "画像生成中",
            Ghost: "ゴースト",
            "Ghost Boxes": "ゴースト・ボックス",
            Gopala: "ゴーパーラ",
            "Gopalakrishnan Range Index": "ゴパラクリシュナン・レンジ指数",
            Gradient: "グラデーション",
            Green: "グリーン",
            "Grid Lines": "グリッド線",
            H: "時間",
            harmonic: "ハーモニック",
            Heart: "ハート",
            "Heaviest Rate of Change Period": "変動期間の最高レート",
            "Heaviest SMA Period": "最高SMA期間",
            "Heavy Rate of Change Period": "変動期間の高レート",
            "Heavy SMA Period": "高SMA期間",
            "Heikin Ashi": "平均足",
            "Heikin-Ashi": "平均足",
            Helvetica: "Helvetica",
            "HHV/LLV Lookback": "HHV/LLV ルックバック",
            High: "High",
            "High Low": "ハイ・ロー",
            "High Low Bands": "ハイ・ロー・バンド",
            "High Low Bottom": "ハイ・ロー・ボトム",
            "High Low Median": "ハイ・ロー中央値",
            "High Low Top": "ハイ・ロー・トップ",
            "High Minus Low": "ハイ・マイナス・ロー",
            "High Period": "高値期間",
            "High-Low": "ハイ・ロー",
            "high/low": "ハイ／ロー",
            "Highest High Value": "最高値",
            HighLow: "高低",
            "Hist Vol": "過去の取引高",
            Histogram: "ヒストグラム",
            "Historical Volatility": "ヒストリカル・ボラティリティ",
            "Hollow Candle": "陽線ローソク足",
            Horizontal: "水平",
            Hull: "Hull",
            I: "イタリック体",
            "Ichimoku Clouds": "一目均衡表",
            "Increasing Bar": "増加バー",
            Index: "指数",
            INDEXES: "指数",
            INDICES: "指数",
            Info: "情報",
            Intercept: "インターセプト",
            Interval: "間隔",
            "Intraday Momentum Index": "イントラデイ・モメンタム指数",
            "Intraday Mtm": "イントラデイ・モメンタム",
            Jaw: "アゴ",
            "Jaw Offset": "ワニのアゴオフセット",
            "Jaw Period": "ワニのアゴ",
            Kagi: "ケーギ",
            Keltner: "ケルトナー",
            "Keltner Bottom": "ケルトナー・ボトム",
            "Keltner Channel": "ケルトナー・チャネル",
            "Keltner Median": "ケルトナー中央値",
            "Keltner Top": "ケルトナー・トップ",
            Klinger: "クリンガー",
            "Klinger Volume Oscillator": "クリンガー取引高オシレーター",
            KlingerSignal: "クリンガーシグナル",
            KST: "KST",
            KSTSignal: "KSTSignal",
            "Lagging Span": "ラギングスパン",
            "Lagging Span Period": "ラギングスパン期間",
            "Leading Span A": "リーディングスパンA",
            "Leading Span B": "リーディングスパンB",
            "Leading Span B Period": "リーディングスパンB期間",
            "Level Offset": "オフセット水準",
            Levels: "水準",
            "Light Rate of Change Period": "変動期間の低レート",
            "Light SMA Period": "低SMA期間",
            "Lightest Rate of Change Period": "変動期間の最低レート",
            "Lightest SMA Period": "最低SMA期間",
            "Like all ChartIQ markers, the object itself is managed by the chart, so when you scroll the chart the object moves with you. It is also destroyed automatically for you when the symbol is changed.":
              "すべてのChartIQマーカー同様に、オブジェクト自体はチャートによって管理されるため、チャートをスクロールするとオブジェクトも一緒に動きます。シンボルを変更すると自動的に破棄されます。",
            "Limit Move Value": "限定移動値",
            "Lin Fcst": "線形予想",
            "Lin Incpt": "線形インターセプト",
            "Lin R2": "線形R2",
            Line: "線",
            "Line Break": "改行",
            "Line/Bar Chart": "ライン／バーチャート",
            "Linear Reg Forecast": "線形回帰予想",
            "Linear Reg Intercept": "線形回帰インターセプト",
            "Linear Reg R2": "線形回帰R2",
            "Linear Reg Slope": "線形回帰傾き",
            Lips: "唇",
            "Lips Offset": "ワニの唇オフセット",
            "Lips Period": "ワニの唇",
            Locale: "位置特定する",
            "Log Scale": "対数目盛",
            "Long Cycle": "長期サイクル",
            "Long RoC": "長期変化率",
            Loss: "損失",
            Low: "Low",
            "Low Period": "安値期間",
            "Lowest Low Value": "最安値",
            "LR Slope": "線形回帰傾き",
            M: "月",
            "M Flow": "マネーフロー",
            MA: "MA",
            ma: "移動平均線",
            "MA Env": "移動平均エンベロープ",
            "MA Env Bottom": "移動平均エンベロープ・ボトム",
            "MA Env Median": "移動平均エンベロープ中央値",
            "MA Env Top": "移動平均エンベロープ・トップ",
            "MA Period": "MA 期間",
            MACD: "MACD",
            "Market Data": "市場データ",
            "Market Facilitation Index": "市場簡素化指数",
            "Mass Idx": "マス指数",
            "Mass Index": "マス指数",
            "Maximum AF": "最大AF",
            mean: "意味する",
            Measure: "計測",
            "Med Price": "中央値価格",
            median: "中央値",
            "Median Price": "中央値価格",
            "Min Tick Value": "最小ティックバリュー",
            "Minimum AF": "最小AF",
            Momentum: "モメンタム",
            "Momentum Indicator": "モメンタムインジケーター",
            "Money Flow Index": "マネーフロー指数",
            More: "詳細",
            "More studies": "詳細な研究",
            Mountain: "マウンテン",
            "Mountain Charts": "マウンテンチャート",
            "Mountain Color": "山の色",
            "Moving Average": "移動平均",
            "Moving Average Deviation": "移動平均線偏差",
            "Moving Average Envelope": "移動平均エンベロープ",
            "Moving Average Type": "移動平均タイプ",
            ms: "ミリセカンド",
            Multiplier: "マルチプライヤー",
            Name: "名称",
            "Neg Vol": "マイナス取引高",
            "Negative Bar": "ネガティブバー",
            "Negative Volume Index": "ネガティブ取引高指数",
            Neutral: "中立",
            "New Custom Theme": "新規カスタムテーマ",
            "New Theme": "新しいテーマ",
            "New Theme Name": "新規テーマ名",
            "New Theme Name:": "新しいテーマ名：",
            Night: "夜",
            None: "なし",
            "None available": "何もなし",
            "Not enough data to compute": "計算するデータが足りません",
            Offset: "相殺",
            "On Bal Vol": "オンバランス取引高",
            "On Balance Volume": "オンバランス取引高",
            Open: "オープン",
            "Open shared chart in new window":
              "新しいウィンドウで共有チャートを開く",
            or: "もしくは",
            OverBought: "買い持ち",
            Overlay: "オーバーレイ",
            OverSold: "売り持ち",
            "P Rel": "価格指数",
            Palatino: "Palatino",
            "Parabolic SAR": "パラボリックSAR",
            Percent: "パーセント",
            percent: "パーセント",
            "Perf Idx": "パフォーマンス指数",
            "Performance Index": "パフォーマンス指数",
            Period: "期間",
            pips: "pip",
            Pitchfork: "ピッチフォーク",
            Pivot: "ピボット",
            "Pivot Points": "ピボットポイント",
            "Plot Type": "プロットタイプ",
            PMO: "PMO",
            PMOSignal: "PMOSignal",
            "Point & Figure": ",",
            Points: "ポイント",
            points: "ポイント",
            "Points Or Percent": "ポイントまたはパーセント",
            "Popular Studies": "人気のある研究",
            "Pos Vol": "POS取引高",
            "Positive Bar": "ポジティブバー",
            "Positive Volume Index": "ポジティブ取引高指数",
            "Press this button to generate a shareable image:":
              "このボタンを押して共有可能な画像を生成する：",
            "Pretty Good": "プリティ・グッド",
            "Pretty Good Oscillator": "プリティ・グッド・オシレーター",
            Price: "価格",
            "Price Minimum": "最低価格",
            "Price Momentum Oscillator": "プライス・モメンタム・オシレーター",
            "Price Osc": "価格オシレーター",
            "Price Oscillator": "プライス・オシレーター",
            "Price Rate of Change": "価格変化率",
            "Price Relative": "価格指数",
            "Price ROC": "価格ROC",
            "Price Vol": "価格取引高",
            "Price Volume Trend": "価格取引高トレンド",
            "Prime Bands Bottom": "プライム・バンド・ボトム",
            "Prime Bands Channel": "プライム・バンド・チャネル",
            "Prime Bands Top": "プライム・バンド・トップ",
            "Prime Number": "プライム・ナンバー",
            "Prime Number Bands": "プライム・ナンバー・バンド",
            "Prime Number Oscillator": "プライム・ナンバー・オシレーター",
            "Pring's Know Sure Thing": "プリングのKST",
            "Pring's Special K": "プリングの特殊K",
            "Psychological Line": "心理的ライン",
            QStick: "Qスティック",
            "Quadrant Lines": "四分円ライン",
            "Rainbow Moving Average": "虹色移動平均線",
            "Rainbow Oscillator": "レインボー・オシレーター",
            "Random Walk": "ランダムウォーク",
            "Random Walk High": "ランダムウォーク高値",
            "Random Walk Index": "ランダムウォーク指数",
            "Random Walk Low": "ランダムウォーク安値",
            "Range Bars": "レンジバー",
            "Range Selector": "レンジセレクター",
            "Rate Of Change": "変化率",
            RAVI: "RAVI",
            Ray: "線",
            Rectangle: "長方形",
            Redo: "やりなおす",
            "Regression Line": "回帰線",
            "Rel Vig": "相対活性",
            "Rel Vol": "相対取引高",
            "Relative Vigor Index": "相対活性指数",
            "Relative Volatility": "相対ボラティリティ",
            RelVigSignal: "相対活性シグナル",
            Renko: "蓮子",
            "Resistance 1": "抵抗線1",
            "Resistance 2": "抵抗線2",
            "Resistance 3": "抵抗線3",
            Result: "結果",
            Retracement: "リトレースメント",
            "right-click to delete": "削除するには、右クリック",
            "right-click to manage": "管理するために、右クリック",
            "Risk/Reward": "リスク/リワード",
            RSI: "RSI",
            RSquared: "決定係数",
            s: "秒",
            save: "保存",
            Save: "保存する",
            "Save Theme": "テーマの保存",
            "Save View": "ビューを保存する",
            "Saved View": "保存したビュー",
            "Saved Views": "保存したビュー",
            "Scale Factor": "目盛要素",
            Schaff: "シャフ",
            "Schaff Trend Cycle": "シャフ・トレンド・サイクル",
            Search: "検索する",
            Segment: "区切り",
            "Select Tool": "選択ツール",
            "Sell Stops": "売り逆指値",
            Series: "シリーズ",
            "Set Point & Figure Parameters": "ピボット設定&パラメータ計算",
            "Set Price Lines": "価格ラインを設定する",
            "Set Range": "設定範囲",
            "Set Reversal Percentage": "反転率を設定する",
            Settings: "設定",
            Shading: "シェーディング",
            Shape: "パターン",
            "Shape - Arrow": "形 - 矢印",
            "Shape - Check": "形 - チェック",
            "Shape - Cross": "形 - クロス",
            "Shape - Focus": "形 - フォーカス",
            "Shape - Heart": "形 - ハート",
            "Shape - Star": "形 - 星",
            Share: "共有",
            "Share This Chart": "このチャートを共有",
            "Share Your Chart": "チャートを共有する",
            Shift: "シフト",
            "Shift Percentage": "シフト割合",
            "Shift Type": "シフトタイプ",
            "Shinohara Intensity Ratio": "篠原強弱レシオ",
            "Short Cycle": "短期サイクル",
            "Short RoC": "短期変化率",
            "Show All": "全部表示",
            "Show Fractals": "ディスプレイフラクタル",
            "Show Zones": "ゾーンの表示",
            Signal: "シグナル",
            "Signal Period": "シグナル期間",
            "Signal Periods": "シグナル期間",
            Simple: "単純",
            "Simple Circle": "単純円",
            "Simple Square": "単純正方形",
            "Simulated data.": "模擬データ",
            Slope: "傾き",
            Slow: "遅い",
            "Slow MA Period": "遅いMA期間",
            SMA1: "SMA1",
            SMA10: "SMA10",
            SMA2: "SMA2",
            SMA3: "SMA3",
            SMA4: "SMA4",
            SMA5: "SMA5",
            SMA6: "SMA6",
            SMA7: "SMA7",
            SMA8: "SMA8",
            SMA9: "SMA9",
            Smooth: "スムーズ",
            "Smoothing Period": "スムージング期間",
            "Speed Resistance Arc": "スピードレジスタンスアーク",
            "Speed Resistance Line": "スピードレジスタンスライン",
            SPY: "SPY",
            Squarewave: "方形",
            squarewave: "方形波",
            Squat: "スクワット",
            standard: "標準",
            "Standard Deviation": "標準偏差",
            "Standard Deviations": "標準偏差",
            Star: "スター",
            "STARC Bands": "STARC バンド",
            "STARC Bands Bottom": "STARC バンド下限",
            "STARC Bands Median": "STARC バンド中値",
            "STARC Bands Top": "STARC バンド上限",
            "Stch Mtm": "ストキャスティック・モメンタム",
            "STD Dev": "標準偏差",
            "STD Period": "STD期間",
            "Stochastic Momentum Index": "ストキャスティック・モメンタム指数",
            Stochastics: "ストキャスティクス",
            STOCKS: "株式",
            "Stop Levels": "ストップ水準",
            "Stop Loss": "ストップロス",
            Stops: "ストップ",
            "Strong Ratio": "強い比率",
            Studies: "スタディ",
            Study: "スタディー",
            Supertrend: "スーパートレンド",
            "Support 1": "支持線1",
            "Support 2": "支持線2",
            "Support 3": "支持線3",
            Swing: "スイング",
            "Swing Index": "スイング指数",
            Symbol: "シンボル",
            T: "ティック",
            "Take Profit": "テイクプロフィット",
            Teeth: "歯",
            "Teeth Offset": "ワニの歯オフセット",
            "Teeth Period": "ワニの歯",
            Themes: "テーマ",
            "This is a callout marker": "こちらはコールアウトマーカーです",
            "This is an example of a complex marker which can contain html, video, images, css, and animations.":
              "こちらはhtmlやビデオ、画像、css、アニメーションを含めることが可能な複雑マーカーです。",
            TII: "TII",
            "Time Cycle": "時間サイクル",
            "Time Fcst": "時間予想",
            "Time Series": "一連の時間",
            "Time Series Forecast": "時系列予想",
            "Time Zone": "時間帯",
            "Times New Roman": "Times New Roman",
            Timezone: "タイムゾーン",
            "Tirone Levels": "タイロンレベル",
            "To set your timezone use the location button below or scroll through the following list":
              "タイムゾーンを設定するには、以下のロケーションボタンを使用するか、以下のリストをスクロールしてください",
            "To set your timezone use the location button below, or scroll through the following list...":
              "タイムゾーンを設定するには、以下のロケーションボタンを使用するか、以下のリストをスクロールしてください…",
            "Tolerance Percentage": "許容率",
            "Trade Vol": "取引高",
            "Trade Volume Index": "取引高指数",
            "Trend Intensity Index": "トレンドの強弱指数",
            Triangular: "三角形",
            "Triple Exponential": "三重指数",
            TRIX: "TRIX",
            "True Range": "トゥルー・レンジ",
            Twiggs: "ツウィッグス",
            "Twiggs Money Flow": "ツウィッグス・マネーフロー",
            Type: "種類",
            "Typical Price": "標準価格",
            "Ulcer Index": "アルサー・インデックス",
            Ultimate: "アルティメット",
            "Ultimate Oscillator": "アルティメット・オシレーター",
            Underlay: "アンダーレイ",
            Undo: "取り消す",
            Units: "単位",
            "Unrealized Gain/Loss": "未実現利益/損失",
            "Up Volume": "アップ取引高",
            "Uploading Image": "画像アップロード中",
            Uptrend: "上昇トレンド",
            "Use My Current Location": "現在のロケーションを使用する",
            "Use the following link to share your chart:":
              "次のリンクを使ってチャートを共有してください",
            "Use Volume": "ボリュームを利用し",
            "Valuation Lines": "評価ライン",
            Variable: "変数",
            Vchart: "Vチャート",
            vdma: "vdma",
            Vertical: "縦",
            "Vertical Horizontal Filter": "垂直水平フィルター",
            VIDYA: "VIDYA",
            Views: "ビュー",
            Vol: "ボリューム",
            "Vol Osc": "取引高オシレーター",
            "vol profile": "取引高プロフィール",
            "Vol ROC": "取引高ROC",
            "vol undr": "取引高アンダー",
            Volume: "取引高",
            "Volume % of Avg": "平均出来高（%）",
            "Volume Candle": "出来高ローソク足",
            "Volume Chart": "出来高チャート",
            "Volume Not Available": "ボリュームは利用できません",
            "Volume Oscillator": "取引高オシレーター",
            "Volume Profile": "取引高プロフィール",
            "Volume Rate of Change": "取引高変化率",
            "Volume Spike": "出来高スパイク",
            "Volume Underlay": "取引高アンダーレイ",
            "Vortex Indicator": "渦巻きインジケーター",
            "VT HZ Filter": "垂直水平フィルター",
            VWAP: "VWAP",
            W: "週",
            "W Acc Dist": "W集積分布",
            "Weak Ratio": "弱い比率",
            weekly: "ウィークリー",
            Weighted: "加重",
            "Weighted Close": "加重終値",
            "Welles Wilder": "Welles Wilder",
            White: "白",
            "Williams %R": "ウィリアムズ %R",
            "Your timezone is your current location":
              "お客様のタイムゾーンとは、お客様の現在の場所です",
            YTD: "年度初めから今日まで",
            ZigZag: "ZigZag",
            "3 Min": ",",
            "3m": ",",
          },
          kr: {
            "-DI": "-DI",
            "-VI": "-VI",
            "(Scroll for more options)": "(Scroll for more options)",
            "(UTC-01:00) Azores": "(UTC-01:00) Azores",
            "(UTC-01:00) Cape Verde Islands": "(UTC-01:00) Cape Verde Islands",
            "(UTC-02:00) Mid-Atlantic": "(UTC-02:00) Mid-Atlantic",
            "(UTC-03:00) Buenos Aires": "(UTC-03:00) Buenos Aires",
            "(UTC-03:00) Montevideo": "(UTC-03:00) Montevideo",
            "(UTC-03:00) Punta Arenas": "(UTC-03:00) Punta Arenas",
            "(UTC-03:00) Sao Paulo": "(UTC-03:00) Sao Paulo",
            "(UTC-03:30) Newfoundland and Labrador":
              "(UTC-03:30) Newfoundland and Labrador",
            "(UTC-04:00) Asuncion": "(UTC-04:00) Asuncion",
            "(UTC-04:00) Atlantic Time (Canada)":
              "(UTC-04:00) Atlantic Time (Canada)",
            "(UTC-04:00) Caracas": "(UTC-04:00) Caracas",
            "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":
              "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
            "(UTC-04:00) Santiago": "(UTC-04:00) Santiago",
            "(UTC-05:00) Bogota, Lima, Quito, Rio Branco":
              "(UTC-05:00) Bogota, Lima, Quito, Rio Branco",
            "(UTC-05:00) Eastern Time (US and Canada)":
              "(UTC-05:00) Eastern Time (US and Canada)",
            "(UTC-05:00) Indiana (East)": "(UTC-05:00) Indiana (East)",
            "(UTC-06:00) Central America": "(UTC-06:00) Central America",
            "(UTC-06:00) Central Time (US and Canada)":
              "(UTC-06:00) Central Time (US and Canada)",
            "(UTC-06:00) Guadalajara, Mexico City, Monterrey":
              "(UTC-06:00) Guadalajara, Mexico City, Monterrey",
            "(UTC-06:00) Saskatchewan": "(UTC-06:00) Saskatchewan",
            "(UTC-07:00) Arizona": "(UTC-07:00) Arizona",
            "(UTC-07:00) Chihuahua, Mazatlan":
              "(UTC-07:00) Chihuahua, Mazatlan",
            "(UTC-07:00) Mountain Time (US and Canada)":
              "(UTC-07:00) Mountain Time (US and Canada)",
            "(UTC-08:00) Pacific Time (US and Canada)":
              "(UTC-08:00) Pacific Time (US and Canada)",
            "(UTC-08:00) Tijuana": "(UTC-08:00) Tijuana",
            "(UTC-09:00) Alaska": "(UTC-09:00) Alaska",
            "(UTC-10:00) Hawaii": "(UTC-10:00) Hawaii",
            "(UTC) Casablanca": "(UTC) Casablanca",
            "(UTC) Greenwich Mean Time, Reykjavik":
              "(UTC) Greenwich Mean Time, Reykjavik",
            "(UTC+01:00) Algiers, Tunis": "(UTC+01:00) Algiers, Tunis",
            "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":
              "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
            "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":
              "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
            "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":
              "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris",
            "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":
              "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
            "(UTC+02:00) Athens, Bucharest": "(UTC+02:00) Athens, Bucharest",
            "(UTC+02:00) Cairo": "(UTC+02:00) Cairo",
            "(UTC+02:00) Cyprus": "(UTC+02:00) Cyprus",
            "(UTC+02:00) Harare, Johannesburg":
              "(UTC+02:00) Harare, Johannesburg",
            "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":
              "(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius",
            "(UTC+02:00) Jerusalem": "(UTC+02:00) Jerusalem",
            "(UTC+02:00) Kaliningrad": "(UTC+02:00) Kaliningrad",
            "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":
              "(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh",
            "(UTC+03:00) Istanbul": "(UTC+03:00) Istanbul",
            "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":
              "(UTC+03:00) Minsk, Moscow, Kirov, Volgograd",
            "(UTC+03:00) Nairobi": "(UTC+03:00) Nairobi",
            "(UTC+03:00) Simferopol": "(UTC+03:00) Simferopol",
            "(UTC+03:30) Tehran": "(UTC+03:30) Tehran",
            "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":
              "(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk",
            "(UTC+04:00) Baku": "(UTC+04:00) Baku",
            "(UTC+04:00) Dubai, Muscat": "(UTC+04:00) Dubai, Muscat",
            "(UTC+04:30) Kabul": "(UTC+04:30) Kabul",
            "(UTC+05:00) Karachi, Tashkent": "(UTC+05:00) Karachi, Tashkent",
            "(UTC+05:00) Yekaterinburg": "(UTC+05:00) Yekaterinburg",
            "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":
              "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi",
            "(UTC+05:45) Kathmandu": "(UTC+05:45) Kathmandu",
            "(UTC+06:00) Almaty": "(UTC+06:00) Almaty",
            "(UTC+06:00) Astana, Dhaka": "(UTC+06:00) Astana, Dhaka",
            "(UTC+06:00) Omsk": "(UTC+06:00) Omsk",
            "(UTC+06:30) Yangon": "(UTC+06:30) Yangon",
            "(UTC+07:00) Bangkok, Jakarta, Vietnam":
              "(UTC+07:00) Bangkok, Jakarta, Vietnam",
            "(UTC+07:00) Barnaul, Novosibirsk, Tomsk":
              "(UTC+07:00) Barnaul, Novosibirsk, Tomsk",
            "(UTC+07:00) Hovd": "(UTC+07:00) Hovd",
            "(UTC+07:00) Krasnoyarsk": "(UTC+07:00) Krasnoyarsk",
            "(UTC+07:00) Novokuznetsk": "(UTC+07:00) Novokuznetsk",
            "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":
              "(UTC+08:00) Beijing, Chongqing, Hong Kong SAR",
            "(UTC+08:00) Brunei, Kuala Lumpur, Singapore":
              "(UTC+08:00) Brunei, Kuala Lumpur, Singapore",
            "(UTC+08:00) Choibalsan, Ulaanbaatar":
              "(UTC+08:00) Choibalsan, Ulaanbaatar",
            "(UTC+08:00) Irkutsk": "(UTC+08:00) Irkutsk",
            "(UTC+08:00) Manila, Taipei": "(UTC+08:00) Manila, Taipei",
            "(UTC+08:00) Perth": "(UTC+08:00) Perth",
            "(UTC+08:45) Eucla": "(UTC+08:45) Eucla",
            "(UTC+09:00) Chita, Khandyga, Yakutsk":
              "(UTC+09:00) Chita, Khandyga, Yakutsk",
            "(UTC+09:00) Osaka, Sapporo, Tokyo":
              "(UTC+09:00) Osaka, Sapporo, Tokyo",
            "(UTC+09:00) Seoul": "(UTC+09:00) Seoul",
            "(UTC+09:30) Adelaide": "(UTC+09:30) Adelaide",
            "(UTC+09:30) Darwin": "(UTC+09:30) Darwin",
            "(UTC+10:00) Brisbane": "(UTC+10:00) Brisbane",
            "(UTC+10:00) Canberra, Melbourne, Sydney":
              "(UTC+10:00) Canberra, Melbourne, Sydney",
            "(UTC+10:00) Guam, Port Moresby": "(UTC+10:00) Guam, Port Moresby",
            "(UTC+10:00) Ust-Nera, Vladivostok":
              "(UTC+10:00) Ust-Nera, Vladivostok",
            "(UTC+11:00) Magadan": "(UTC+11:00) Magadan",
            "(UTC+11:00) Noumea, Solomon Islands":
              "(UTC+11:00) Noumea, Solomon Islands",
            "(UTC+11:00) Sakhalin, Srednekolymsk":
              "(UTC+11:00) Sakhalin, Srednekolymsk",
            "(UTC+12:00) Anadyr, Kamchatka": "(UTC+12:00) Anadyr, Kamchatka",
            "(UTC+12:00) Auckland, Wellington":
              "(UTC+12:00) Auckland, Wellington",
            "(UTC+12:45) Chatham": "(UTC+12:45) Chatham",
            "(UTC+13:00) Samoa": "(UTC+13:00) Samoa",
            "(UTC+13:00) Tonga": "(UTC+13:00) Tonga",
            "(UTC+14:00) Kiritimati": "(UTC+14:00) Kiritimati",
            "%b": "%b",
            "%D": "%D",
            "%D Moving Average Type": "%D Moving Average Type",
            "%D Periods": "%D Periods",
            "%K": "%K",
            "%K Double Smoothing Periods": "%K Double Smoothing Periods",
            "%K Periods": "%K Periods",
            "%K Smoothing Periods": "%K Smoothing Periods",
            "+DI": "+DI",
            "+VI": "+VI",
            "1 D": "일",
            "1 Hour": "1시간",
            "1 Min": "1분",
            "1 Mo": "월",
            "1 W": "주",
            "10 Min": "10분",
            "10m": "10분",
            "15 Min": "15분",
            "15m": "15분",
            "1D": "일",
            "1H": "1시간",
            "1m": "1분",
            "1M": "월",
            "1W": "주",
            "1Y": "년",
            "30 Min": "30분",
            "30m": "30분",
            "3M": "3개월",
            "4 Hour": "4시간",
            "4H": "4시간",
            "5 Min": "5분",
            "5D": "5일",
            "5m": "5분",
            "5Y": "5년",
            "6M": "6개월",
            Abstract: "Abstract",
            "Acc Swing": "Acc Swing",
            "Accumulation/Distribution": "Accumulation/Distribution",
            "Accumulative Swing Index": "ASI",
            Add: "Add",
            ADD: "Add",
            "Add Stop Loss": "Add Stop Loss",
            "Add Take Profit": "Add Take Profit",
            ADX: "ADX",
            "ADX/DMS": "ADX/DMS",
            ALL: "ALL",
            "All-Time High Lookback Period": "All-Time High Lookback Period",
            Alligator: "Alligator",
            Annotation: "텍스트",
            Arc: "Arc",
            Aroon: "Aroon",
            "Aroon Down": "Aroon Down",
            "Aroon Osc": "Aroon Osc",
            "Aroon Oscillator": "Aroon OSC",
            "Aroon Up": "Aroon Up",
            Arrow: "화살표",
            "ATH Lookback Period": "ATH Lookback Period",
            ATR: "ATR",
            "ATR Bands": "ATR Bands",
            "ATR Bands Bottom": "ATR Bands Bottom",
            "ATR Bands Channel": "ATR Bands Channel",
            "ATR Bands Top": "ATR Bands Top",
            "ATR Trailing Stop": "ATR Trailing Stop",
            "ATR Trailing Stops": "ATR Trailing Stops",
            "Auto Select": "Auto Select",
            "Average True Range": "ATR",
            Awesome: "Awesome",
            "Awesome Oscillator": "Awesome OSC",
            "Axis Label": "Axis Label",
            "Axis Label:": "Axis Label:",
            "Axis Text": "Axis Text",
            B: "B",
            Background: "Background",
            "Background Color": "Background Color",
            Bandwidth: "Bandwidth",
            Bar: "바",
            Bars: "Bars",
            "Bars Color": "Bars Color",
            "Base Line": "Base Line",
            "Base Line Period": "Base Line Period",
            Baseline: "Baseline",
            "Baseline Delta": "Baseline Delta",
            "BATS BZX real-time.": "BATS BZX real-time.",
            Bearish: "Bearish",
            Black: "Black",
            "Boll %b": "Boll %b",
            "Boll BW": "Boll BW",
            "Bollinger %b": "Bollinger %b",
            "Bollinger Bands": "볼린저 밴드",
            "Bollinger Bands Bottom": "Bollinger Bands Bottom",
            "Bollinger Bands Median": "Bollinger Bands Median",
            "Bollinger Bands Top": "Bollinger Bands Top",
            "Bollinger Bandwidth": "볼린저 Bandwidth",
            Border: "Border",
            "Bulge Threshold": "Bulge Threshold",
            Bullish: "Bullish",
            "Buy Stops": "Buy Stops",
            "by Xignite.": "by Xignite.",
            Callout: "말풍선",
            Callouts: "Callouts",
            cancel: "cancel",
            Candle: "캔들",
            "Candle Border": "Candle Border",
            "Candle Borders": "Candle Borders",
            "Candle Color": "Candle Color",
            "Candle Wick": "Candle Wick",
            Candles: "Candles",
            "Center Of Gravity": "COG",
            "Chaikin MF": "Chaikin MF",
            "Chaikin Money Flow": "Chaikin Money Flow",
            "Chaikin Vol": "Chaikin Vol",
            "Chaikin Volatility": "Chaikin Volatility",
            "Chande Fcst": "Chande Fcst",
            "Chande Forecast Oscillator": "Chande Forecast Oscillator",
            "Chande Momentum Oscillator": "Chande Momentum Oscillator",
            "Chande Mtm": "Chande Mtm",
            "Change Timezone": "Change Timezone",
            Channel: "채널",
            "Channel Fill": "Channel Fill",
            Chart: "차트",
            "Chart Preferences": "Chart Preferences",
            "Chart Scale": "Chart Scale",
            "Chart Shared Successfully!": "Chart Shared Successfully!",
            "Chart Style": "Chart Style",
            "Chart Type": "Chart Type",
            Check: "체크 표시",
            "Choose Timezone": "Choose Timezone",
            "Choppiness Index": "Choppiness Index",
            Clear: "Clear",
            "Clear All": "Clear All",
            "Clear Drawings": "Clear Drawings",
            Close: "종가",
            close: "종가",
            Color: "Color",
            "Colored Bar": "Colored Bar",
            "Colored Line": "Colored Line",
            COMMODITIES: "COMMODITIES",
            "Commodity Channel Index": "CCI",
            Compare: "Compare",
            "Comparison Symbol": "Comparison Symbol",
            Composite: "Composite",
            "Composite RSI": "Composite RSI",
            Continuous: "연속선",
            "Conversion Line": "Conversion Line",
            "Conversion Line Period": "Conversion Line Period",
            Coppock: "Coppock",
            "Coppock Curve": "Coppock Curve",
            Correl: "Correl",
            Correlation: "Correlation",
            Courier: "Courier",
            Create: "Create",
            "Create a New Custom Theme": "Create a New Custom Theme",
            "Create Custom Theme": "Create Custom Theme",
            "Create Image": "Create Image",
            Cross: "Cross",
            Crosshair: "Crosshair",
            Crosshairs: "Crosshairs",
            Crossline: "십자선",
            CURRENCIES: "CURRENCIES",
            "Current Studies": "Current Studies",
            "Current Symbols": "Current Symbols",
            "Current TimeZone is": "Current TimeZone is",
            "Custom Themes": "Custom Themes",
            "Cycle 1": "Cycle 1",
            "Cycle 2": "Cycle 2",
            "Cycle 3": "Cycle 3",
            D: "D",
            Darvas: "Darvas",
            "Darvas Box": "Darvas Box",
            "Data delayed 15 min.": "Data delayed 15 min.",
            "Data is randomized.": "Data is randomized.",
            "Data is real-time.": "Data is real-time.",
            "Date Dividers": "Date Dividers",
            "Date/Time:": "Date/Time:",
            Day: "Day",
            "Days Per Year": "Days Per Year",
            "Decreasing Bar": "Decreasing Bar",
            Default: "기본",
            "Default Themes": "Default Themes",
            Delete: "Delete",
            "Delete Study": "Delete Study",
            "Demo data.": "Demo data.",
            Detrended: "Detrended",
            "Detrended Price Oscillator": "DPO",
            Directional: "Directional",
            "Disparity Index": "이격도",
            Display: "Display",
            "Distance(%)": "Distance(%)",
            Divergence: "Divergence",
            "Don't see your study below? Type in your search here.":
              "Don't see your study below? Type in your search here.",
            "Donchian Channel": "Donchian Channel",
            "Donchian High": "Donchian High",
            "Donchian Low": "Donchian Low",
            "Donchian Median": "Donchian Median",
            "Donchian Width": "Donchian Width",
            Done: "Done",
            Doodle: "Doodle",
            "Double Smoothing Period": "Double Smoothing Period",
            "Down Volume": "Down Volume",
            Downtrend: "Downtrend",
            Draw: "그리기",
            "Ease of Movement": "EOM",
            Edit: "Edit",
            "Edit Settings...": "Edit Settings...",
            EF: "EF",
            "EF Trigger": "EF Trigger",
            "Ehler Fisher": "Ehler Fisher",
            "Ehler Fisher Transform": "Ehler Fisher Transform",
            "Elder Bear Power": "Elder Bear Power",
            "Elder Bull Power": "Elder Bull Power",
            "Elder Force": "Elder Force",
            "Elder Force Index": "Elder Force Index",
            "Elder Impulse System": "Elder Impulse System",
            "Elder Ray Index": "Elder Ray Index",
            Ellipse: "타원",
            "End of day data.": "End of day data.",
            "Enter name of view:": "Enter name of view:",
            'Enter reversal and hit "Enter"': "Enter reversal and hit “Enter”",
            "Enter Symbol": "Enter Symbol",
            Events: "Events",
            "Exit Field": "Exit Field",
            "Extended Hours": "Extended Hours",
            Fade: "Fade",
            Fake: "Fake",
            Fan: "Fan",
            Fast: "Fast",
            "Fast MA Period": "Fast MA Period",
            "Fib Arc": "피보나치아크",
            "Fib Fan": "피보나치팬라인",
            "Fib Time Zone": "피보나치시간대",
            Fibonacci: "피보나치",
            fibonacci: "피보나치",
            Field: "Field",
            field: "Field",
            Fill: "Fill",
            "Focus Arrow": "Focus Arrow",
            Forecast: "Forecast",
            FOREX: "FOREX",
            "Formula courtesy": "Formula courtesy",
            "Fractal Channel": "Fractal Channel",
            "Fractal Chaos": "Fractal Chaos",
            "Fractal Chaos Bands": "Fractal Chaos Bands",
            "Fractal Chaos Oscillator": "Fractal Chaos Oscillator",
            "Fractal High": "Fractal High",
            "Fractal Low": "Fractal Low",
            FUNDS: "FUNDS",
            FUTURES: "FUTURES",
            FX: "FX",
            Gain: "Gain",
            "Gann Fan": "Gann Fan",
            Garamond: "Garamond",
            Gartley: "가틀리 패턴",
            Gator: "Gator",
            "Gator Oscillator": "Gator Oscillator",
            Ghost: "Ghost",
            "Ghost Boxes": "Ghost Boxes",
            Gopala: "Gopala",
            "Gopalakrishnan Range Index": "Gopalakrishnan Range Index",
            Gradient: "Gradient",
            Green: "Green",
            "Grid Lines": "Grid Lines",
            H: "H",
            Heart: "하트 모양",
            "Heaviest Rate of Change Period": "Heaviest Rate of Change Period",
            "Heaviest SMA Period": "Heaviest SMA Period",
            "Heavy Rate of Change Period": "Heavy Rate of Change Period",
            "Heavy SMA Period": "Heavy SMA Period",
            "Heikin Ashi": "Heikin Ashi",
            "Heikin-Ashi": "Heikin-Ashi",
            Helvetica: "Helvetica",
            "HHV/LLV Lookback": "HHV/LLV Lookback",
            High: "고가",
            "High Low": "High Low",
            "High Low Bands": "HLB",
            "High Low Bottom": "High Low Bottom",
            "High Low Median": "High Low Median",
            "High Low Top": "High Low Top",
            "High Minus Low": "High Minus Low",
            "High Period": "High Period",
            "High-Low": "High-Low",
            "Highest High Value": "Highest High Value",
            HighLow: "HighLow",
            "Hist Vol": "Hist Vol",
            Histogram: "Histogram",
            "Historical Volatility": "Historical Volatility",
            "Hollow Candle": "투명캔들",
            Horizontal: "수평선",
            I: "I",
            "Ichimoku Clouds": "일목균형표",
            "Increasing Bar": "Increasing Bar",
            Index: "Index",
            INDEXES: "INDEXES",
            INDICES: "INDICES",
            Info: "Info",
            Intercept: "Intercept",
            Interval: "Interval",
            "Intraday Momentum Index": "IMI",
            "Intraday Mtm": "Intraday Mtm",
            Jaw: "Jaw",
            "Jaw Offset": "Jaw Offset",
            "Jaw Period": "Jaw Period",
            Kagi: "Kagi",
            Keltner: "Keltner",
            "Keltner Bottom": "Keltner Bottom",
            "Keltner Channel": "Keltner Channel",
            "Keltner Median": "Keltner Median",
            "Keltner Top": "Keltner Top",
            Klinger: "Klinger",
            "Klinger Volume Oscillator": "Klinger Volume Oscillator",
            KlingerSignal: "KlingerSignal",
            KST: "KST",
            KSTSignal: "KSTSignal",
            "Lagging Span": "Lagging Span",
            "Lagging Span Period": "Lagging Span Period",
            "Leading Span A": "Leading Span A",
            "Leading Span B": "Leading Span B",
            "Leading Span B Period": "Leading Span B Period",
            "Level Offset": "Level Offset",
            Levels: "Levels",
            "Light Rate of Change Period": "Light Rate of Change Period",
            "Light SMA Period": "Light SMA Period",
            "Lightest Rate of Change Period": "Lightest Rate of Change Period",
            "Lightest SMA Period": "Lightest SMA Period",
            "Limit Move Value": "Limit Move Value",
            "Lin Fcst": "Lin Fcst",
            "Lin Incpt": "Lin Incpt",
            "Lin R2": "Lin R2",
            Line: "선",
            "Line Break": "삼선전환도",
            "Line/Bar Chart": "Line/Bar Chart",
            "Linear Reg Forecast": "Linear Reg Forecast",
            "Linear Reg Intercept": "Linear Reg Intercept",
            "Linear Reg R2": "Linear Reg R2",
            "Linear Reg Slope": "LRS",
            Lips: "Lips",
            "Lips Offset": "Lips Offset",
            "Lips Period": "Lips Period",
            "Log Scale": "Log Scale",
            "Long Cycle": "Long Cycle",
            "Long RoC": "Long RoC",
            Loss: "Loss",
            Low: "저가",
            "Low Period": "Low Period",
            "Lowest Low Value": "Lowest Low Value",
            "LR Slope": "LR Slope",
            M: "M",
            "M Flow": "M Flow",
            MA: "MA",
            ma: "MA",
            "MA Env": "MA Env",
            "MA Env Bottom": "MA Env Bottom",
            "MA Env Median": "MA Env Median",
            "MA Env Top": "MA Env Top",
            "MA Period": "MA Period",
            MACD: "MACD",
            "Market Data": "Market Data",
            "Market Facilitation Index": "Market Facilitation Index",
            "Mass Idx": "Mass Idx",
            "Mass Index": "Mass Index",
            "Maximum AF": "Maximum AF",
            Measure: "Measure",
            "Med Price": "Med Price",
            "Median Price": "Median Price",
            "Min Tick Value": "Min Tick Value",
            "Minimum AF": "Minimum AF",
            Momentum: "Momentum",
            "Momentum Indicator": "모멘텀",
            "Money Flow Index": "MFI",
            More: "More",
            "More studies": "More studies",
            Mountain: "Mountain",
            "Mountain Charts": "Mountain Charts",
            "Mountain Color": "Mountain Color",
            "Moving Average": "이동평균선",
            "Moving Average Envelope": "Moving Average Envelope",
            "Moving Average Type": "Moving Average Type",
            ms: "ms",
            Multiplier: "Multiplier",
            Name: "Name",
            "Neg Vol": "Neg Vol",
            "Negative Bar": "Negative Bar",
            "Negative Volume Index": "NVI",
            Neutral: "Neutral",
            "New Custom Theme": "New Custom Theme",
            "New Theme": "New Theme",
            "New Theme Name": "New Theme Name",
            "New Theme Name:": "New Theme Name:",
            Night: "Night",
            None: "None",
            "None available": "None available",
            Offset: "Offset",
            "On Bal Vol": "On Bal Vol",
            "On Balance Volume": "OBV",
            Open: "시가",
            "Open shared chart in new window":
              "Open shared chart in new window",
            or: "or",
            OverBought: "OverBought",
            Overlay: "Overlay",
            OverSold: "OverSold",
            "P Rel": "P Rel",
            Palatino: "Palatino",
            "Parabolic SAR": "Parabolic SAR",
            "Perf Idx": "Perf Idx",
            "Performance Index": "Performance Index",
            Period: "기간",
            pips: "pips",
            Pitchfork: "앤드류피치포크",
            Pivot: "Pivot",
            "Pivot Points": "Pivot Points",
            "Plot Type": "Plot Type",
            PMO: "PMO",
            PMOSignal: "PMOSignal",
            "Point & Figure": "P&F",
            "Points Or Percent": "Points Or Percent",
            "Popular Studies": "Popular Studies",
            "Pos Vol": "Pos Vol",
            "Positive Bar": "Positive Bar",
            "Positive Volume Index": "PVI",
            "Press this button to generate a shareable image:":
              "Press this button to generate a shareable image:",
            "Pretty Good": "Pretty Good",
            "Pretty Good Oscillator": "Pretty Good Oscillator",
            Price: "Price",
            "Price Minimum": "Price Minimum",
            "Price Momentum Oscillator": "Price Momentum Oscillator",
            "Price Osc": "Price Osc",
            "Price Oscillator": "Price OSC",
            "Price Rate of Change": "Price ROC",
            "Price Relative": "Price Relative",
            "Price ROC": "Price ROC",
            "Price Vol": "Price Vol",
            "Price Volume Trend": "PVT",
            "Prime Bands Bottom": "Prime Bands Bottom",
            "Prime Bands Channel": "Prime Bands Channel",
            "Prime Bands Top": "Prime Bands Top",
            "Prime Number": "Prime Number",
            "Prime Number Bands": "Prime Number Bands",
            "Prime Number Oscillator": "Prime Number Oscillator",
            "Pring's Know Sure Thing": "Pring's Know Sure Thing",
            "Pring's Special K": "Pring's Special K",
            "Psychological Line": "심리도",
            QStick: "QStick",
            "Quadrant Lines": "사등분선",
            "Rainbow Moving Average": "Rainbow Moving Average",
            "Rainbow Oscillator": "Rainbow Oscillator",
            "Random Walk": "Random Walk",
            "Random Walk High": "Random Walk High",
            "Random Walk Index": "Random Walk Index",
            "Random Walk Low": "Random Walk Low",
            "Range Bars": "Range Bars",
            "Rate Of Change": "Rate Of Change",
            Ray: "Ray",
            Rectangle: "사각형",
            Redo: "재실행",
            "Regression Line": "회귀선",
            "Rel Vig": "Rel Vig",
            "Rel Vol": "Rel Vol",
            "Relative Vigor Index": "Relative Vigor Index",
            "Relative Volatility": "Relative Volatility",
            RelVigSignal: "RelVigSignal",
            Renko: "Renko",
            "Resistance 1": "Resistance 1",
            "Resistance 2": "Resistance 2",
            "Resistance 3": "Resistance 3",
            Result: "Result",
            Retracement: "Retracement",
            "right-click to delete": "right-click to delete",
            "right-click to manage": "right-click to manage",
            "Risk/Reward": "Risk/Reward",
            RSI: "RSI",
            RSquared: "RSquared",
            s: "s",
            save: "save",
            Save: "save",
            "Save Theme": "Save Theme",
            "Save View": "Save View",
            "Saved Views": "Saved Views",
            "Scale Factor": "Scale Factor",
            Schaff: "Schaff",
            "Schaff Trend Cycle": "Schaff Trend Cycle",
            Segment: "Segment",
            "Select Tool": "도구",
            "Sell Stops": "Sell Stops",
            Series: "Series",
            "Set Point & Figure Parameters": "Set Point & Figure Parameters",
            "Set Price Lines": "Set Price Lines",
            "Set Range": "Set Range",
            "Set Reversal Percentage": "Set Reversal Percentage",
            Shading: "Shading",
            Shape: "Shape",
            "Shape - Arrow": "Shape - Arrow",
            "Shape - Check": "Shape - Check",
            "Shape - Cross": "Shape - Cross",
            "Shape - Focus": "Shape - Focus",
            "Shape - Heart": "Shape - Heart",
            "Shape - Star": "Shape - Star",
            Share: "Share",
            "Share This Chart": "Share This Chart",
            "Share Your Chart": "Share Your Chart",
            Shift: "Shift",
            "Shift Percentage": "Shift Percentage",
            "Shift Type": "Shift Type",
            "Short Cycle": "Short Cycle",
            "Short RoC": "Short RoC",
            "Show All": "Show All",
            "Show Fractals": "Show Fractals",
            "Show Zones": "Show Zones",
            Signal: "Signal",
            "Signal Period": "Signal Period",
            "Signal Periods": "Signal Periods",
            "Simple Circle": "Simple Circle",
            "Simple Square": "Simple Square",
            Slope: "Slope",
            Slow: "Slow",
            "Slow MA Period": "Slow MA Period",
            SMA1: "SMA1",
            SMA10: "SMA10",
            SMA2: "SMA2",
            SMA3: "SMA3",
            SMA4: "SMA4",
            SMA5: "SMA5",
            SMA6: "SMA6",
            SMA7: "SMA7",
            SMA8: "SMA8",
            SMA9: "SMA9",
            Smooth: "Smooth",
            "Smoothing Period": "Smoothing Period",
            "Speed Resistance Arc": "Speed Resistance Arc",
            "Speed Resistance Line": "Speed Resistance Line",
            Squarewave: "Squarewave",
            squarewave: "Squarewave",
            Squat: "Squat",
            "Standard Deviation": "표준편차",
            "Standard Deviations": "Standard Deviations",
            Star: "별 모양",
            "STARC Bands": "STARC Bands",
            "STARC Bands Bottom": "STARC Bands Bottom",
            "STARC Bands Median": "STARC Bands Median",
            "STARC Bands Top": "STARC Bands Top",
            "Stch Mtm": "Stch Mtm",
            "STD Dev": "STD Dev",
            "STD Period": "STD Period",
            "Stochastic Momentum Index": "스토캐스틱 모멘텀",
            Stochastics: "스토캐스틱",
            STOCKS: "STOCKS",
            "Stop Levels": "Stop Levels",
            "Stop Loss": "Stop Loss",
            Stops: "Stops",
            "Strong Ratio": "Strong Ratio",
            Studies: "지표",
            Study: "Study",
            Supertrend: "Supertrend",
            "Support 1": "Support 1",
            "Support 2": "Support 2",
            "Support 3": "Support 3",
            Swing: "Swing",
            "Swing Index": "Swing Index",
            Symbol: "Symbol",
            T: "T",
            "Take Profit": "Take Profit",
            Teeth: "Teeth",
            "Teeth Offset": "Teeth Offset",
            "Teeth Period": "Teeth Period",
            Themes: "Themes",
            TII: "TII",
            "Time Cycle": "사이클구간",
            "Time Fcst": "Time Fcst",
            "Time Series Forecast": "TSF",
            "Time Zone": "Time Zone",
            "Times New Roman": "Times New Roman",
            Timezone: "Timezone",
            "Tirone Levels": "삼등분선",
            "To set your timezone use the location button below or scroll through the following list":
              "To set your timezone use the location button below or scroll through the following list",
            "To set your timezone use the location button below, or scroll through the following list...":
              "To set your timezone use the location button below, or scroll through the following list...",
            "Tolerance Percentage": "Tolerance Percentage",
            "Trade Vol": "Trade Vol",
            "Trade Volume Index": "Trade Volume Index",
            "True Range": "True Range",
            Twiggs: "Twiggs",
            "Twiggs Money Flow": "Twiggs Money Flow",
            Type: "Type",
            "Typical Price": "Typical Price",
            "Ulcer Index": "Ulcer Index",
            Ultimate: "Ultimate",
            "Ultimate Oscillator": "Ultimate Oscillator",
            Underlay: "Underlay",
            Undo: "실행취소",
            Units: "Units",
            "Unrealized Gain/Loss": "Unrealized Gain/Loss",
            "Up Volume": "Up Volume",
            Uptrend: "Uptrend",
            "Use My Current Location": "Use My Current Location",
            "Use the following link to share your chart:":
              "Use the following link to share your chart:",
            "Use Volume": "Use Volume",
            Vchart: "Vchart",
            Vertical: "수직선",
            "Vertical Horizontal Filter": "VHF",
            Views: "Views",
            Vol: "Vol",
            "Vol Osc": "Vol Osc",
            "vol profile": "vol profile",
            "Vol ROC": "Vol ROC",
            "vol undr": "vol undr",
            Volume: "거래량",
            "Volume % of Avg": "Volume % of Avg",
            "Volume Candle": "캔들볼륨",
            "Volume Chart": "거래량",
            "Volume Oscillator": "Volume OSC",
            "Volume Profile": "Volume Profile",
            "Volume Rate of Change": "Volume ROC",
            "Volume Spike": "Volume Spike",
            "Volume Underlay": "Volume Underlay",
            "VT HZ Filter": "VT HZ Filter",
            VWAP: "VWAP",
            W: "W",
            "W Acc Dist": "W Acc Dist",
            "Weak Ratio": "Weak Ratio",
            "Weighted Close": "Weighted Close",
            White: "White",
            "Williams %R": "Williams %R",
            "Your timezone is your current location":
              "Your timezone is your current location",
            YTD: "YTD",
            ZigZag: "ZigZag",
            "3 Min": "3분",
            "3m": "3분 ",
            "1 Sec": "초",
            "1s": "초",
            "12M": "년",
          },
        });
      var s = a(16510),
        c = a(19064),
        d = a(92265),
        u = a(87569);
      (r.CIQ.UI.KeystrokeHub.prototype.processKeyStrokeClaims = function () {
        return null;
      }),
        r.CIQ.ChartEngine.prototype.prepend("mouseWheel", function (e) {
          return !e.altKey;
        }),
        (r.CIQ.ChartEngine.YAxis.prototype.shadowBreaks = [
          [2e3, 0],
          [1e3, 3],
          [5, 4],
          [0.05, 6],
          [0.005, 8],
        ]),
        (r.CIQ.ChartEngine.YAxis.prototype.width = 70),
        (r.CIQ.ChartEngine.YAxis.prototype.initialMarginTop = 5),
        (r.CIQ.ChartEngine.YAxis.prototype.initialMarginBottom = 5),
        (r.CIQ.Studies.studyLibrary["vol profile"].seriesFN = h),
        (r.CIQ.ChartEngine.prototype.formatYAxisPrice = function (
          e,
          t,
          a,
          n,
          o
        ) {
          if (null == e || isNaN(e)) return "";
          t || (t = this.chart.panel);
          const s = n || t.yAxis;
          let c = a;
          if (
            (c || 0 === c || (c = s.printDecimalPlaces),
            c || 0 === c || (c = this.decimalPlacesFromPriceTick(s.priceTick)),
            t.name !== t.chart.name)
          ) {
            "number" != typeof e && (e = i()(e)),
              (e = e.toFixed(8).replace(/\.?0+$/, ""));
            return r.CIQ.condenseInt(e);
          }
          const u = this.chart.symbol;
          let m, h;
          if ("string" == typeof u) {
            const e = null == u ? void 0 : u.split(".")[2].split("-");
            (m = e[0]), (h = e[1]);
          }
          return (
            "number" == typeof e &&
              ("string" == typeof m && "string" == typeof h
                ? (e = (0, d.lp)(e, m, h))
                : e >= 1e4
                ? ((c = 0), (e = new Intl.NumberFormat().format(l()(e, c))))
                : (e =
                    e >= 1e3
                      ? new Intl.NumberFormat().format(l()(e, c))
                      : e.toFixed(c))),
            e
          );
        }),
        (r.CIQ.ChartEngine.YAxis.prototype.setBackground = function (e, t) {
          return null;
        });
      const m = r.CIQ.localStorageSetItem;
      function h(e, t, a) {
        if (!e || !e.chart.dataSet) return;
        const n = e.chart;
        let i = t.parameters.numberOfBars,
          o = t.parameters.widthPercentage,
          l = t.parameters.displayBorder,
          s = t.parameters.displayVolume;
        (!i || i < 0) && (i = 30),
          (i = Math.ceil(i)),
          (!o || o < 0) && (o = 0.25),
          !1 !== l && (l = !0),
          !0 !== s && (s = !1);
        const c = (n.highValue - n.lowValue) / i;
        if (0 === c) return;
        const d = [];
        for (let e = n.lowValue; e < n.highValue + 1e-8; e += c) d.push([e, 0]);
        if (d.length < 2)
          return void e.displayErrorAsWatermark(
            "chart",
            e.translateIf("Not enough data to render the Volume Profile")
          );
        let u = 0;
        for (let e = 0; e < a.length; e++) {
          let r = a[e];
          if (!r) continue;
          const i = r.Volume;
          t.panel == n.name && r.transform && (r = r.transform);
          let o = d[0][0],
            l = 0;
          for (let e = 1; e < d.length; e++)
            (l = d[e][0]),
              ((r.Low >= o && r.Low <= l) ||
                (r.Low < o && r.High > l) ||
                (r.High >= o && r.High <= l)) &&
                ((d[e][1] += i), d[e][1] > u && (u = d[e][1])),
              (o = l);
        }
        if (0 === u)
          return void e.displayErrorAsWatermark(
            "chart",
            e.translateIf("Not enough data to render the Volume Profile")
          );
        e.setStyle(
          "stx_volume_profile",
          "color",
          r.CIQ.Studies.determineColor(t.outputs["Bars Color"])
        );
        const m = t.getContext(e),
          h = "stx-float-date";
        e.canvasFont(h, m);
        const p = e.getCanvasFontSize(h),
          g = n.panel,
          C = g.yAxis.bottom;
        let T = Math.round(n.right) - 0.5;
        const b = n.width * o,
          f = e.canvasStyle("stx_volume_profile").borderTopColor,
          y =
            !r.CIQ.isTransparent(
              e.canvasStyle("stx_volume_profile").borderTopColor
            ) && l,
          v = e;
        function S(a, n) {
          n || (T -= 2), v.canvasColor(a), m.beginPath();
          let i = d[0][0],
            o = T;
          for (let e = 1; e < d.length; e++) {
            if (d[e][1]) {
              let t = Math.round(T - (d[e][1] * b) / u) - 0.5,
                a = Math.round(v.pixelFromTransformedValue(i, g)) + 0.5,
                l = Math.round(v.pixelFromTransformedValue(d[e][0], g)) + 0.5;
              if (
                (n || ((a -= 0.5), (l += 0.5), (t += 0.5)),
                a > C && (a = C),
                l < C)
              )
                if (
                  (m.moveTo(T, a),
                  m.lineTo(T, l),
                  m.lineTo(t, l),
                  m.lineTo(t, a),
                  n)
                )
                  (o > t || 1 == e) && m.lineTo(o, a);
                else if ((m.lineTo(T, a), s)) {
                  const n = r.CIQ.condenseInt(d[e][1]),
                    i = a - l;
                  if (p <= i - 2) {
                    let e;
                    try {
                      e = m.measureText(n).width;
                    } catch (t) {
                      e = 0;
                    }
                    m.textBaseline = "top";
                    const a = m.fillStyle;
                    (m.fillStyle = f),
                      m.fillText(n, t - e - 3, l + (i / 2 - p / 2)),
                      (m.fillStyle = a);
                  }
                }
              o = t;
            } else o = T;
            i = d[e][0];
          }
          !t.highlight && e.highlightedDraggable && (m.globalAlpha *= 0.3),
            n || m.fill(),
            (m.strokeStyle = f),
            n && m.stroke(),
            m.closePath();
        }
        S("stx_volume_profile", !1),
          y && S("stx_volume_profile", !0),
          (m.globalAlpha = 1);
      }
      (r.CIQ.localStorageSetItem = function (e, t) {
        const a = r.CIQ.localStorage.getItem(e),
          n = new CustomEvent("ciqLocalStorage", {
            detail: { key: e, newValue: t, oldValue: a },
          });
        document.dispatchEvent(n), m.apply(this, [e, t]);
      }),
        (r.CIQ.Studies.displayVolumeProfile = h),
        (r.CIQ.UI.HeadsUp.prototype.position = function () {
          const e = this.context.stx,
            t = e.barFromPixel(e.cx);
          this.tick = e.tickFromPixel(e.cx);
          const a = e.chart.xaxis[t];
          e.chart.currentQuote;
          let n = e.chart.defaultPlotField;
          const i = e.chart.highLowBars || e.highLowBars[e.layout.chartType];
          (n && !i) || (n = "Close");
          const o = this.node,
            l = e.chart.symbol;
          let s, d;
          if ("string" == typeof l) {
            const e = null == l ? void 0 : l.split(".")[2].split("-");
            (s = e[0]), (d = e[1]);
          }
          function u(t) {
            let a = "";
            const r = e.layout.chartScale,
              n = e.chart.panel,
              i = e.chart.yAxis,
              o =
                "string" == typeof s && "string" == typeof d
                  ? (0, c.m_)(s, d, t)
                  : void 0;
            return (
              (a =
                i.originalPriceFormatter && i.originalPriceFormatter.func
                  ? i.originalPriceFormatter.func(e, n, t)
                  : i.priceFormatter && "percent" != r && "relative" != r
                  ? i.priceFormatter(e, n, t)
                  : e.formatYAxisPrice(t, n, o)),
              a
            );
          }
          const m = () => {
            function t(e) {
              return r.CIQ.isValidNumber(parseFloat(e)) ? e : "N/A";
            }
            if (
              ((this.timeout = null),
              o.find("cq-hu-price").text("N/A"),
              o.find("cq-hu-open").text("N/A"),
              o.find("cq-hu-close").text("N/A"),
              o.find("cq-hu-high").text("N/A"),
              o.find("cq-hu-low").text("N/A"),
              o.find("cq-hu-date").text("N/A"),
              o.find("cq-hu-volume").text("N/A"),
              o.find("cq-volume-rollup").text(""),
              a && a.data)
            ) {
              const i = r.CIQ.clone(a.data);
              void 0 === i.Open && (i.Open = i.Close),
                void 0 === i.High && (i.High = Math.max(i.Open, i.Close)),
                void 0 === i.Low && (i.Low = Math.min(i.Open, i.Close)),
                o.find("cq-hu-open").text(t(u(i.Open))),
                o.find("cq-hu-price").text(t(u(i[n]))),
                o.find("cq-hu-close").text(t(u(i.Close))),
                o.find("cq-hu-high").text(t(u(i.High))),
                o.find("cq-hu-low").text(t(u(i.Low)));
              let l = r.CIQ.condenseInt(i.Volume);
              const s = l.charAt(l.length - 1);
              s > "9" &&
                ((l = l.substring(0, l.length - 1)),
                o.find("cq-volume-rollup").text(s.toUpperCase())),
                o.find("cq-hu-volume").text(l);
              let c = i.displayDate;
              c || (c = i.DT),
                e.internationalizer
                  ? r.CIQ.ChartEngine.isDailyInterval(e.layout.interval)
                    ? o
                        .find("cq-hu-date")
                        .text(e.internationalizer.yearMonthDay.format(c))
                    : o
                        .find("cq-hu-date")
                        .text(
                          e.internationalizer.yearMonthDay.format(c) +
                            " " +
                            e.internationalizer.hourMinute.format(c)
                        )
                  : r.CIQ.ChartEngine.isDailyInterval(e.layout.interval)
                  ? o
                      .find("cq-hu-date")
                      .text(r.CIQ.mmddyyyy(r.CIQ.yyyymmddhhmm(c)))
                  : o
                      .find("cq-hu-date")
                      .text(r.CIQ.mmddhhmm(r.CIQ.yyyymmddhhmmssmmm(c)));
              const d = o.find("cq-volume-visual");
              if (d.length) {
                const e = this.maxVolume.value
                  ? i.Volume / this.maxVolume.value
                  : 0;
                d.css({ width: Math.round(100 * e) + "%" });
              }
            }
          };
          if (
            this.tick != this.prevTick ||
            (a && +a.DT == +e.chart.endPoints.end)
          ) {
            this.timeout && clearTimeout(this.timeout);
            const e = (this.params.followMouse, 0);
            this.timeout = setTimeout(m, e);
          }
          (this.prevTick = this.tick),
            this.params.followMouse &&
              (e.openDialog && (this.tick = -1), this.followMouse(this.tick));
        });
      const p = 1e10;
      (r.CIQ.calculateRenkoBars = function (e, t, a, r) {
        if (!t.length) return [];
        r || (r = []);
        const n = e.layout;
        let i = e.chart.state.aggregation;
        i || (i = e.chart.state.aggregation = {});
        const o = Math.min(300, t.length);
        i.minMax ||
          (i.minMax = e.determineMinMax(t.slice(t.length - o), [
            "Close",
            "High",
            "Low",
          ]));
        const l = i.minMax[1] - i.minMax[0],
          s = e.panels[e.chart.name].height;
        if (!s) return [];
        (e.chart.defaultChartStyleConfig.renko =
          Math.floor((p * l) / (s / 30)) / p),
          null === a || isNaN(a) || a <= 0
            ? ((a = e.chart.defaultChartStyleConfig.renko),
              null !== n.renko &&
                ((n.renko = null), e.changeOccurred("layout")))
            : ((a = Math.max(a, l / s)),
              n.renko !== a && ((n.renko = a), e.changeOccurred("layout")));
        const c = [];
        let d = null,
          u = null,
          m = null;
        if (r.length) {
          const e = r[r.length - 1];
          (d = e.Low - a), (u = e.High + a);
        }
        function h(e, t) {
          (e = Number(e.toFixed(8))), (t = Number(t.toFixed(8)));
          const a = {
            DT: m.DT,
            displayDate: m.displayDate,
            Date: m.Date,
            Open: e,
            Close: t,
            High: Math.max(e, t),
            Low: Math.min(e, t),
            Volume: 0,
            iqPrevClose: e != t ? e : null,
          };
          for (const e in m) a[e] || 0 === a[e] || (a[e] = m[e]);
          c.push(a);
        }
        for (let r = 0; r < t.length; r++) {
          const n = t[r];
          if (n) {
            if (!d && !u) {
              const e = n.Open || 0 === n.Open ? n.Open : n.Close,
                t = Math.floor(e / a) * a,
                r = isNaN(t) ? e : t;
              (d = r - a), (u = r + a);
            }
            for (;;)
              if ((m || (m = n), n.Close <= d))
                h(d + a, d), (u = d + 2 * a), (d -= a), (m = null);
              else {
                if (!(n.Close >= u)) break;
                h(u - a, u), (d = u - 2 * a), (u += a), (m = null);
              }
            e.chart.currentQuote = n;
          }
        }
        return (
          d < t[t.length - 1].Close && d + a > t[t.length - 1].Close
            ? h(d + a, t[t.length - 1].Close)
            : u > t[t.length - 1].Close &&
              u - a < t[t.length - 1].Close &&
              h(u - a, t[t.length - 1].Close),
          c
        );
      }),
        (r.CIQ.calculateRangeBars = function (e, t, a, r) {
          if (!t.length) return t;
          r || (r = []);
          const n = e.layout;
          let i = e.chart.state.aggregation;
          i || (i = e.chart.state.aggregation = {});
          const o = Math.min(300, t.length);
          i.minMax ||
            (i.minMax = e.determineMinMax(t.slice(t.length - o), [
              "Close",
              "High",
              "Low",
            ]));
          const l = i.minMax[1] - i.minMax[0],
            s = e.panels[e.chart.name].height;
          if (!s) return [];
          (e.chart.defaultChartStyleConfig.range =
            Math.floor((p * l) / (s / 30)) / p),
            null === a || isNaN(a) || a < 0
              ? ((a = e.chart.defaultChartStyleConfig.range),
                null !== n.range &&
                  ((n.range = null), e.changeOccurred("layout")))
              : ((a = Math.max(a, l / s)),
                n.range !== a && ((n.range = a), e.changeOccurred("layout")));
          const c = [];
          let d = null,
            u = null,
            m = null,
            h = null,
            g = null;
          function C(e) {
            const t = {
              DT: g.DT,
              displayDate: g.displayDate,
              Date: g.Date,
              Open: Number(h.toFixed(8)),
              Close: Number(e.toFixed(8)),
              High: Number(u.toFixed(8)),
              Low: Number(m.toFixed(8)),
              Volume: 0,
              iqPrevClose: void 0,
            };
            t.iqPrevClose = t.Open;
            for (const e in g) t[e] || 0 === t[e] || (t[e] = g[e]);
            c.push(t);
          }
          function T(e, t) {
            for (;;) {
              if ((g || (g = e), d < t)) {
                if (((d = Math.min(t, u)), (m = Math.max(m, d - a)), t < u))
                  break;
              } else if (
                d >= t &&
                ((d = Math.max(t, m)), (u = Math.min(u, d + a)), t > m)
              )
                break;
              if (void 0 === d)
                return void console.log(
                  "Uh oh undefined in calculateRangeBars:processMove"
                );
              C(d), (g = null), b();
            }
          }
          function b() {
            (u = d + a), (m = d - a), (h = d);
          }
          for (let e = 0; e < t.length; e++) {
            const n = t[e];
            if (!n) continue;
            let i = t[e - 1];
            if (
              (e ||
                (i || (i = r[r.length - 1]),
                i && ((d = i.Close), (d || 0 === d) && b())),
              !i)
            )
              continue;
            const o = n.Close;
            let l = n.Open,
              s = n.High,
              c = n.Low;
            if (o || 0 === o) {
              if (
                ((l = l || 0 === l ? l : o),
                (s = s || 0 === s ? s : o),
                (c = c || 0 === c ? c : o),
                !d && 0 !== d)
              ) {
                const e = Math.floor(l / a) * a;
                (d = isNaN(e) ? l : e), b(), T(i, l);
              }
              if (
                (e && T(n, l),
                s - l < l - c
                  ? (s && T(n, s), c && T(n, c))
                  : (c && T(n, c), s && T(n, s)),
                T(n, o),
                e == t.length - 1 && o != h)
              ) {
                const e = u;
                (u = m + a), (m = e - a), C(o);
              }
            }
          }
          return c;
        }),
        (r.CIQ.UI.Scroll.prototype.resize = function () {
          const e = this.node;
          if (e.parents(".sharing").length) return;
          if (void 0 !== e.attr("cq-no-resize")) return;
          void 0 !== e.attr("cq-no-maximize") && (this.noMaximize = !0);
          const t = e[0].getBoundingClientRect(),
            a = e.prop("reduceMenuHeight") || 45,
            r = u(window).height();
          if (!r) return;
          let n = r - t.top - a;
          const i = e.parents(".stx-holder,.stx-subholder,.chartContainer");
          i.length &&
            i.each(function () {
              const e = u(this),
                a = e[0].getBoundingClientRect().top + e.height();
              n = Math.min(n, a - t.top - 5);
            });
          const o = e.nextAll();
          for (let e = 0; e < o.length; e++) {
            const t = u(o[e]);
            t.is(":visible") && (n -= t.height());
          }
          this.noMaximize || e.css({ height: n + "px" }),
            e.css({ "max-height": n + "px" }),
            e.perfectScrollbar && e.perfectScrollbar("update");
        }),
        (r.CIQ.Market.Iterator._Clock.prototype._weekImpl = function () {
          var e = new Date(this.ctime);
          for (
            e.setHours(12),
              this.ctime = e.getTime(),
              this._tickTock(),
              e = new Date(this.ctime);
            1 !== e.getDay();

          )
            this._tockTick24(), (e = new Date(this.ctime));
          return (
            this._windMaybe(this.market._wasOpenDaily, this._tickTock24),
            (e = new Date(this.ctime)).setHours(0, 0, 0, 0),
            (this.ctime = e.getTime()),
            this._date()
          );
        });
      const g = r.CIQ.Studies.addStudy;
      function C() {
        r.CIQ.Studies.addStudy = function (e, t, a, r, n, i, o) {
          return (
            (0, s.A)("거래소", "차트", "차트", {
              category: "지표설정",
              eventDetail: t,
              pageDetail: a ? JSON.stringify(a) : void 0,
            }),
            g(e, t, a, r, n, i, o)
          );
        };
      }
      function T() {
        r.CIQ.Studies.addStudy = g;
      }
      r.CIQ.ChartEngine.prototype.prepend(
        "setPeriodicity",
        function ({ interval: e, period: t, timeUnit: a }) {
          let r = "";
          switch (a) {
            case "second":
              r = "초";
              break;
            case "minute":
              r = `${e}분`;
              break;
            case "day":
              r = "일";
              break;
            case "week":
              r = "주";
              break;
            case "month":
              r = 12 === t ? "년" : "월";
              break;
            case "year":
              r = "년";
          }
          (0, s.A)("거래소", "차트", "차트", {
            category: "봉",
            eventDetail: r,
          });
        }
      );
      r.CIQ.ChartEngine.prototype.prepend("zoomIn", function () {
        (0,
        s.A)("거래소", "차트", "차트", { category: "확대축소버튼", eventDetail: "확대" });
      });
      r.CIQ.ChartEngine.prototype.prepend("zoomOut", function () {
        (0,
        s.A)("거래소", "차트", "차트", { category: "확대축소버튼", eventDetail: "축소" });
      }),
        (r.CIQ.ChartEngine.prototype.needDifferentData = function (e) {
          var t = this.layout,
            a = r.CIQ.ChartEngine.isDailyInterval(e.interval),
            n = r.CIQ.ChartEngine.isDailyInterval(t.interval),
            i = !1;
          return (
            this.dontRoll || !n
              ? (t.interval != e.interval || t.periodicity != e.period) &&
                (i = !0)
              : a != n && (i = !0),
            a || e.timeUnit || (e.timeUnit = "minute"),
            n || t.timeUnit || (t.timeUnit = "minute"),
            e.timeUnit != t.timeUnit && (i = !0),
            (this.masterData && this.masterData.length) || (i = !0),
            i
          );
        }),
        (r.CIQ.displayableDate = function (e, t, a) {
          function n(e) {
            return e < 10 ? "0" + e : e;
          }
          var i = "",
            o = e.layout.interval;
          let l = e.layout.periodicity;
          var s = r.CIQ.ChartEngine.isDailyInterval(o);
          if (t.xAxis.formatter) i = t.xAxis.formatter(a);
          else if (e.internationalizer)
            (i = e.internationalizer.monthDay.format(a)),
              s
                ? (i =
                    "month" == o
                      ? e.internationalizer.yearMonth.format(a)
                      : e.internationalizer.yearMonthDay.format(a))
                : (i += " " + e.internationalizer.hourMinute.format(a));
          else {
            var c = n(a.getMonth() + 1),
              d = n(a.getDate()),
              u = n(a.getHours()),
              m = n(a.getMinutes());
            if (s)
              ("month" === o && 12 == l) ||
                (i = "month" == o ? c + "-" : c + "-" + d + "-"),
                (i += a.getFullYear());
            else {
              i = c + "/" + d + " " + u + ":" + m;
              var h =
                  (t.xAxis.activeTimeUnit &&
                    t.xAxis.activeTimeUnit <= r.CIQ.SECOND) ||
                  "second" == e.layout.timeUnit,
                p =
                  (t.xAxis.activeTimeUnit &&
                    t.xAxis.activeTimeUnit <= r.CIQ.MILLISECOND) ||
                  "millisecond" == e.layout.timeUnit;
              if (h || p)
                if (((i += ":" + n(a.getSeconds())), p)) {
                  var g = n(a.getMilliseconds());
                  g < 100 && (g = "0" + g), (i += ":" + g);
                }
            }
          }
          return i;
        }),
        (r.CIQ.Drawing.annotation.prototype.renderText = function () {
          this.getFontString();
          var e = this.stx.panels[this.panelName];
          if (e) {
            this.arr = this.text.split("\n");
            var t = 0;
            if (this.stx.chart.context) {
              this.stx.chart.context.font = this.fontString;
              for (var a = 0; a < this.arr.length; a++) {
                var n = this.stx.chart.context.measureText(this.arr[a]).width;
                n > t && (t = n);
              }
            }
            0 === t && (t = 2 * this.defaultWidth),
              (this.fontSize = r.CIQ.stripPX(this.fontDef.size));
            var i = this.arr.length * (this.fontSize + 2);
            r.CIQ.touchDevice && (i += 5),
              (this.w = t + 2 * this.padding),
              (this.h = i + 2 * this.padding);
            var o = this.stx.pixelFromTick(this.p0[0], e.chart) + t,
              l =
                this.stx.pixelFromValueAdjusted(e, this.p0[0], this.p0[1]) + i;
            (this.p1 = [
              this.stx.tickFromPixel(o, e.chart),
              this.stx.valueFromPixel(l, e),
            ]),
              this.stem &&
                this.stem.d &&
                (this.stem.t = this.stx.tickFromDate(this.stem.d, e.chart));
          }
        }),
        (r.CIQ.Drawing.elliottwave.prototype.reconstruct = function (e, t) {
          var a;
          (this.stx = e),
            (this.color = t.col),
            (this.panelName = t.pnl),
            (this.pattern = t.ptrn),
            (this.lineWidth = t.lw),
            (this.font = r.CIQ.replaceFields(t.fnt, {
              st: "style",
              sz: "size",
              wt: "weight",
              fl: "family",
            })),
            (this.decoration = t.decor),
            (this.showLines = t.show),
            (this.dx = t.dx),
            (this.dy = t.dy),
            (this.trend = t.trend),
            (this.annotationPoints = t.annotations.split(",")),
            "enclosed" === t.decor &&
              (null == (a = e.chart.tempCanvas) ? void 0 : a.context) &&
              this.calculateRadius(e.chart.tempCanvas.context),
            (this.maxSegments = t.mxSeg),
            this.reconstructPoints(t),
            this.adjust();
        });
      a(43589);
      var b = a(87569),
        f = a.n(b),
        y = (a(90165), a(87569));
      y || (y = f()), window.$ || (window.$ = f());
      var v = a(79474),
        S = a(29250),
        k = a.n(S),
        P = a(62552);
      class w extends v.Component {
        constructor() {
          super(), (this.bottomPanelRef = v.createRef());
        }
        componentDidMount() {
          let e = this.context;
          e.registerComponent({ BottomPanel: this }),
            (this.node = e.UIContext.BottomPanel = this.bottomPanelRef.current);
        }
        render() {
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "div",
              { className: "ciq-bottom-panel", ref: this.bottomPanelRef },
              this.props.children
            )
          );
        }
      }
      w.contextType = P.u;
      var A = a(79775),
        U = a(97500),
        M = a.n(U);
      class D extends v.Component {
        constructor() {
          super(), (this.chartAreaRef = v.createRef());
        }
        componentDidMount() {
          let e = this.chartAreaRef.current;
          this.context.setContext({
            chartArea: {
              width: e.clientWidth,
              height: e.clientHeight,
              node: e,
            },
          });
        }
        render() {
          const { left: e, right: t, header: a, footer: r } = this.props,
            n =
              (this.context.containerType,
              A.dI.MOBILE,
              this.context.containerType === A.dI.MINI),
            i = { left: e, right: t, top: a ? "" : 0, bottom: r ? "" : 0 };
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "div",
              {
                className: M()("ciq-chart-area", n ? "mini" : null),
                ref: this.chartAreaRef,
                style: i,
              },
              this.props.children
            )
          );
        }
      }
      D.contextType = P.u;
      v.PureComponent;
      a(19309);
      class x extends v.Component {
        constructor() {
          super(),
            (this.symbolInputRef = v.createRef()),
            (this.lookupRef = v.createRef());
        }
        componentDidMount() {
          const {
            UIContext: e,
            UIContext: { stx: t },
            config: { defaultSymbol: a, symbolLookupTabs: n = ["ALL"] },
          } = this.context;
          (e.changeSymbol = function (e) {
            this.loader && this.loader.show(),
              (e.symbol = e.symbol.toUpperCase());
            var a = this;
            t.newChart(e, null, null, function (e) {
              a.loader && a.loader.hide();
            });
          }),
            e.setLookupDriver(new r.CIQ.ChartEngine.Driver.Lookup.ChartIQ()),
            (e.UISymbolLookup = this.lookupRef.current),
            e.UISymbolLookup.setCallback(function (e, t) {
              e.changeSymbol(t);
            }),
            t.chart.symbol || e.UISymbolLookup.selectItem({ symbol: a }),
            (this.tabItems = n.map((e, t) =>
              t
                ? v.createElement("cq-filter", { class: "true", key: e }, e)
                : v.createElement("cq-filter", { key: e }, e)
            ));
        }
        render() {
          const {
            UIContext: {
              uiLayout: { symbolPlaceholder: e = "Enter Symbol" } = {},
            },
          } = this.context;
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "cq-menu",
              { class: "ciq-search" },
              v.createElement(
                "cq-lookup",
                {
                  "cq-keystroke-claim": !0,
                  "cq-keystroke-default": !0,
                  ref: this.lookupRef,
                },
                v.createElement(
                  "cq-lookup-input",
                  { "cq-no-close": !0 },
                  v.createElement("input", {
                    type: "text",
                    spellCheck: "off",
                    autoComplete: "off",
                    autoCorrect: "off",
                    autoCapitalize: "off",
                    name: "symbol",
                    placeholder: e,
                    ref: this.symbolInput,
                  }),
                  v.createElement("cq-lookup-icon", null)
                ),
                v.createElement(
                  "cq-lookup-results",
                  null,
                  v.createElement(
                    "cq-lookup-filters",
                    { "cq-no-close": !0 },
                    this.tabItems
                  ),
                  v.createElement("cq-scroll", null)
                )
              )
            )
          );
        }
      }
      x.contextType = P.u;
      class O extends v.Component {
        render() {
          return v.createElement("cq-color-picker", null);
        }
      }
      v.Component;
      class I extends v.Component {
        componentDidMount() {
          const e = this.context.UIContext,
            t = new r.CIQ.UI.DrawingEdit(null, e);
          (t.preventAutoClose = !0),
            t.node.addEventListener(
              "drawing-edit-begin",
              function (a) {
                if (document.body.classList.contains("toolbar-on")) return;
                t.preventAutoClose = !1;
                const r = e.topNode.querySelectorAll(".ciq-draw");
                r.forEach((e) => (e.priorVectorType = a.detail.tool)),
                  r.forEach((e) => e.set(!0));
              },
              !1
            ),
            t.node.addEventListener(
              "drawing-edit-end",
              function (a) {
                t.preventAutoClose ||
                  ("edit" !== a.detail.action && (t.preventAutoClose = !0),
                  "close" === a.detail.action &&
                    e.topNode
                      .querySelectorAll(".ciq-draw")
                      .forEach((e) => e.set(!1)));
              },
              !1
            ),
            (this.UIDrawingEdit = t);
        }
        componentWillUnmount() {
          let e = this.context.stx;
          this.UIDrawingEdit.drawingCB &&
            e.removeEventListener(this.UIDrawingEdit.drawingCB),
            this.UIDrawingEdit.drawingEditCB &&
              e.removeEventListener(this.UIDrawingEdit.drawingEditCB);
        }
        render() {
          return v.createElement(
            "cq-dialog",
            null,
            v.createElement(
              "cq-drawing-context",
              null,
              v.createElement(
                "div",
                { stxtap: "DrawingEdit.edit()" },
                "Edit Settings"
              ),
              v.createElement(
                "div",
                { stxtap: "DrawingEdit.clone()" },
                "Clone Drawing"
              ),
              v.createElement(
                "cq-menu",
                {
                  stxtap: "resize()",
                  "cq-close-top": "cq-dialog[cq-drawing-context]",
                },
                v.createElement(
                  "cq-menu-dropdown",
                  { "cq-no-scroll": "true", class: "context-menu-right" },
                  v.createElement(
                    "cq-item",
                    { stxtap: "DrawingEdit.reorderLayer('top')" },
                    "Bring to Top"
                  ),
                  v.createElement(
                    "cq-item",
                    { stxtap: "DrawingEdit.reorderLayer('up')" },
                    "Bring Forward"
                  ),
                  v.createElement(
                    "cq-item",
                    { stxtap: "DrawingEdit.reorderLayer('down')" },
                    "Send Backward"
                  ),
                  v.createElement(
                    "cq-item",
                    { stxtap: "DrawingEdit.reorderLayer('bottom')" },
                    "Send to Bottom"
                  )
                ),
                v.createElement(
                  "div",
                  null,
                  "Layer Management",
                  v.createElement("div", {
                    className: "context-button-right-arrow",
                  })
                )
              ),
              v.createElement(
                "div",
                { stxtap: "DrawingEdit.remove()" },
                "Delete Drawing"
              )
            )
          );
        }
      }
      I.contextType = P.u;
      class B extends v.Component {
        constructor() {
          super(), (this.contextMenuRef = v.createRef());
        }
        componentDidMount() {
          const e = this.contextMenuRef.current;
          this.context.UIContext.advertised.StudyEdit.contextDialog = [e];
        }
        render() {
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "cq-dialog",
              null,
              v.createElement(
                "cq-study-context",
                { ref: this.contextMenuRef },
                v.createElement(
                  "div",
                  { stxtap: "StudyEdit.edit()" },
                  "Edit Settings..."
                ),
                v.createElement(
                  "div",
                  { stxtap: "StudyEdit.remove()" },
                  "Delete Study"
                )
              )
            )
          );
        }
      }
      B.contextType = P.u;
      class E extends v.Component {
        render() {
          return v.createElement(
            "cq-attribution",
            null,
            v.createElement(
              "template",
              null,
              v.createElement(
                "cq-attrib-container",
                null,
                v.createElement("cq-attrib-source", null),
                " ",
                v.createElement("cq-attrib-quote-type", null)
              )
            )
          );
        }
      }
      class R extends v.Component {
        constructor() {
          super(), (this.node = v.createRef()), (this.prevVal = !1);
        }
        componentDidMount() {
          const { UIContext: e } = this.context,
            { layout: t } = e.stx;
          (this.UIHeadsUpDynamic = new r.CIQ.UI.HeadsUp(this.node.current, e, {
            followMouse: !0,
            autoStart: !1,
          })),
            this.UIHeadsUpDynamic.end(),
            (this.updateHeadsUp = this.updateHeadsUp.bind(this)),
            r.CIQ.UI.observeProperty("headsUp", t, this.updateHeadsUp);
        }
        updateHeadsUp({ value: e }) {
          const t = "dynamic" === e;
          this.prevVal !== t &&
            (this.UIHeadsUpDynamic[t ? "begin" : "end"](), (this.prevVal = t));
        }
        componentWillUnmount() {
          const { layout: e } = this.context.UIContext.stx;
          r.CIQ.UI.unobserveProperty("headsUp", e, this.updateHeadsUp);
        }
        render() {
          const e = v.createElement(
            "cq-hu-dynamic",
            { ref: this.node },
            v.createElement(
              "svg",
              {
                version: "1.1",
                x: "0px",
                y: "0px",
                viewBox: "0 0 215 140",
                enableBackground: "new 0 0 215 140",
              },
              v.createElement(
                "defs",
                null,
                v.createElement(
                  "filter",
                  { id: "ciq-hu-shadow", height: "130%" },
                  v.createElement("feGaussianBlur", {
                    in: "SourceAlpha",
                    stdDeviation: "1",
                  }),
                  v.createElement("feOffset", {
                    dx: "0",
                    dy: "1",
                    result: "offsetblur",
                  }),
                  v.createElement(
                    "feComponentTransfer",
                    null,
                    v.createElement("feFuncA", { type: "linear", slope: "0.2" })
                  ),
                  v.createElement(
                    "feMerge",
                    null,
                    v.createElement("feMergeNode", null),
                    v.createElement("feMergeNode", { in: "SourceGraphic" })
                  )
                )
              ),
              v.createElement("polygon", {
                className: "ciq-hu-bg",
                fill: "#2A51D0",
                points: "198.4,124.4 1,124.4 1,1 214,1 214,137.8",
                filter: "url(#ciq-hu-shadow)",
              }),
              v.createElement("path", {
                className: "ciq-hu-stroke",
                fill: "#398DFF",
                d: "M213,2v133.6l-13.7-11.8l-0.6-0.5H198H2V2H213 M215,0H0v125.4h198l17,14.6V0L215,0z",
              })
            ),
            v.createElement(
              "div",
              null,
              v.createElement(
                "cq-hu-col1",
                null,
                v.createElement("cq-hu-date", null),
                v.createElement("cq-hu-price", null),
                v.createElement(
                  "cq-volume-grouping",
                  null,
                  v.createElement("div", null, "Volume"),
                  v.createElement(
                    "div",
                    null,
                    v.createElement("cq-volume-visual", null)
                  ),
                  v.createElement(
                    "div",
                    null,
                    v.createElement("cq-hu-volume", null),
                    v.createElement("cq-volume-rollup", null)
                  )
                )
              ),
              v.createElement(
                "cq-hu-col2",
                null,
                v.createElement("div", null, "Open"),
                v.createElement("cq-hu-open", null),
                v.createElement("div", null, "Close"),
                v.createElement("cq-hu-close", null),
                v.createElement("div", null, "High"),
                v.createElement("cq-hu-high", null),
                v.createElement("div", null, "Low"),
                v.createElement("cq-hu-low", null)
              )
            )
          );
          return this.context.UIContext && e;
        }
      }
      R.contextType = P.u;
      class L extends v.Component {
        constructor() {
          super(), (this.node = v.createRef()), (this.prevVal = !1);
        }
        componentDidMount() {
          const { UIContext: e } = this.context,
            { layout: t } = e.stx;
          (this.UIHeadsUpStatic = new r.CIQ.UI.HeadsUp(
            this.node.current,
            this.context.UIContext,
            { autostart: !0 }
          )),
            this.UIHeadsUpStatic.end(),
            (this.updateHeadsUp = this.updateHeadsUp.bind(this)),
            r.CIQ.UI.observeProperty("headsUp", t, this.updateHeadsUp);
        }
        updateHeadsUp({ value: e }) {
          const t = "static" === e;
          this.prevVal !== t &&
            (this.UIHeadsUpStatic[t ? "begin" : "end"](), (this.prevVal = t));
        }
        componentWillUnmount() {
          const { layout: e } = this.context.UIContext.stx;
          r.CIQ.UI.unobserveProperty("headsUp", e, this.updateHeadsUp);
        }
        render() {
          const e = v.createElement(
            "cq-hu-static",
            { ref: this.node },
            v.createElement(
              "div",
              null,
              v.createElement("div", null, "Price"),
              v.createElement("cq-hu-price", null),
              v.createElement("div", null, "Open"),
              v.createElement("cq-hu-open", null),
              v.createElement("div", null, "Close"),
              v.createElement("cq-hu-close", null)
            ),
            v.createElement(
              "div",
              null,
              v.createElement("div", null, "Vol"),
              v.createElement(
                "cq-volume-section",
                null,
                v.createElement("cq-hu-volume", null),
                v.createElement("cq-volume-rollup", null)
              ),
              v.createElement("div", null, "High"),
              v.createElement("cq-hu-high", null),
              v.createElement("div", null, "Low"),
              v.createElement("cq-hu-low", null)
            )
          );
          return this.context.UIContext && e;
        }
      }
      L.contextType = P.u;
      class F extends v.Component {
        render() {
          const e = v.createElement(
            "div",
            {
              className: "stx-marker-templates",
              style: { left: "-1000px", visibility: "hidden" },
            },
            v.createElement(
              "div",
              { className: "stx-marker abstract" },
              v.createElement(
                "div",
                { className: "stx-marker-content" },
                v.createElement(
                  "div",
                  { className: "sample" },
                  v.createElement(
                    "div",
                    { id: "stage" },
                    v.createElement(
                      "div",
                      { id: "helicopter" },
                      v.createElement(
                        "div",
                        { id: "propeller" },
                        v.createElement(
                          "div",
                          {
                            id: "spinner",
                            style: {
                              WebkitTransformOrigin: "40px 0 0",
                              TransformOrigin: "40px 0 0",
                            },
                          },
                          v.createElement("div", {
                            style: {
                              WebkitTransform: "rotateY(0deg) translateX(40px)",
                              Transform: "rotateY(0deg) translateX(40px)",
                            },
                          }),
                          v.createElement("div", {
                            style: {
                              WebkitTransform:
                                "rotateY(-90deg) translateX(40px)",
                              Transform: "rotateY(-90deg) translateX(40px)",
                            },
                          }),
                          v.createElement("div", {
                            style: {
                              WebkitTransform:
                                "rotateY(-180deg) translateX(40px)",
                              Transform: "rotateY(-180deg) translateX(40px)",
                            },
                          }),
                          v.createElement("div", {
                            style: {
                              WebkitTransform:
                                "rotateY(-270deg) translateX(40px)",
                              Transform: "rotateY(-270deg) translateX(40px)",
                            },
                          })
                        )
                      ),
                      v.createElement("div", { id: "heli-body" })
                    )
                  ),
                  v.createElement(
                    "div",
                    { className: "text" },
                    "This is an example of a complex marker which can contain html, video, images, css, and animations."
                  )
                )
              )
            )
          );
          return this.context.stx.chart && e;
        }
      }
      F.contextType = P.u;
      class N extends v.Component {
        constructor() {
          super(),
            (this.toolbar = v.createRef()),
            (this.undoButton = v.createRef()),
            (this.redoButton = v.createRef()),
            (this.magnetToggle = v.createRef()),
            (this.paletteDock = v.createRef());
        }
        componentDidMount() {
          const e = this.context.UIContext,
            t = this.context.stx,
            a = this.toolbar.current,
            r = this.magnetToggle.current;
          (e.PaletteDrawing = a),
            (e.PaletteDock = this.paletteDock.current),
            t.setDrawingContainer(a),
            this.redoButton.current.pairUp(this.undoButton.current),
            r.registerCallback(function (e) {
              isNaN(parseInt(e, 10))
                ? e && "false" !== e
                  ? (r.classList.add("active"), r.classList.add("strong"))
                  : (r.classList.remove("active"), r.classList.remove("strong"))
                : (r.classList.add("active"), r.classList.remove("strong"));
            }, !1);
        }
        buildLists() {
          if (this.drawingToolItems) return;
          const {
            drawingTools: e,
            drawingToolGrouping: t,
            drawingFonts: a,
            drawingFontSizes: r,
          } = this.context.config;
          (this.drawingToolItems = this.sortDrawings(e).map(
            ({ tool: e, group: t, label: a, shortcut: r }) =>
              v.createElement(
                "cq-item",
                {
                  class: "ciq-tool",
                  "cq-tool": e,
                  "cq-tool-shortcut": r,
                  "cq-tool-group": t,
                  stxtap: `tool('${e}')`,
                  key: e,
                  onClick: () => {
                    (0, s.A)("거래소", "차트", "차트", {
                      category: "도구",
                      pageDetail: e,
                    });
                  },
                },
                v.createElement("span", { className: `icon ${e}` }),
                v.createElement("label", null, a)
              )
          )),
            (this.groupDropdown = v.createElement(
              "cq-menu-dropdown",
              { class: "ciq-tool-group-selection" },
              t.map((e) => {
                const t = e.toLowerCase();
                return v.createElement(
                  "cq-item",
                  {
                    stxtap: `setToolGroup('${t}')`,
                    "cq-tool-group": t,
                    key: e,
                  },
                  e
                );
              })
            )),
            (this.fontFamilyMenu = v.createElement(
              "cq-menu-dropdown",
              { class: "ciq-font-family" },
              a.map((e) =>
                v.createElement(
                  "cq-item",
                  {
                    stxtap: `setFontFamily('${e}')`,
                    style: { fontFamily: "Default" === e ? "inherit" : e },
                    key: e,
                  },
                  e
                )
              )
            )),
            (this.fontSizeMenu = v.createElement(
              "cq-menu-dropdown",
              { class: "ciq-font-size" },
              r.map((e) =>
                v.createElement(
                  "cq-item",
                  { stxtap: `setFontSize('${e}px')`, key: e },
                  e
                )
              )
            )),
            (this.lineStyleMenu = v.createElement(
              "cq-menu-dropdown",
              { class: "ciq-line-style-menu" },
              v.createElement(
                "cq-item",
                { stxtap: "setLine(1,'solid')" },
                v.createElement("span", {
                  className: "ciq-line-style-option ciq-solid-1",
                })
              ),
              v.createElement(
                "cq-item",
                { stxtap: "setLine(3,'solid')" },
                v.createElement("span", {
                  className: "ciq-line-style-option ciq-solid-3",
                })
              ),
              v.createElement(
                "cq-item",
                { stxtap: "setLine(5,'solid')" },
                v.createElement("span", {
                  className: "ciq-line-style-option ciq-solid-5",
                })
              ),
              v.createElement(
                "cq-item",
                { stxtap: "setLine(1,'dotted')" },
                v.createElement("span", {
                  className: "ciq-line-style-option ciq-dotted-1",
                })
              ),
              v.createElement(
                "cq-item",
                { stxtap: "setLine(3,'dotted')" },
                v.createElement("span", {
                  className: "ciq-line-style-option ciq-dotted-3",
                })
              ),
              v.createElement(
                "cq-item",
                { stxtap: "setLine(5,'dotted')" },
                v.createElement("span", {
                  className: "ciq-line-style-option ciq-dotted-5",
                })
              ),
              v.createElement(
                "cq-item",
                { stxtap: "setLine(1,'dashed')" },
                v.createElement("span", {
                  className: "ciq-line-style-option ciq-dashed-1",
                })
              ),
              v.createElement(
                "cq-item",
                { stxtap: "setLine(3,'dashed')" },
                v.createElement("span", {
                  className: "ciq-line-style-option ciq-dashed-3",
                })
              ),
              v.createElement(
                "cq-item",
                { stxtap: "setLine(5,'dashed')" },
                v.createElement("span", {
                  className: "ciq-line-style-option ciq-dashed-5",
                })
              ),
              v.createElement(
                "cq-item",
                { stxtap: "setLine(0,'none')", class: "ciq-none" },
                "None"
              )
            ));
        }
        sortDrawings(e) {
          return e.sort((e, t) => (e.label > t.label ? 1 : -1));
        }
        render() {
          this.buildLists();
          const { magnet: e } = this.context.stx.preferences,
            t = `ciq-mini-widget ciq-magnet \n\t\t\t${
              e ? "active" : ""
            } \n\t\t\t${e > 1 ? "" : "strong"}`,
            a = v.createElement(
              v.Fragment,
              null,
              v.createElement(
                "div",
                { "cq-section": "true" },
                v.createElement("div", { className: "ciq-heading" }, "Dev 1"),
                v.createElement(
                  "span",
                  { stxtap: "toggleActive()", className: "ciq-checkbox" },
                  v.createElement("span", null)
                )
              ),
              v.createElement(
                "cq-line-color",
                {
                  "cq-section": "true",
                  "cq-overrides": "auto",
                  class: "ciq-color",
                  stxbind: "getColor()",
                  stxtap: "pickColor()",
                },
                v.createElement("span", null)
              ),
              v.createElement(
                "cq-line-style",
                { "cq-section": "true" },
                v.createElement(
                  "cq-menu",
                  { class: "ciq-select" },
                  v.createElement("span", {
                    "cq-cvp-line-style": "true",
                    className: "ciq-line ciq-selected",
                  }),
                  this.lineStyleMenu
                )
              )
            ),
            r = v.createElement(
              v.Fragment,
              null,
              v.createElement(
                "div",
                { className: "ciq-wave-template", "cq-section": "true" },
                v.createElement(
                  "div",
                  { className: "ciq-heading" },
                  "WAVE TEMPLATE"
                ),
                v.createElement(
                  "cq-menu",
                  { class: "ciq-select" },
                  v.createElement(
                    "span",
                    { className: "ciq-active-template" },
                    "WAVE TEMPLATE"
                  ),
                  v.createElement(
                    "cq-menu-dropdown",
                    null,
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('template','Grand Supercycle')" },
                      "Grand Supercycle"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('template','Supercycle')" },
                      "Supercycle"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('template','Cycle')" },
                      "Cycle"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('template','Primary')" },
                      "Primary"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('template','Intermediate')" },
                      "Intermediate"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('template','Minor')" },
                      "Minor"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('template','Minute')" },
                      "Minute"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('template','Minuette')" },
                      "Minuette"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('template','Sub-Minuette')" },
                      "Sub-Minuette"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('template','Custom')" },
                      "Custom"
                    )
                  )
                )
              ),
              v.createElement(
                "div",
                { className: "ciq-wave-impulse", "cq-section": "true" },
                v.createElement("div", { className: "ciq-heading" }, "IMPULSE"),
                v.createElement(
                  "cq-menu",
                  { class: "ciq-select" },
                  v.createElement(
                    "span",
                    { className: "ciq-active-impulse" },
                    "IMPULSE"
                  ),
                  v.createElement(
                    "cq-menu-dropdown",
                    null,
                    v.createElement(
                      "cq-item",
                      { stxTap: "update('impulse',null)" },
                      "- - -"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('impulse','I,II,III,IV,V')" },
                      "I II III IV V"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('impulse','i,ii,iii,iv,v')" },
                      "i ii iii iv v"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('impulse','1,2,3,4,5')" },
                      "1 2 3 4 5"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('impulse','A,B,C,D,E')" },
                      "A B C D E"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('impulse','a,b,c,d,e')" },
                      "a b c d e"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('impulse','W,X,Y,X,Z')" },
                      "W X Y X Z"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('impulse','w,x,y,x,z')" },
                      "w x y x z"
                    )
                  )
                )
              ),
              v.createElement(
                "div",
                { className: "ciq-wave-corrective", "cq-section": "true" },
                v.createElement(
                  "div",
                  { className: "ciq-heading" },
                  "CORRECTIVE"
                ),
                v.createElement(
                  "cq-menu",
                  { class: "ciq-select" },
                  v.createElement(
                    "span",
                    { className: "ciq-active-corrective" },
                    "CORRECTIVE"
                  ),
                  v.createElement(
                    "cq-menu-dropdown",
                    null,
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('corrective',null)" },
                      "- - -"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('corrective','A,B,C')" },
                      "A B C"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('corrective','a,b,c')" },
                      "a b c"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('corrective','W,X,Y')" },
                      "W X Y"
                    ),
                    v.createElement(
                      "cq-item",
                      { stxtap: "update('corrective','w,x,y')" },
                      "w x y"
                    )
                  )
                )
              ),
              v.createElement(
                "span",
                {
                  className: "ciq-icon-btn ciq-btn",
                  decoration: "none",
                  stxtap: "update('decoration',null)",
                  "cq-section": "true",
                },
                v.createElement("cq-tooltip", null, "None")
              ),
              v.createElement(
                "span",
                {
                  className: "ciq-icon-btn ciq-btn",
                  decoration: "parentheses",
                  stxtap: "update('decoration','parentheses')",
                  "cq-section": "true",
                },
                v.createElement("cq-tooltip", null, "Parentheses")
              ),
              v.createElement(
                "span",
                {
                  className: "ciq-icon-btn ciq-btn",
                  decoration: "enclosed",
                  stxtap: "update('decoration','enclosed')",
                  "cq-section": "true",
                },
                v.createElement("cq-tooltip", null, "Enclosed")
              ),
              v.createElement(
                "div",
                {
                  className: "ciq-heading ciq-show-lines",
                  "cq-section": "true",
                },
                "Show Lines:",
                " ",
                v.createElement(
                  "span",
                  {
                    stxtap: "toggleLines()",
                    className: "ciq-checkbox ciq-active",
                  },
                  v.createElement("span", null)
                )
              )
            );
          return v.createElement(
            "cq-palette-dock",
            {
              "cq-publish-size-changes": this.props["publish-size-changes"],
              ref: this.paletteDock,
            },
            v.createElement(
              "div",
              { className: "palette-dock-container" },
              v.createElement(
                "cq-drawing-palette",
                {
                  "cq-keystroke-claim": !0,
                  class: "palette-drawing grid palette-hide",
                  docked: "true",
                  orientation: "vertical",
                  "min-height": "300",
                  "cq-drawing-edit": "none",
                },
                v.createElement(
                  "div",
                  { className: "palette-container" },
                  v.createElement("div", { className: "drag-strip" }),
                  v.createElement(
                    "div",
                    { className: "mini-widget-group" },
                    v.createElement(
                      "cq-item",
                      {
                        class: "ciq-mini-widget",
                        "cq-view": "list",
                        stxtap: "changeView('list')",
                      },
                      v.createElement("span", { className: "icon" }),
                      v.createElement("label", null, "List View")
                    ),
                    v.createElement(
                      "cq-item",
                      {
                        class: "ciq-mini-widget",
                        "cq-view": "grid",
                        stxtap: "changeView('grid')",
                      },
                      v.createElement("span", { className: "icon" }),
                      v.createElement("label", null, "Grid View")
                    )
                  ),
                  v.createElement("cq-separator", null),
                  v.createElement(
                    "div",
                    { className: "primary-tool-group" },
                    v.createElement(
                      "cq-item",
                      {
                        class: "ciq-tool active",
                        "cq-tool": "notool",
                        stxtap: "tool()",
                      },
                      v.createElement("span", { className: "icon pointer" }),
                      v.createElement("label", null, "No Tool")
                    ),
                    v.createElement(
                      "cq-item",
                      {
                        class: "ciq-tool",
                        "cq-tool": "measure",
                        stxtap: "tool()",
                      },
                      v.createElement("span", { className: "icon measure" }),
                      v.createElement("label", null, "Measure")
                    ),
                    v.createElement(
                      "cq-undo",
                      { class: "ciq-tool", ref: this.undoButton },
                      v.createElement("span", { className: "icon undo" }),
                      v.createElement("label", null, "Undo")
                    ),
                    v.createElement(
                      "cq-redo",
                      { class: "ciq-tool", ref: this.redoButton },
                      v.createElement("span", { className: "icon redo" }),
                      v.createElement("label", null, "Redo")
                    ),
                    v.createElement(
                      "cq-menu",
                      { class: "ciq-select" },
                      v.createElement(
                        "span",
                        { "cq-tool-group-selection": "true" },
                        "All"
                      ),
                      this.groupDropdown
                    )
                  ),
                  v.createElement("cq-separator", null),
                  v.createElement(
                    "div",
                    { className: "tool-group", "tool-group-filter": "all" },
                    v.createElement(
                      "cq-scroll",
                      { "cq-no-resize": !0 },
                      this.drawingToolItems
                    ),
                    v.createElement("cq-separator", null),
                    v.createElement(
                      "div",
                      { className: "mini-widget-group mini-widget-foot" },
                      v.createElement(
                        "cq-toggle",
                        {
                          class: t,
                          "cq-member": "preferences.magnet",
                          "cq-toggles": "true,75,false",
                          ref: this.magnetToggle,
                        },
                        v.createElement("span", { className: "icon magnet" }),
                        v.createElement("label", null, "Magnet")
                      ),
                      v.createElement(
                        "cq-item",
                        { class: "ciq-mini-widget", stxtap: "clearDrawings()" },
                        v.createElement("span", { className: "icon clear" }),
                        v.createElement("label", null, "Clear Drawings")
                      ),
                      v.createElement(
                        "cq-item",
                        {
                          class: "ciq-mini-widget",
                          stxtap: "restoreDefaultConfig(true)",
                        },
                        v.createElement("span", { className: "icon restore" }),
                        v.createElement(
                          "label",
                          null,
                          "Restore Default Parameters"
                        )
                      )
                    )
                  ),
                  v.createElement("div", { className: "resize-strip" })
                )
              ),
              v.createElement(
                "cq-drawing-settings",
                {
                  ref: this.toolbar,
                  class: "palette-settings",
                  hide: "true",
                  docked: "true",
                  orientation: "horizontal",
                  "min-height": "40",
                  "cq-drawing-edit": "none",
                },
                v.createElement(
                  "div",
                  { className: "palette-container" },
                  v.createElement("div", { className: "drag-strip" }),
                  v.createElement(
                    "div",
                    { className: "drawing-settings-wrapper" },
                    v.createElement(
                      "cq-clickable",
                      {
                        class: "ciq-select ciq-mobile-palette-toggle",
                        stxtap: "togglePalette()",
                      },
                      v.createElement("span", null, "Select Tool")
                    ),
                    v.createElement(
                      "cq-toolbar-settings",
                      null,
                      v.createElement("div", {
                        className: "ciq-active-tool-label ciq-heading",
                      }),
                      v.createElement(
                        "cq-fill-color",
                        {
                          "cq-section": "true",
                          class: "ciq-color",
                          stxbind: "getFillColor()",
                          stxtap: "pickFillColor()",
                        },
                        v.createElement("span", null)
                      ),
                      v.createElement(
                        "div",
                        null,
                        v.createElement(
                          "cq-line-color",
                          {
                            "cq-section": "true",
                            "cq-overrides": "auto",
                            class: "ciq-color",
                            stxbind: "getLineColor()",
                            stxtap: "pickLineColor()",
                          },
                          v.createElement("span", null)
                        ),
                        v.createElement(
                          "cq-line-style",
                          { "cq-section": !0 },
                          v.createElement(
                            "cq-menu",
                            { class: "ciq-select" },
                            v.createElement("span", {
                              "cq-line-style": "true",
                              className: "ciq-line ciq-selected",
                            }),
                            this.lineStyleMenu
                          )
                        )
                      ),
                      v.createElement("cq-cvp-controller", {
                        "cq-section": !0,
                        "cq-cvp-header": "1",
                      }),
                      v.createElement("cq-cvp-controller", {
                        "cq-section": !0,
                        "cq-cvp-header": "2",
                      }),
                      v.createElement("cq-cvp-controller", {
                        "cq-section": !0,
                        "cq-cvp-header": "3",
                      }),
                      v.createElement(
                        "template",
                        { "cq-cvp-controller": "true" },
                        a
                      ),
                      v.createElement(
                        "cq-annotation",
                        { "cq-section": "true" },
                        v.createElement(
                          "cq-annotation-italic",
                          {
                            stxtap: "toggleFontStyle('italic')",
                            class: "ciq-btn",
                            style: { fontStyle: "italic" },
                          },
                          "I"
                        ),
                        v.createElement(
                          "cq-annotation-bold",
                          {
                            stxtap: "toggleFontStyle('bold')",
                            class: "ciq-btn",
                            style: { fontWeight: "bold" },
                          },
                          "B"
                        ),
                        v.createElement(
                          "cq-menu",
                          { class: "ciq-select" },
                          v.createElement(
                            "span",
                            { "cq-font-size": "true" },
                            "12px"
                          ),
                          this.fontSizeMenu
                        ),
                        v.createElement(
                          "cq-menu",
                          { class: "ciq-select" },
                          v.createElement(
                            "span",
                            { "cq-font-family": "true" },
                            "Default"
                          ),
                          this.fontFamilyMenu
                        )
                      ),
                      v.createElement(
                        "cq-clickable",
                        {
                          "cq-fib-settings": !0,
                          "cq-selector": "cq-fib-settings-dialog",
                          "cq-method": "open",
                          "cq-section": "true",
                        },
                        v.createElement("span", {
                          className: "ciq-icon-btn cq-icon-gear",
                        }),
                        v.createElement("cq-tooltip", null)
                      ),
                      v.createElement(
                        "div",
                        {
                          className: "ciq-drawing-edit-only",
                          "cq-section": "true",
                        },
                        v.createElement(
                          "div",
                          {
                            "cq-toolbar-action": "done_edit",
                            stxtap: "DrawingEdit.endEdit('close')",
                            "cq-section": "true",
                          },
                          v.createElement("cq-tooltip", null, "Done Editing")
                        )
                      ),
                      v.createElement("br", {
                        "cq-section": "true",
                        "cq-wave-parameters": "true",
                      }),
                      v.createElement("cq-wave-parameters", {
                        "cq-section": !0,
                      }),
                      v.createElement(
                        "template",
                        { "cq-wave-parameters": "true" },
                        r
                      ),
                      v.createElement(
                        "div",
                        {
                          className: "ciq-drawing-edit-hidden",
                          "cq-section": "true",
                        },
                        v.createElement(
                          "div",
                          {
                            "cq-toolbar-action": "save",
                            stxtap: "saveConfig()",
                            "cq-section": "true",
                          },
                          v.createElement("div", {
                            "cq-toolbar-dirty": "true",
                          }),
                          v.createElement("cq-tooltip", null, "Save Config")
                        ),
                        v.createElement(
                          "div",
                          {
                            "cq-toolbar-action": "restore",
                            stxtap: "restoreDefaultConfig()",
                            "cq-section": "true",
                          },
                          v.createElement("cq-tooltip", null, "Restore Config")
                        )
                      )
                    ),
                    v.createElement(
                      "cq-measure",
                      null,
                      v.createElement("span", { className: "mMeasure" })
                    )
                  ),
                  v.createElement("div", { className: "resize-strip" })
                )
              )
            )
          );
        }
      }
      N.contextType = P.u;
      class V extends v.Component {
        render() {
          const { footerRange: e } = this.context.config;
          if (!e) return null;
          const t = (e) => e && JSON.stringify(e),
            a = e.map(
              ({
                label: e,
                multiplier: a,
                base: r,
                interval: n,
                period: i,
                timeUnit: o,
                available: l,
              }) => {
                const s = `set(${a}, ${t(r)}, ${n}, ${i}, ${t(o)})`,
                  c = l ? "" : "hide-sm";
                return v.createElement(
                  "div",
                  { stxtap: s, className: c, key: e },
                  e
                );
              }
            );
          return v.createElement(
            v.Fragment,
            null,
            v.createElement("cq-show-range", null, a)
          );
        }
      }
      V.contextType = P.u;
      class z extends v.Component {
        componentDidMount() {
          setTimeout(() => {
            a.e(6526)
              .then(a.t.bind(a, 10708, 23))
              .then((e) => {
                (r.CIQ.Share.html2canvasLocation = "dist"),
                  (window.html2canvas = e.default);
              })
              .catch((e) =>
                console.error(
                  "Error: failed to load html2canvas for screen sharing"
                )
              );
          }, 1e3);
        }
        render() {
          return v.createElement(
            "cq-share-button",
            null,
            v.createElement("div", { stxtap: "tap();" }, "Share")
          );
        }
      }
      class q extends v.Component {
        componentDidMount() {
          const { footerShare: e } = this.context.config;
          e &&
            !r.CIQ.Share &&
            console.warn(
              "Share is set true in configuration but share is not available in license. Set config.footerShare to false to disable this warning"
            );
        }
        render() {
          const { footerShare: e } = this.context.config,
            t = !!r.CIQ.Share,
            a = v.createElement(
              "div",
              { className: "ciq-footer full-screen-hide" },
              e && t && v.createElement(z, null),
              v.createElement(V, null)
            );
          return this.context.stx && a;
        }
      }
      q.contextType = P.u;
      var H = a(94280);
      class _ extends v.Component {
        constructor() {
          super(),
            (this.templateRef = v.createRef()),
            (this.viewsRef = v.createRef());
        }
        componentDidMount() {
          var e = this.viewsRef.current;
          (e.params = {}),
            (e.template = this.templateRef.current),
            e.initialize();
        }
        render() {
          return v.createElement(
            "cq-menu",
            { class: "ciq-menu ciq-views collapse" },
            v.createElement("span", null, "Views"),
            v.createElement(
              "cq-menu-dropdown",
              null,
              v.createElement(
                "cq-views",
                { ref: this.viewsRef },
                v.createElement("cq-heading", null, "Saved Views"),
                v.createElement(
                  "cq-views-content",
                  null,
                  v.createElement(
                    "template",
                    { "cq-view": "", ref: this.templateRef },
                    v.createElement(
                      "cq-item",
                      null,
                      v.createElement("cq-label", null),
                      v.createElement("div", {
                        className: "ciq-icon ciq-close",
                      })
                    )
                  )
                ),
                v.createElement("cq-separator", { "cq-partial": !0 }),
                v.createElement(
                  "cq-view-save",
                  null,
                  v.createElement(
                    "cq-item",
                    null,
                    v.createElement("cq-plus", null),
                    "Save View"
                  )
                )
              )
            )
          );
        }
      }
      _.contextType = P.u;
      var Y = a(6448),
        j = a(61895),
        K = a(13409),
        W = a(56177),
        G = a(43190),
        Q = (a(71409), a(78571)),
        Z = a(2687),
        J = a.n(Z),
        X = a(95915),
        $ = a.n(X),
        ee = a(39614);
      const te = (e) => ({
          DT: new Date(e.candleDateTime),
          Open: e.openingPrice,
          Close: e.tradePrice,
          High: e.highPrice,
          Low: e.lowPrice,
          Volume: e.candleAccTradeVolume,
        }),
        ae = (e, t) =>
          e ? (t ? A.ZT.NIGHT : A.ZT.DAY) : t ? A.ZT.GLOBAL_NIGHT : A.ZT.GLOBAL;
      var re = Object.defineProperty,
        ne = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? re(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class ie extends v.Component {
        constructor() {
          super(),
            ne(this, "context"),
            ne(this, "themesRef"),
            ne(this, "menuEl"),
            ne(this, "menuItems"),
            (this.themesRef = v.createRef()),
            (this.menuEl = v.createRef());
        }
        componentDidMount() {
          const e = this.themesRef.current,
            t = "kr" === this.props.country,
            a = this.props.darkMode,
            r = this.props.containerType === A.dI.MOBILE,
            n = ae(t, a),
            i = t
              ? r
                ? { [A.ZT.DAY]: A.pN[0], [A.ZT.MELONA]: A.pN[1] }
                : {
                    [A.ZT.DAY]: A.pN[0],
                    [A.ZT.NIGHT]: A.pN[2],
                    [A.ZT.MELONA]: A.pN[1],
                  }
              : { [A.ZT.GLOBAL]: A.pN[0], [A.ZT.GLOBAL_NIGHT]: A.pN[2] };
          e &&
            (e.initialize({ builtInThemes: i, defaultTheme: n }),
            this.props.setContext({ themesRef: this.themesRef }));
        }
        componentDidUpdate(e) {
          r.CIQ.UI.BaseComponent.buildReverseBindings(this.menuEl.current);
        }
        getMenuItems() {
          const e = this,
            { items: t, pluginsInstalled: a = {} } = this.props || {};
          return t
            ? ((this.menuItems = t.map(function (
                { label: t, action: n, option: i, type: o, required: l },
                c
              ) {
                if ("heading" === o)
                  return v.createElement("cq-heading", { key: t }, t);
                if ("separator" === o)
                  return v.createElement("cq-separator", { key: c });
                if ("checkbox" === o)
                  return !l || a[l] || r.CIQ[l]
                    ? v.createElement(
                        "cq-item",
                        {
                          stxsetget: n,
                          key: t,
                          onClick: () => {
                            (0, s.A)("거래소", "차트", "차트", {
                              category: "차트설정",
                              eventDetail: "차트 유형",
                              pageDetail: t,
                            });
                          },
                        },
                        t,
                        v.createElement(
                          "span",
                          { className: "ciq-checkbox ciq-active" },
                          v.createElement("span", null)
                        )
                      )
                    : null;
                if ("radio" === o)
                  return v.createElement(
                    "cq-item",
                    {
                      key: t,
                      onClick: () => {
                        (0, s.A)("거래소", "차트", "차트", {
                          category: "차트설정",
                          eventDetail: "chart preferences",
                          pageDetail: t,
                        });
                      },
                    },
                    v.createElement(
                      "div",
                      { stxsetget: n },
                      t,
                      v.createElement(
                        "span",
                        { className: "ciq-radio" },
                        v.createElement("span", null)
                      )
                    )
                  );
                if ("timezone" === o)
                  return v.createElement(
                    "cq-item",
                    { key: o },
                    v.createElement(
                      "cq-clickable",
                      {
                        "cq-selector": "cq-timezone-dialog",
                        "cq-method": "open",
                      },
                      "Change Timezone"
                    )
                  );
                if ("languages" === o)
                  return v.createElement(
                    "cq-item",
                    { stxsetget: "Layout.Language()", key: o },
                    v.createElement("cq-flag", null),
                    v.createElement("cq-language-name", null, "Change Language")
                  );
                if ("themes" === o)
                  return v.createElement(
                    "cq-themes",
                    { ref: e.themesRef, key: o },
                    v.createElement(
                      "cq-themes-builtin",
                      { "cq-no-close": !0 },
                      v.createElement(
                        "template",
                        null,
                        v.createElement("cq-item", null)
                      )
                    ),
                    v.createElement(
                      "cq-themes-custom",
                      { "cq-no-close": !0 },
                      v.createElement(
                        "template",
                        null,
                        v.createElement(
                          "cq-theme-custom",
                          null,
                          v.createElement(
                            "cq-item",
                            null,
                            v.createElement("cq-label", null),
                            v.createElement("cq-close", null)
                          )
                        )
                      )
                    ),
                    v.createElement("cq-separator", { "cq-partial": !0 }),
                    v.createElement(
                      "cq-item",
                      { stxtap: "newTheme()" },
                      v.createElement("cq-plus", null),
                      t
                    )
                  );
              })),
              this.menuItems)
            : null;
        }
        render() {
          return v.createElement(
            "cq-menu",
            { class: "ciq-menu ciq-display collapse", ref: this.menuEl },
            v.createElement(oe, null),
            v.createElement("cq-menu-dropdown", null, this.getMenuItems())
          );
        }
      }
      const oe = () => {
          const { t: e } = (0, K.B)("exchange");
          return v.createElement("span", null, e("charts.settings"));
        },
        le = (0, j.createSelector)([W.KY, G.bg], (e, t) => ({
          country: e,
          darkMode: t,
        }));
      var se = (0, Y.Ng)(le, null)(ie);
      class ce extends HTMLElement {
        connectedCallback() {
          setTimeout(() => this.initInner());
        }
        initInner() {
          this.firstChild ||
            (this.innerHTML =
              '\n\t\t\t\t<cq-study-legend cq-no-close>\n\t\t\t\t\t<cq-section-dynamic>\n\t\t\t\t\t\t<cq-study-legend-content>\n\t\t\t\t\t\t\t<cq-heading>Current Studies</cq-heading>\n\t\t\t\t\t\t\t<template id="currentStudies">\n\t\t\t\t\t\t\t\t<cq-item>\n\t\t\t\t\t\t\t\t\t<cq-label class="click-to-edit"></cq-label>\n\t\t\t\t\t\t\t\t\t<div class="ciq-icon ciq-close"></div>\n\t\t\t\t\t\t\t\t</cq-item>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t</cq-study-legend-content>\n\t\t\t\t\t\t<cq-placeholder>\n\t\t\t\t\t\t\t<div stxtap="Layout.clearStudies()" class="ciq-btn sm">Clear All</div>\n\t\t\t\t\t\t</cq-placeholder>\t\n\t\t\t\t\t</cq-section-dynamic>\n\t\t\t\t</cq-study-legend>\n\t\t\t');
        }
      }
      customElements.define("cq-study-legend-container", ce);
      class de extends v.Component {
        constructor() {
          super(), (this.studiesRef = v.createRef());
        }
        componentDidMount() {
          const e = this.studiesRef.current,
            { includeOnly: t = [], exclude: a = [] } = this.props.filter || {},
            n = {
              template: "#studies",
              excludedStudies: Object.entries(
                r.CIQ.Studies.studyLibrary
              ).reduce(
                (e, [r, { name: n }]) =>
                  t.length
                    ? (t.includes(n) || (e[r] = n), e)
                    : a.length
                    ? (a.includes(n) && (e[r] = n), e)
                    : e,
                {}
              ),
            };
          e.initialize(n);
        }
        render() {
          return v.createElement(
            "cq-menu",
            { class: "ciq-menu ciq-studies collapse" },
            v.createElement(ue, null),
            v.createElement(
              "cq-menu-dropdown",
              { "cq-no-scroll": !0 },
              v.createElement("cq-study-legend-container", null),
              this.props.plugins.scriptIQ &&
                r.CIQ.Scripting &&
                v.createElement(
                  v.Fragment,
                  null,
                  v.createElement("cq-heading", null, "ScriptIQ"),
                  v.createElement(
                    "cq-item",
                    { onClick: this.context.resize },
                    v.createElement(
                      "cq-clickable",
                      {
                        "cq-selector": "cq-scriptiq-editor",
                        "cq-method": "open",
                      },
                      "New Script"
                    )
                  ),
                  v.createElement(
                    "cq-scriptiq-menu",
                    null,
                    v.createElement(
                      "cq-scriptiq-content",
                      null,
                      v.createElement(
                        "template",
                        null,
                        v.createElement(
                          "cq-item",
                          null,
                          v.createElement("cq-label", null),
                          v.createElement(
                            "div",
                            null,
                            v.createElement("span", { className: "ciq-edit" }),
                            v.createElement("span", {
                              className: "ciq-icon ciq-close",
                            })
                          )
                        )
                      )
                    )
                  ),
                  v.createElement("cq-separator", null)
                ),
              v.createElement(ue, { isHeading: !0 }),
              " ",
              v.createElement(
                "cq-scroll",
                { "cq-no-maximize": "true" },
                v.createElement(
                  "cq-studies",
                  { ref: this.studiesRef },
                  v.createElement(
                    "cq-studies-content",
                    null,
                    v.createElement(
                      "template",
                      { id: "studies" },
                      v.createElement(
                        "cq-item",
                        null,
                        v.createElement("cq-label", null)
                      )
                    )
                  )
                )
              )
            )
          );
        }
      }
      const ue = ({ isHeading: e }) => {
        const { t: t } = (0, K.B)("exchange");
        return e
          ? v.createElement("cq-heading", null, t("charts.indicators"))
          : v.createElement("span", null, t("charts.indicators"));
      };
      de.contextType = P.u;
      var me = a(56941),
        he = Object.defineProperty,
        pe = Object.defineProperties,
        ge = Object.getOwnPropertyDescriptors,
        Ce = Object.getOwnPropertySymbols,
        Te = Object.prototype.hasOwnProperty,
        be = Object.prototype.propertyIsEnumerable,
        fe = (e, t, a) =>
          t in e
            ? he(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a);
      class ye extends v.Component {
        constructor() {
          super(),
            (this.state = { activeEvent: "none" }),
            (this.markerImplementation = {}),
            (this.menuEl = v.createRef());
        }
        componentDidMount() {
          const { UIContext: e, stx: t } = this.context;
          this.markerImplementation = new me.MarkersSample(t);
          const a = this,
            r = {
              show(e, t) {
                a.setState({ activeEvent: t }),
                  a.markerImplementation.hideMarkers(),
                  a.markerImplementation.showMarkers(t.replace("none", ""));
              },
            };
          e.advertiseAs(r, "Markers");
        }
        componentDidUpdate() {
          me.CIQ.UI.BaseComponent.buildReverseBindings(this.menuEl.current);
        }
        render() {
          const { activeEvent: e } = this.state,
            { menuEvents: t, plugins: a } = this.context.config;
          if (!t) return null;
          const r = (t || []).map((t, a) => {
            const r = {
              display:
                t.required && !this.markerImplementation[t.required]
                  ? "none"
                  : "",
            };
            return v.createElement(
              ve,
              ((n = ((e, t) => {
                for (var a in t || (t = {})) Te.call(t, a) && fe(e, a, t[a]);
                if (Ce) for (var a of Ce(t)) be.call(t, a) && fe(e, a, t[a]);
                return e;
              })({}, t)),
              (i = { selected: e === t.markertype, key: a, style: r }),
              pe(n, ge(i)))
            );
            var n, i;
          });
          return v.createElement(
            "cq-menu",
            { class: "ciq-menu stx-markers collapse", ref: this.menuEl },
            v.createElement("span", null, "Events"),
            v.createElement(
              "cq-menu-dropdown",
              { ref: this.markerDropdown },
              r,
              a &&
                a.timeSpanEvents &&
                me.CIQ.UI.TimeSpanEvent &&
                v.createElement(
                  "div",
                  { className: "timespanevent-ui" },
                  v.createElement("cq-separator", null),
                  v.createElement("cq-heading", null, "Panel Events"),
                  v.createElement(
                    "cq-item",
                    {
                      class: "span-event",
                      stxtap: "TimeSpanEvent.showMarkers('Order')",
                      "cq-no-close": !0,
                    },
                    "Order",
                    v.createElement(
                      "span",
                      { className: "ciq-checkbox ciq-active" },
                      v.createElement("span", null)
                    )
                  ),
                  v.createElement(
                    "cq-item",
                    {
                      class: "span-event",
                      stxtap: "TimeSpanEvent.showMarkers('CEO')",
                      "cq-no-close": !0,
                    },
                    "CEO",
                    v.createElement(
                      "span",
                      { className: "ciq-checkbox ciq-active" },
                      v.createElement("span", null)
                    )
                  ),
                  v.createElement(
                    "cq-item",
                    {
                      class: "span-event",
                      stxtap: "TimeSpanEvent.showMarkers('News')",
                      "cq-no-close": !0,
                    },
                    "News",
                    v.createElement(
                      "span",
                      { className: "ciq-checkbox ciq-active" },
                      v.createElement("span", null)
                    )
                  )
                )
            )
          );
        }
      }
      function ve({ label: e, markertype: t, selected: a, style: r }) {
        return e
          ? v.createElement(
              "cq-item",
              { stxtap: `Markers.show('${t}')`, key: e, style: r },
              e,
              v.createElement(
                "span",
                { className: "ciq-radio " + (a ? "ciq-active" : "") },
                v.createElement("span", null)
              )
            )
          : v.createElement("cq-separator", null);
      }
      ye.contextType = P.u;
      var Se = Object.defineProperty,
        ke = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? Se(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class Pe extends v.PureComponent {
        constructor() {
          super(...arguments), ke(this, "context");
        }
        render() {
          const {
              config: {
                menus: e,
                menuPeriodicity: t,
                menuViews: a,
                menuDisplay: r,
                menuStudies: n,
                menuEvents: i,
                plugins: o,
              } = {},
              pluginsInstalled: l,
              setContext: s,
              containerType: c,
            } = this.context,
            d = {
              menuPeriodicity: v.createElement(H.A, { items: t, key: 1 }),
              menuViews: v.createElement(_, { items: a, key: 2 }),
              menuDisplay: v.createElement(se, {
                items: r,
                setContext: s,
                pluginsInstalled: l,
                containerType: c,
                key: 3,
              }),
              menuStudies: v.createElement(de, {
                plugins: o,
                filter: n,
                key: 4,
              }),
              menuEvents: v.createElement(ye, { items: i, key: 5 }),
            },
            u = (e || []).map((e) => d[e]);
          return v.createElement("div", { className: "ciq-dropdowns" }, u);
        }
      }
      ke(Pe, "contextType", P.u);
      class we extends v.Component {
        render() {
          return v.createElement(
            "cq-toggle",
            {
              class: "ciq-CH",
              "cq-member": "crosshair",
              onClick: () => {
                var e, t;
                (0, s.A)("거래소", "차트", "차트", { category: "십자선" }),
                  null == (t = (e = this.props).callback) || t.call(e);
              },
            },
            v.createElement("span", null)
          );
        }
      }
      var Ae = a(48406),
        Ue = Object.defineProperty,
        Me = (e, t, a) => (
          ((e, t, a) => {
            t in e
              ? Ue(e, t, {
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                  value: a,
                })
              : (e[t] = a);
          })(e, "symbol" != typeof t ? t + "" : t, a),
          a
        );
      class De extends v.Component {
        constructor() {
          super(),
            Me(this, "handleClickFullsize", () => {
              const { code: e } = this.context;
              (0, s.A)("거래소", "차트", "차트", { category: "전체화면" }),
                window.open(`${Ae.P49}?code=${e}`);
            }),
            (this.toggle = v.createRef());
        }
        componentDidMount() {
          const {
            setContext: e,
            stx: t,
            stx: { container: a },
            UIContext: r,
          } = this.context;
          this.toggle.current.registerCallback(function (n) {
            e({ drawingActive: n }),
              a.setHeight(),
              n
                ? t.changeVectorType(this.priorVectorType)
                : ((this.priorVectorType =
                    t.currentVectorParameters.vectorType),
                  t.changeVectorType("")),
              r && r.PaletteDock && r.PaletteDock.setChartDimensions();
          });
        }
        render() {
          const { drawingActive: e, containerType: t } = this.context;
          return v.createElement(
            v.Fragment,
            null,
            t === A.dI.PC &&
              v.createElement(
                "cq-toggle",
                { class: "ciq-fullsize" },
                v.createElement("span", { onClick: this.handleClickFullsize })
              ),
            v.createElement(
              "cq-toggle",
              {
                "cq-member": "drawing",
                class: "ciq-draw " + (e ? "active" : ""),
                ref: this.toggle,
              },
              v.createElement("span", null)
            )
          );
        }
      }
      De.contextType = P.u;
      class xe extends v.Component {
        constructor() {
          super(),
            (this.toggle = v.createRef()),
            (this.state = { headsUp: "", active: !1 }),
            (this.updateHeadsUpValue = this.updateHeadsUpValue.bind(this));
        }
        componentDidMount() {
          this.context.config.headsUpDisplayTypes &&
            r.CIQ.UI.observeProperty(
              "headsUp",
              this.context.stx.layout,
              this.updateHeadsUpValue
            );
        }
        updateHeadsUpValue({ value: e }) {
          this.setState({ headsUp: e });
        }
        componentWillUnmount() {
          this.context.config.headsUpDisplayTypes &&
            r.CIQ.UI.unobserveProperty(
              "headsUp",
              this.context.stx.layout,
              this.updateHeadsUpValue
            );
        }
        render() {
          const { headsUpDisplayTypes: e } = this.context.config,
            { headsUp: t } = this.state;
          return (
            (e &&
              v.createElement(
                "cq-toggle",
                {
                  class: "ciq-HU",
                  "cq-member": "headsUp",
                  "cq-toggles": e.join(",") + ",null",
                  ref: this.toggle,
                },
                v.createElement("span", null),
                v.createElement("cq-tooltip", null, "Info ", t || "off")
              )) ||
            null
          );
        }
      }
      xe.contextType = P.u;
      class Oe extends v.Component {
        constructor() {
          super(),
            (this.state = { sidenavActive: "", sidenavAvailable: !1 }),
            (this.toggleSidenav = v.createRef());
        }
        componentDidMount() {
          const { layout: e } = this.context.stx;
          (this.updateSidenav = this.updateSidenav.bind(this)),
            r.CIQ.UI.observeProperty("sidenav", e, this.updateSidenav),
            this.toggleSidenav.current.registerCallback(() => {});
        }
        componentWillUnmount() {
          const { layout: e } = this.context.stx;
          r.CIQ.UI.unobserveProperty("sidenav", e, this.updateSidenav);
        }
        updateSidenav({ value: e }) {
          this.setState({ sidenavActive: "sidenavOn" === e ? "active" : "" });
        }
        getToggleButtons() {
          if (this.toggles) return this.toggles;
          const {
              headerLeft: { toggles: e },
              headsUpDisplayTypes: t,
            } = this.context.config,
            a = {
              drawing: v.createElement(De, { key: "drawing" }),
              crosshair: v.createElement(we, { key: "crosshair" }),
              info: v.createElement(xe, {
                headsUpDisplayTypes: t,
                key: "info",
              }),
            };
          return (this.toggles = e.map((e) => a[e])), this.toggles;
        }
        render() {
          const { sidenavActive: e } = this.state,
            { sidenavAvailable: t } = this.context,
            a = `ciq-sidenav ${e}`,
            r = `\n\t\t\ticon-toggles\n\t\t\t${
              t ? "sidenav" : "ciq-toggles"
            }\n\t\t\t${e}\n\t\t`;
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "div",
              { className: "sidenav-toggle ciq-toggles" },
              v.createElement(
                "cq-toggle",
                {
                  class: a,
                  "cq-member": "sidenav",
                  "cq-toggles": "sidenavOn,sidenavOff",
                  ref: this.toggleSidenav,
                },
                v.createElement("span", null),
                v.createElement("cq-tooltip", null, "More")
              )
            ),
            v.createElement("div", { className: r }, this.getToggleButtons())
          );
        }
      }
      Oe.contextType = P.u;
      class Ie extends v.Component {
        constructor(e) {
          super(e), (this.toggle = v.createRef());
        }
        componentDidMount() {
          this.setToggleCallback(this.toggle.current);
        }
        setToggleCallback(e) {
          const {
            stx: t,
            UIContext: { topNode: a },
          } = this.context;
          e.registerCallback(function (e) {
            const r = a.querySelector("cq-side-panel"),
              n = r.querySelector(".stx-trade-panel");
            e
              ? (r.open({ selector: ".stx-trade-panel", className: "active" }),
                n.classList.remove("closed"),
                (t.layout.sidenav = "sidenavOff"))
              : (r.close(), n.classList.add("closed"));
          });
        }
        render() {
          const { uiLayout: { sidepanel: e } = {} } = this.context.UIContext;
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "cq-toggle",
              {
                class: "tfc-ui-sidebar stx-trade " + (e ? "active" : ""),
                ref: this.toggle,
              },
              v.createElement("span", null),
              v.createElement("cq-tooltip", null, "Trade")
            )
          );
        }
      }
      Ie.contextType = P.u;
      class Be extends v.PureComponent {
        render() {
          return (this.props.tfc && v.createElement(Ie, null)) || null;
        }
      }
      var Ee = a(6296);
      const Re = () => {
        const { t: e } = (0, K.B)(),
          t = (0, Y.wA)(),
          a = (0, v.useCallback)((e) => {
            e.preventDefault(),
              (0, s.A)("거래소", "차트", "차트", {
                category: "차트타입",
                eventDetail: "트레이딩뷰",
              }),
              (0, s.SO)("거래소", "차트", "차트타입", "선택", "TradingView"),
              t((0, Ee.Uf)());
          }, []);
        return v.createElement(
          "div",
          { className: "chartChange" },
          v.createElement(
            "span",
            { className: "chartChange__item active" },
            v.createElement("input", {
              type: "radio",
              id: "basicChart",
              name: "chartToggle",
              value: "basicChart",
              checked: !0,
              readOnly: !0,
            }),
            v.createElement(
              "label",
              { htmlFor: "basicChart" },
              e("charts.ui.defaultChart")
            )
          ),
          v.createElement(
            "span",
            { className: "chartChange__item" },
            v.createElement("input", {
              type: "radio",
              id: "tradingView",
              name: "chartToggle",
              value: "tradingView",
              onClick: a,
            }),
            v.createElement(
              "label",
              { htmlFor: "tradingView" },
              e("charts.ui.tradingView")
            )
          )
        );
      };
      var Le = a(99583),
        Fe = a(59891);
      const Ne = () => {
        const { stx: e, containerType: t } = (0, v.useContext)(P.u),
          a = (0, Y.d4)(W.G3),
          { t: r } = (0, K.B)(),
          { country: n } = a,
          i = "kr" === n,
          o = t === A.dI.MOBILE,
          [l, c] = (0, v.useState)(),
          d = (0, v.useCallback)(() => {
            if (e) {
              const t = i ? (o ? J()(A.Gm) : J()(A.zR)) : J()(A.FY),
                a = e.exportLayout(!0);
              t.symbols = a.symbols;
              const r = {
                noDataLoad: !1,
                managePeriodicity: !0,
                preserveTicksAndCandleWidth: !1,
                cb: C,
              };
              T(),
                e.importLayout(t, r),
                e.flipChart(!1),
                k()(null == e ? void 0 : e.panels, (t) => {
                  (null == t ? void 0 : t.yAxis) &&
                    e.setYAxisPosition(t.yAxis, null);
                }),
                (0, s.A)("거래소", "차트", "차트", { category: "초기화" });
            }
          }, [e, i]),
          u = (0, v.useCallback)(() => {
            c({
              setPayload: c,
              title: r("charts.ui.resetConfirm.title"),
              body: r("charts.ui.resetConfirm.content"),
              onConfirm: d,
              confirmBtn: r("charts.ui.resetConfirm.confirmReset"),
              cancelBtn: r("charts.ui.resetConfirm.cancelReset"),
            });
          }, [d]);
        return v.createElement(
          v.Fragment,
          null,
          l && o
            ? v.createElement(Fe.A, { payload: l })
            : v.createElement(Le.Ay, { payload: l }),
          v.createElement(
            "span",
            { className: "button-reset", onClick: u },
            r("charts.ui.resetSetting")
          )
        );
      };
      var Ve = Object.defineProperty,
        ze = Object.getOwnPropertySymbols,
        qe = Object.prototype.hasOwnProperty,
        He = Object.prototype.propertyIsEnumerable,
        _e = (e, t, a) =>
          t in e
            ? Ve(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        Ye = (e, t, a) => (_e(e, "symbol" != typeof t ? t + "" : t, a), a);
      class je extends v.Component {
        constructor() {
          super(...arguments),
            Ye(this, "crosshairCallback", () => {
              this.context.containerType === A.dI.MOBILE &&
                (this.context.stx.layout.headsUp = this.context.stx.layout
                  .crosshair
                  ? "static"
                  : null);
            });
        }
        render() {
          const {
              header: e,
              headerLeft: { symbolLookup: t, toggles: a },
              plugins: n,
            } = this.props.config,
            i = this.context.containerType === A.dI.MOBILE,
            o = this.context.containerType === A.dI.FULL,
            l =
              (this.context.containerType,
              A.dI.MINI,
              v.createElement(
                "div",
                { className: "ciq-nav", style: e ? null : { display: "none" } },
                t && v.createElement(x, null),
                -1 !== a.indexOf("drawing") &&
                  v.createElement(De, { key: "drawing" }),
                -1 !== a.indexOf("crosshair") &&
                  v.createElement(we, {
                    key: "crosshair",
                    callback: this.crosshairCallback,
                  }),
                v.createElement(
                  "div",
                  { className: "ciq-menu-section" },
                  v.createElement(Pe, { plugins: n }),
                  n.tfc &&
                    r.CIQ.TFC &&
                    v.createElement(
                      "div",
                      { className: "trade-toggles ciq-toggles" },
                      v.createElement(
                        Be,
                        ((e, t) => {
                          for (var a in t || (t = {}))
                            qe.call(t, a) && _e(e, a, t[a]);
                          if (ze)
                            for (var a of ze(t))
                              He.call(t, a) && _e(e, a, t[a]);
                          return e;
                        })({}, n)
                      )
                    ),
                  v.createElement(Ne, null)
                ),
                !i && !o && v.createElement(Re, null)
              ));
          return this.context.stx && l;
        }
      }
      Ye(je, "contextType", P.u);
      var Ke = Object.defineProperty,
        We = Object.defineProperties,
        Ge = Object.getOwnPropertyDescriptors,
        Qe = Object.getOwnPropertySymbols,
        Ze = Object.prototype.hasOwnProperty,
        Je = Object.prototype.propertyIsEnumerable,
        Xe = (e, t, a) =>
          t in e
            ? Ke(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        $e = (e, t, a) => (Xe(e, "symbol" != typeof t ? t + "" : t, a), a);
      class et extends v.Component {
        constructor() {
          super(),
            $e(this, "sidePanelRef"),
            (this.sidePanelRef = v.createRef());
        }
        componentDidMount() {
          const e = this.sidePanelRef.current,
            { UIContext: t } = this.context;
          if (e) {
            const { resizeMyself: a } = e;
            e.resizeMyself = () => {
              const r = e.nonAnimatedWidth();
              var n;
              (t.uiLayout =
                ((n = ((e, t) => {
                  for (var a in t || (t = {})) Ze.call(t, a) && Xe(e, a, t[a]);
                  if (Qe) for (var a of Qe(t)) Je.call(t, a) && Xe(e, a, t[a]);
                  return e;
                })({}, t.uiLayout)),
                We(n, Ge({ sidepanelWidth: r })))),
                a.call(e);
            };
          }
        }
        render() {
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "cq-side-panel",
              { ref: this.sidePanelRef },
              this.props.children
            )
          );
        }
      }
      $e(et, "contextType", P.u);
      class tt extends v.PureComponent {
        render() {
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "cq-chart-title",
              null,
              v.createElement("cq-symbol-description", null)
            )
          );
        }
      }
      class at extends v.PureComponent {
        render() {
          const {
              config: { menuPeriodicity: e, chartControlGroup: t },
            } = this.context,
            a = {
              chart_lookup: v.createElement(x, { key: "lookup" }),
              toggle_drawing: v.createElement(De, { key: "drawing" }),
              toggle_crosshair: v.createElement(we, { key: "crosshair" }),
              menu_periodicity: v.createElement(H.A, {
                items: e,
                key: "periodicity",
              }),
            },
            r = (t || []).map((e) => a[e]);
          return (
            (r.length &&
              v.createElement(
                "cq-chartcontrol-group",
                { class: "full-screen-show" },
                r
              )) ||
            null
          );
        }
      }
      at.contextType = P.u;
      var rt,
        nt,
        it,
        ot = Object.defineProperty;
      class lt extends v.Component {
        constructor() {
          super(), (this.legend = v.createRef());
        }
        componentDidMount() {
          let e;
          var t = this.props;
          "overlays" === t.only
            ? (e = "cq-overlays-only")
            : "panel" === t.only
            ? (e = "cq-panel-only")
            : "custom" === t.custom && (e = "cq-custom-removal-only"),
            this.legend.current.setAttribute(e, !0),
            this.legend.current.begin();
        }
        render() {
          let e,
            t = this.props;
          return (
            t.clearAll &&
              (e = v.createElement(
                "cq-placeholder",
                null,
                v.createElement(
                  "div",
                  { stxtap: "Layout.clearStudies()", className: "ciq-btn sm" },
                  "Clear All"
                )
              )),
            v.createElement(
              "cq-study-legend",
              { "cq-no-close": !0, ref: this.legend },
              v.createElement(
                "cq-section-dynamic",
                null,
                v.createElement(
                  "cq-study-legend-content",
                  null,
                  v.createElement("cq-heading", null, t.heading),
                  v.createElement(
                    "template",
                    { id: "currentStudies" },
                    v.createElement(
                      "cq-item",
                      null,
                      v.createElement("cq-label", {
                        className: "click-to-edit ciq-edit",
                      }),
                      t.icon &&
                        v.createElement("span", { className: "ciq-edit" }),
                      v.createElement("div", {
                        className: "ciq-icon ciq-close",
                      })
                    )
                  )
                ),
                e
              )
            )
          );
        }
      }
      (rt = lt),
        (nt = "contextType"),
        (it = P.u),
        ((e, t, a) => {
          t in e
            ? ot(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a);
        })(rt, "symbol" != typeof nt ? nt + "" : nt, it);
      class st extends v.Component {
        constructor() {
          super(), (this.state = { position: { top: 0, left: 0 } });
        }
        componentDidMount() {
          const { stx: e } = this.context;
          (this.listener = e.addEventListener(
            "layout",
            this.updateOverlayPosition.bind(this)
          )),
            this.updateOverlayPosition();
        }
        componentWillUnmount() {
          this.context.stx.removeEventListener(this.listener);
        }
        updateOverlayPosition() {
          const { top: e, left: t } = this.context.stx.chart.panel;
          this.setState({ position: { top: e, left: t } });
        }
        render() {
          const { top: e, left: t } = this.state.position;
          return v.createElement(
            "div",
            { className: "title-overlay-controls", style: { top: e, left: t } },
            v.createElement(tt, null),
            !!Object.keys(this.context.stx.overlays).length &&
              v.createElement(lt, {
                clearAll: !1,
                heading: "Overlays",
                icon: !0,
                only: "overlays",
              })
          );
        }
      }
      st.contextType = P.u;
      class ct extends v.Component {
        render() {
          return v.createElement("cq-loader", null);
        }
      }
      class dt extends v.Component {
        constructor() {
          super(), (this.orderBookRef = v.createRef());
        }
        componentDidMount() {
          const { marketDepth: e } = this.context.stx,
            t = this.orderBookRef.current;
          this.props.addToChart &&
            (e.marketDepth.container.appendChild(t),
            (e.marketDepth.orderbook = t));
        }
        render() {
          const {
            closeButton: e,
            price: t,
            size: a,
            totalSize: r,
            amount: n,
            totalAmount: i,
          } = this.props;
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "cq-orderbook",
              { "cq-active": !0, ref: this.orderBookRef },
              e && v.createElement("cq-close", null),
              v.createElement(
                "cq-orderbook-table",
                { reverse: !0 },
                v.createElement(
                  "cq-scroll",
                  { "cq-no-claim": !0 },
                  v.createElement("cq-orderbook-bids", null)
                )
              ),
              v.createElement(
                "cq-orderbook-table",
                null,
                v.createElement(
                  "cq-scroll",
                  { "cq-no-claim": !0 },
                  v.createElement("cq-orderbook-asks", null)
                )
              ),
              v.createElement(
                "template",
                null,
                v.createElement(
                  "cq-item",
                  { "cq-size-shading": !0 },
                  t && v.createElement("div", { col: "price" }, "Price"),
                  a && v.createElement("div", { col: "size" }, "Size"),
                  r &&
                    v.createElement("div", { col: "cum_size" }, "Total Size"),
                  n && v.createElement("div", { col: "amount" }, "Amount"),
                  i &&
                    v.createElement(
                      "div",
                      { col: "cum_amount" },
                      "Total Amount"
                    )
                )
              )
            )
          );
        }
      }
      dt.contextType = P.u;
      class ut extends v.Component {
        constructor(e) {
          super(e), (this.toggle = v.createRef());
        }
        componentDidMount() {
          const e = this.toggle.current,
            { marketDepth: t } = this.context.stx.marketDepth;
          t.container.appendChild(e),
            e.registerCallback(() => {
              t.orderbook.open();
            }, !1);
        }
        render() {
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "cq-toggle",
              { class: "cq-orderbook-toggle", ref: this.toggle },
              v.createElement("cq-tooltip", null, "Orderbook")
            )
          );
        }
      }
      ut.contextType = P.u;
      var mt = Object.defineProperty,
        ht = Object.getOwnPropertySymbols,
        pt = Object.prototype.hasOwnProperty,
        gt = Object.prototype.propertyIsEnumerable,
        Ct = (e, t, a) =>
          t in e
            ? mt(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a);
      class Tt extends v.Component {
        render() {
          const { pluginsInstalled: e = {} } = this.context,
            { cryptoiq: t } = this.props;
          return v.createElement(
            v.Fragment,
            null,
            t &&
              t.orderBook &&
              t.orderBook.addToChart &&
              e.cryptoiq &&
              v.createElement(
                v.Fragment,
                null,
                v.createElement(
                  dt,
                  ((e, t) => {
                    for (var a in t || (t = {}))
                      pt.call(t, a) && Ct(e, a, t[a]);
                    if (ht)
                      for (var a of ht(t)) gt.call(t, a) && Ct(e, a, t[a]);
                    return e;
                  })({}, t.orderBook)
                ),
                v.createElement(ut, null)
              )
          );
        }
      }
      Tt.contextType = P.u;
      var bt = a(66898),
        ft = Object.defineProperty,
        yt = Object.getOwnPropertySymbols,
        vt = Object.prototype.hasOwnProperty,
        St = Object.prototype.propertyIsEnumerable,
        kt = (e, t, a) =>
          t in e
            ? ft(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a);
      class Pt extends HTMLElement {
        disconnectedCallback() {
          this.stx.destroy();
        }
        startChartUI({
          stx: e,
          quoteFeed: t,
          quoteFeedBehavior: a = {},
          addOns: r,
          marketFactory: n,
        }) {
          if (!e)
            throw new Error(
              "CIQ.ChartEngine has not been created!\nCheck that you have passed an chartiq engine into this function."
            );
          (this.stx = e),
            t && e.attachQuoteFeed(t, a),
            n && e.setMarketFactory(n),
            this.configureAddOns(r),
            this.startComponentUI(e);
        }
        configureAddOns(e) {
          const { stx: t } = this;
          Object.entries(e)
            .filter(([, e]) => !!e)
            .forEach(([e, a]) => {
              const r = e[0].toUpperCase() + e.substr(1);
              try {
                if (!bt.CIQ[r])
                  return void (
                    bt.CIQ.debug &&
                    console.log(
                      `Plugin ${r} not availble for ${e} with params:`,
                      a
                    )
                  );
                new bt.CIQ[r](
                  ((e, t) => {
                    for (var a in t || (t = {}))
                      vt.call(t, a) && kt(e, a, t[a]);
                    if (yt)
                      for (var a of yt(t)) St.call(t, a) && kt(e, a, t[a]);
                    return e;
                  })({ stx: t }, "object" == typeof a ? a : {})
                );
              } catch (t) {
                bt.CIQ.debug &&
                  console.error(
                    "Error configuring " + e + " using params ",
                    a,
                    "error",
                    t
                  );
              }
            });
        }
        startComponentUI(e) {
          let t = bt.CIQ.UI.getMyContext(e.container);
          if (!t) {
            const a = this.querySelector("cq-context, [cq-context]");
            if (!a)
              throw new Error(
                "Error: failed to find context container for ",
                this
              );
            t = new bt.CIQ.UI.Context(e, a);
          }
          (t.stx = this.stx),
            new bt.CIQ.UI.StudyEdit(null, t),
            new bt.CIQ.UI.KeystrokeHub(document.body, t, {
              cb: bt.CIQ.UI.KeystrokeHub.defaultHotKeys,
            }),
            this.setHeight(),
            bt.CIQ.I18N.wordlists &&
              bt.CIQ.I18N.localize(e, e.preferences.language),
            this.restorePreferences(e),
            e.addEventListener("layout", this.saveLayout),
            e.addEventListener("symbolChange", this.saveLayout),
            e.addEventListener("preferences", this.savePreferences),
            e.addEventListener("newChart", this.retoggleEvents),
            e.addEventListener("drawing", this.saveDrawings);
        }
        restoreLayout(e, t) {
          var a = bt.CIQ.localStorage.getItem("myChartLayout"),
            r = this;
          e.importLayout(JSON.parse(a), {
            managePeriodicity: !0,
            cb: function () {
              r.restoreDrawings(e, e.chart.symbol), t && t();
            },
          });
        }
        saveLayout(e) {
          var t = JSON.stringify(e.stx.exportLayout(!0));
          bt.CIQ.localStorageSetItem("myChartLayout", t);
        }
        restorePreferences(e) {
          var t = bt.CIQ.localStorage.getItem("myChartPreferences");
          t && e.importPreferences(JSON.parse(t));
        }
        savePreferences(e) {
          bt.CIQ.localStorageSetItem(
            "myChartPreferences",
            JSON.stringify(e.stx.exportPreferences())
          );
        }
        retoggleEvents(e) {
          var t = document.querySelector(".stx-markers .ciq-radio.ciq-active");
          t && bt.CIQ.UI.BaseComponent.activate(t.parentElement);
        }
        saveDrawings(e) {
          var t = e.stx.exportDrawings();
          0 === t.length
            ? bt.CIQ.localStorage.removeItem(e.symbol)
            : bt.CIQ.localStorageSetItem(e.symbol, JSON.stringify(t));
        }
        restoreDrawings(e, t) {
          var a = bt.CIQ.localStorage.getItem(t);
          if (null !== a) {
            var r = JSON.parse(a);
            r && (e.importDrawings(r), e.draw());
          }
        }
        setHeight() {
          const {
            parentElement: { clientHeight: e },
          } = this;
          (this.style.height = e + "px"),
            (this.style.height = e - (this.drawingToolbar ? 45 : 0) + "px");
        }
        get drawingToolbar() {
          return JSON.parse(this.getAttribute("toolbar-active"));
        }
      }
      (bt.CIQ.UI.ChartIQChartContainer = Pt),
        customElements.define("chartiq-chart-container", Pt);
      var wt = Object.defineProperty,
        At = Object.getOwnPropertySymbols,
        Ut = Object.prototype.hasOwnProperty,
        Mt = Object.prototype.propertyIsEnumerable,
        Dt = (e, t, a) =>
          t in e
            ? wt(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a);
      class xt extends v.Component {
        constructor(e) {
          super(e),
            (this.engineRef = v.createRef()),
            (this.orderbookRef = v.createRef());
        }
        componentDidMount() {
          this.createChartAndUI(this.engineRef.current);
        }
        createChartAndUI(e) {
          const {
              chartConfig: t,
              addOns: a,
              quoteFeed: n,
              quoteFeedBehavior: i,
              marketFactory: o,
            } = this.props,
            l = new r.CIQ.ChartEngine(
              ((e, t) => {
                for (var a in t || (t = {})) Ut.call(t, a) && Dt(e, a, t[a]);
                if (At) for (var a of At(t)) Mt.call(t, a) && Dt(e, a, t[a]);
                return e;
              })({ container: e }, t)
            );
          return (
            this.context.setChartEngine(l),
            (e.stxx = l),
            (e.CIQ = r.CIQ),
            e.startChartUI({
              stx: l,
              quoteFeed: n,
              quoteFeedBehavior: i,
              addOns: a,
              marketFactory: o,
            }),
            l
          );
        }
        render() {
          const { stx: e, drawingActive: t } = this.context,
            { headsUpDisplayTypes: a } = this.props;
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "div",
              { className: "ciq-chart " + (t ? "toolbar-on" : "") },
              e &&
                v.createElement(
                  v.Fragment,
                  null,
                  v.createElement(N, null),
                  v.createElement(F, null)
                ),
              v.createElement(
                "chartiq-chart-container",
                {
                  class: "chartContainer",
                  "defer-start": "true",
                  ref: this.engineRef,
                  "toolbar-active": !!t,
                },
                e && v.createElement(st, { refProp: this.engineRef }),
                v.createElement(ct, null),
                e && v.createElement(L, null),
                this.props.children
              ),
              v.createElement(E, null)
            )
          );
        }
      }
      xt.contextType = P.u;
      class Ot extends v.Component {
        render() {
          return v.createElement(
            "cq-dialog",
            null,
            v.createElement(
              "cq-view-dialog",
              null,
              v.createElement("h4", null, "Save View"),
              v.createElement("div", {
                stxtap: "close()",
                className: "ciq-icon ciq-close",
              }),
              v.createElement(
                "div",
                { style: { textAlign: "center", marginTop: "10px" } },
                v.createElement("i", null, "Enter name of view:"),
                v.createElement(
                  "p",
                  null,
                  v.createElement("input", {
                    spellCheck: "false",
                    autoCapitalize: "off",
                    autoCorrect: "off",
                    autoComplete: "off",
                    maxLength: "40",
                    placeholder: "Name",
                  }),
                  v.createElement("br", null)
                ),
                v.createElement(
                  "span",
                  { className: "ciq-btn", stxtap: "save()" },
                  "Save"
                )
              )
            )
          );
        }
      }
      class It extends v.Component {
        render() {
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "cq-dialog",
              null,
              v.createElement(
                "cq-study-dialog",
                { "cq-study-axis": !0, "cq-study-panel": !0 },
                v.createElement("h4", { className: "title" }, "Study"),
                v.createElement(
                  "cq-scroll",
                  { "cq-no-maximize": !0 },
                  v.createElement(
                    "cq-study-inputs",
                    null,
                    v.createElement(
                      "template",
                      { "cq-study-input": "true", className: "cq-study-input" },
                      v.createElement(
                        "cq-study-input",
                        null,
                        v.createElement("div", { className: "ciq-heading" }),
                        v.createElement(
                          "div",
                          { className: "stx-data" },
                          v.createElement(
                            "template",
                            { "cq-menu": "true", className: "cq-menu" },
                            v.createElement(
                              "cq-menu",
                              { class: "ciq-select" },
                              v.createElement("cq-selected", null),
                              v.createElement("cq-menu-dropdown", {
                                "cq-lift": !0,
                              })
                            )
                          )
                        )
                      ),
                      v.createElement("hr", null)
                    )
                  ),
                  v.createElement(
                    "cq-study-outputs",
                    null,
                    v.createElement(
                      "template",
                      { "cq-study-output": "true" },
                      v.createElement(
                        "cq-study-output",
                        null,
                        v.createElement("div", { className: "ciq-heading" }),
                        v.createElement("cq-swatch", { "cq-overrides": "auto" })
                      ),
                      v.createElement("hr", null)
                    )
                  ),
                  v.createElement(
                    "cq-study-parameters",
                    null,
                    v.createElement(
                      "template",
                      { "cq-study-parameters": "true" },
                      v.createElement(
                        "cq-study-parameter",
                        null,
                        v.createElement("div", { className: "ciq-heading" }),
                        v.createElement(
                          "div",
                          { className: "stx-data" },
                          v.createElement("cq-swatch", {
                            "cq-overrides": "auto",
                          }),
                          v.createElement(
                            "template",
                            { "cq-menu": "true" },
                            v.createElement(
                              "cq-menu",
                              { class: "ciq-select" },
                              v.createElement("cq-selected", null),
                              v.createElement("cq-menu-dropdown", {
                                "cq-lift": !0,
                              })
                            )
                          )
                        )
                      ),
                      v.createElement("hr", null)
                    )
                  )
                ),
                v.createElement(
                  "div",
                  { className: "ciq-dialog-cntrls" },
                  v.createElement(
                    "div",
                    { className: "ciq-btn", stxtap: "close()" },
                    "Done"
                  )
                )
              )
            )
          );
        }
      }
      class Bt extends v.Component {
        render() {
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(
              "cq-dialog",
              null,
              v.createElement(
                "cq-fib-settings-dialog",
                null,
                v.createElement("h4", { className: "title" }, "Settings"),
                v.createElement(
                  "cq-scroll",
                  { "cq-no-maximize": !0 },
                  v.createElement(
                    "cq-fibonacci-settings",
                    null,
                    v.createElement(
                      "template",
                      { "cq-fibonacci-setting": "true" },
                      v.createElement(
                        "cq-fibonacci-setting",
                        null,
                        v.createElement("div", { className: "ciq-heading" }),
                        v.createElement(
                          "div",
                          { className: "stx-data" },
                          v.createElement("input", { type: "checkbox" })
                        )
                      )
                    )
                  ),
                  v.createElement(
                    "div",
                    { "cq-custom-fibonacci-setting": "true" },
                    v.createElement("input", {
                      className: "ciq-heading",
                      type: "text",
                    }),
                    "%",
                    v.createElement(
                      "div",
                      { className: "ciq-btn stx-data", stxtap: "add()" },
                      "Add"
                    )
                  )
                ),
                v.createElement(
                  "div",
                  { className: "ciq-dialog-cntrls" },
                  v.createElement(
                    "div",
                    { className: "ciq-btn", stxtap: "close()" },
                    "Done"
                  )
                )
              )
            )
          );
        }
      }
      class Et extends v.Component {
        render() {
          return v.createElement(
            "cq-dialog",
            null,
            v.createElement(
              "cq-aggregation-dialog",
              null,
              v.createElement("h4", { className: "title" }, "_"),
              v.createElement("div", {
                stxtap: "hide()",
                className: "ciq-icon ciq-close",
              }),
              v.createElement(
                "div",
                { style: { textAlign: "center", marginTop: "10px" } },
                v.createElement(
                  "div",
                  { className: "ciqkagi" },
                  v.createElement("i", null, 'Enter value and hit "Enter"'),
                  v.createElement(
                    "p",
                    null,
                    v.createElement("input", {
                      name: "kagi",
                      stxtap: "Layout.setAggregationEdit('kagi')",
                    })
                  )
                ),
                v.createElement(
                  "div",
                  { className: "ciqrenko" },
                  v.createElement("i", null, 'Enter value and hit "Enter"'),
                  v.createElement(
                    "p",
                    null,
                    v.createElement("input", {
                      name: "renko",
                      stxtap: "Layout.setAggregationEdit('renko')",
                    })
                  )
                ),
                v.createElement(
                  "div",
                  { className: "ciqlinebreak" },
                  v.createElement("i", null, 'Enter value and hit "Enter"'),
                  v.createElement(
                    "p",
                    null,
                    v.createElement("input", {
                      name: "priceLines",
                      stxtap: "Layout.setAggregationEdit('priceLines')",
                    })
                  )
                ),
                v.createElement(
                  "div",
                  { className: "ciqrangebars" },
                  v.createElement("i", null, 'Enter value and hit "Enter"'),
                  v.createElement(
                    "p",
                    null,
                    v.createElement("input", {
                      name: "range",
                      stxtap: "Layout.setAggregationEdit('rangebars')",
                    })
                  )
                ),
                v.createElement(
                  "div",
                  { className: "ciqpandf" },
                  v.createElement("i", null, 'Enter box size and hit "Enter"'),
                  v.createElement(
                    "p",
                    null,
                    v.createElement("input", {
                      name: "box",
                      stxtap: "Layout.setAggregationEdit('pandf.box')",
                    })
                  ),
                  v.createElement("i", null, 'Enter reversal and hit "Enter"'),
                  v.createElement(
                    "p",
                    null,
                    v.createElement("input", {
                      name: "reversal",
                      stxtap: "Layout.setAggregationEdit('pandf.reversal')",
                    })
                  )
                ),
                v.createElement("p", null, "or"),
                v.createElement(
                  "div",
                  {
                    className: "ciq-btn",
                    stxtap: "Layout.setAggregationEdit('auto')",
                  },
                  "Auto Select"
                )
              )
            )
          );
        }
      }
      a(42341);
      class Rt extends v.Component {
        render() {
          return v.createElement(
            "cq-dialog",
            null,
            v.createElement(
              "cq-timezone-dialog",
              null,
              v.createElement("h4", { className: "title" }, "Choose Timezone"),
              v.createElement("cq-close", null),
              v.createElement(
                "p",
                null,
                "To set your timezone use the location button below, or scroll through the following list..."
              ),
              v.createElement("p", { className: "currentUserTimeZone" }),
              v.createElement(
                "div",
                { className: "detect" },
                v.createElement(
                  "div",
                  { className: "ciq-btn", stxtap: "removeTimezone()" },
                  "Use My Current Location"
                )
              ),
              v.createElement(
                "div",
                {
                  className: "timezoneDialogWrapper",
                  style: { maxHeight: "360px", overflow: "auto" },
                },
                v.createElement(
                  "ul",
                  null,
                  v.createElement("li", {
                    className: "timezoneTemplate",
                    style: { display: "none", cursor: "pointer" },
                  })
                )
              ),
              v.createElement(
                "div",
                { className: "instruct" },
                "(Scroll for more options)"
              )
            )
          );
        }
      }
      class Lt extends v.Component {
        render() {
          return v.createElement(
            "cq-dialog",
            null,
            v.createElement(
              "cq-language-dialog",
              null,
              v.createElement("h4", { className: "title" }, "Choose language"),
              v.createElement("cq-close", null),
              v.createElement(
                "cq-languages",
                null,
                v.createElement(
                  "template",
                  null,
                  v.createElement(
                    "div",
                    null,
                    v.createElement("cq-flag", null),
                    v.createElement("cq-language-name", null)
                  )
                )
              )
            )
          );
        }
      }
      class Ft extends v.Component {
        render() {
          return v.createElement(
            "cq-dialog",
            null,
            v.createElement(
              "cq-share-dialog",
              null,
              v.createElement("h4", { className: "title" }, "Share Your Chart"),
              v.createElement("cq-close", null),
              v.createElement(
                "div",
                { "cq-share-dialog-div": "true" },
                v.createElement("cq-separator", null),
                v.createElement(
                  "cq-share-create",
                  { class: "ciq-btn", stxtap: "share()" },
                  "Create Image"
                ),
                v.createElement(
                  "cq-share-generating",
                  null,
                  "Generating Image"
                ),
                v.createElement("cq-share-uploading", null, "Uploading Image"),
                v.createElement("div", { className: "share-link-div" }),
                v.createElement(
                  "cq-share-copy",
                  { class: "ciq-btn", stxtap: "copy()" },
                  "Copy Link to Clipboard"
                ),
                v.createElement("cq-share-copied", null, "Link Copied!")
              )
            )
          );
        }
      }
      class Nt extends v.Component {
        render() {
          return v.createElement(
            "cq-dialog",
            null,
            v.createElement(
              "cq-theme-dialog",
              null,
              v.createElement(
                "h4",
                { className: "title" },
                "Create Custom Theme"
              ),
              v.createElement("cq-close", null),
              v.createElement(
                "cq-scroll",
                { "cq-no-maximize": !0 },
                v.createElement(
                  "cq-section",
                  null,
                  v.createElement(
                    "cq-placeholder",
                    null,
                    "Candle Color",
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "cu" },
                      v.createElement("cq-swatch", { "cq-overrides": "Hollow" })
                    ),
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "cd" },
                      v.createElement("cq-swatch", { "cq-overrides": "Hollow" })
                    )
                  ),
                  v.createElement(
                    "cq-placeholder",
                    null,
                    "Candle Wick",
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "wu" },
                      v.createElement("cq-swatch", null)
                    ),
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "wd" },
                      v.createElement("cq-swatch", null)
                    )
                  ),
                  v.createElement(
                    "cq-placeholder",
                    null,
                    "Candle Border",
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "bu" },
                      v.createElement("cq-swatch", {
                        "cq-overrides": "No Border",
                      })
                    ),
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "bd" },
                      v.createElement("cq-swatch", {
                        "cq-overrides": "No Border",
                      })
                    )
                  ),
                  v.createElement("cq-separator", null),
                  v.createElement(
                    "cq-placeholder",
                    null,
                    "Line/Bar Chart",
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "lc" },
                      v.createElement("cq-swatch", null)
                    )
                  ),
                  v.createElement("cq-separator", null),
                  v.createElement(
                    "cq-placeholder",
                    null,
                    "Mountain Base",
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "mb" },
                      v.createElement("cq-swatch", null)
                    )
                  ),
                  v.createElement(
                    "cq-placeholder",
                    null,
                    "Mountain Peak",
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "mc" },
                      v.createElement("cq-swatch", null)
                    )
                  )
                ),
                v.createElement(
                  "cq-section",
                  null,
                  v.createElement(
                    "cq-placeholder",
                    null,
                    "Background",
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "bg" },
                      v.createElement("cq-swatch", null)
                    )
                  ),
                  v.createElement(
                    "cq-placeholder",
                    null,
                    "Grid Lines",
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "gl" },
                      v.createElement("cq-swatch", null)
                    )
                  ),
                  v.createElement(
                    "cq-placeholder",
                    null,
                    "Date Dividers",
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "dd" },
                      v.createElement("cq-swatch", null)
                    )
                  ),
                  v.createElement(
                    "cq-placeholder",
                    null,
                    "Axis Text",
                    v.createElement(
                      "cq-theme-piece",
                      { "cq-piece": "at" },
                      v.createElement("cq-swatch", null)
                    )
                  )
                ),
                v.createElement(
                  "cq-action",
                  null,
                  v.createElement("input", null),
                  v.createElement(
                    "div",
                    { stxtap: "save()", className: "ciq-btn" },
                    "Save"
                  )
                )
              )
            )
          );
        }
      }
      class Vt extends v.Component {
        render() {
          const e = this.context.UIContext.PaletteDrawing;
          return v.createElement(
            v.Fragment,
            null,
            v.createElement(Ot, null),
            v.createElement(Et, null),
            v.createElement(It, null),
            v.createElement(Bt, null),
            v.createElement(Rt, null),
            v.createElement(Lt, null),
            v.createElement(Ft, null),
            v.createElement(Nt, null),
            e && v.createElement(I, null),
            v.createElement(B, null)
          );
        }
      }
      Vt.contextType = P.u;
      class zt extends v.Component {
        constructor() {
          super(), (this.scriptiqRef = v.createRef());
        }
        componentDidMount() {
          (this.context.components.ScriptIQ = this),
            this.scriptiqRef.current &&
              (this.context.UIContext.ScriptIQ = this.scriptiqRef.current);
        }
        render() {
          return v.createElement("cq-scriptiq", {
            class: "scriptiq-ui",
            ref: this.scriptiqRef,
          });
        }
      }
      zt.contextType = P.u;
      var qt = a(53896),
        Ht = a(25280),
        _t = a(79055),
        Yt = a(87228),
        jt = a(63701),
        Kt = a(67546),
        Wt = a(29044),
        Gt = a(83536),
        Qt = a(79150),
        Zt = a(29321),
        Jt = a(90357),
        Xt = a(859),
        $t = a.n(Xt),
        ea = a(90372),
        ta = a.n(ea),
        aa = a(4633),
        ra = a.n(aa),
        na = a(16783),
        ia = a.n(na),
        oa = a(85982),
        la = a.n(oa),
        sa = a(67194),
        ca = a.n(sa),
        da = a(27039);
      const ua = $t()("chartiq:QuoteFeed");
      var ma = a(71106),
        ha = a(3579),
        pa = Object.defineProperty,
        ga = Object.defineProperties,
        Ca = Object.getOwnPropertyDescriptors,
        Ta = Object.getOwnPropertySymbols,
        ba = Object.prototype.hasOwnProperty,
        fa = Object.prototype.propertyIsEnumerable,
        ya = (e, t, a) =>
          t in e
            ? pa(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a);
      const va = $t()("chartiq:avg"),
        Sa = $t()("chartiq:all"),
        ka = { managePeriodicity: !0, preserveTicksAndCandleWidth: !1, cb: C },
        Pa = ({
          pair: e,
          symbol: t,
          container: a,
          selectedTab: n,
          isForeignExist: o,
        }) => {
          var c, d, u, m;
          const h = (0, Y.wA)(),
            p = (0, Y.d4)(Qt.BQ),
            g = (0, Y.d4)(G.pJ),
            C = (0, Y.d4)(Gt.q),
            b = (0, Y.d4)(Wt.Hi),
            f = i()(b.avgBuyPrice),
            y = (0, Y.d4)(W.G3),
            { country: S, dateFormat: w } = y,
            { i18n: U } = (0, K.B)(),
            M = (0, Y.d4)(G.Xd),
            D = !0 === p && M,
            x = (0, v.useRef)(null),
            O = (0, v.useRef)(null),
            I = (0, v.useRef)(null),
            B = (0, Y.d4)(G.bg),
            E = (0, v.useContext)(P.u),
            {
              stx: R,
              setContext: L,
              height: F,
              chartContextEl: N,
              updateContainerSize: V,
              themesRef: z,
            } = E,
            q = (0, v.useRef)(1),
            H = "kr" === S,
            _ = null == z ? void 0 : z.current,
            j = null == _ ? void 0 : _.currentTheme,
            Z = (0, Y.d4)(G.rB),
            X = a.includes(A.dI.MOBILE),
            re = (0, v.useCallback)(() => {
              let e;
              a === A.dI.PC
                ? (e = null != Z ? Z : 409)
                : X
                ? (e = window.innerHeight - (o ? 160 : 132))
                : a.includes(A.dI.FULL) && (e = window.innerHeight - 131),
                e && F !== e && L && L({ height: e });
            }, [L, F, a, Z, o]),
            ne = (0, v.useRef)(localStorage.getItem(A.P6)),
            ie = (0, v.useRef)(H ? (X ? J()(A.Gm) : J()(A.zR)) : J()(A.FY));
          (0, v.useEffect)(() => {
            ne.current || (ne.current = JSON.stringify(ie.current));
          }, []),
            (0, v.useEffect)(() => {
              if (t && p) {
                const e = (0, jt.Xp)(t);
                if (e) {
                  const { baseCurrencyCode: t, quoteCurrencyCode: a } = e;
                  h((0, Ht.ti)(t, a));
                }
              }
            }, [t, p]);
          const oe = (0, v.useCallback)((e, t) => {
            const a = r.CIQ.localStorage.getItem(t),
              n = (0, ee.jD)(a);
            ra()(n) || (e.importDrawings(n), e.draw());
          }, []);
          (0, v.useEffect)(() => {
            if (R) {
              (R.streamParameters.maxWait = ma.W), ue(de.current);
              const r =
                (0, Q.hl)(ne.current) && ne.current
                  ? JSON.parse(ne.current)
                  : ie.current;
              if (
                ((r.symbols = R.exportLayout(!0).symbols),
                (a !== A.dI.FULL && a !== A.dI.PC) ||
                  ((r.crosshair = !0), (r.headsUp = "static")),
                a === A.dI.MINI)
              ) {
                const e = H ? J()(A.j1) : J()(A.xW);
                (r.crosshair = !0),
                  (r.headsUp = null),
                  (r.interval = e.interval),
                  (r.timeUnit = e.timeUnit),
                  (r.candleWidth = e.candleWidth),
                  (r.chartType = e.chartType),
                  (r.studies = e.studies),
                  (r.panels = e.panels),
                  (R.controls.mSticky = null);
              }
              (R.preferences.labels = !0),
                R.importLayout(
                  r,
                  ((e = ((e, t) => {
                    for (var a in t || (t = {}))
                      ba.call(t, a) && ya(e, a, t[a]);
                    if (Ta)
                      for (var a of Ta(t)) fa.call(t, a) && ya(e, a, t[a]);
                    return e;
                  })({}, ka)),
                  ga(
                    e,
                    Ca({
                      cb: () => {
                        ka.cb(), oe(R, t);
                      },
                    })
                  ))
                );
            }
            var e;
            return () => {
              R && (T(), R.destroy());
            };
          }, [R]),
            (0, v.useEffect)(() => {
              if (R && N) {
                const e = H && "ko" === U.language ? "kr" : "en";
                r.CIQ.I18N.setLanguage(R, e, null, null, N.current);
              }
            }, [R, H, U.language]);
          const le = (0, v.useCallback)(
            (e) => {
              var t, a, n;
              if (_ && R) {
                const { up: i, down: o } = ((e) => {
                    var t, a, r, n, i, o, l, s;
                    let c, d;
                    if ($()(A.ZT, e))
                      e === A.ZT.NIGHT && ((c = A.PG), (d = A.aB)),
                        e === A.ZT.DAY && ((c = A.I), (d = A.bY)),
                        e === A.ZT.MELONA && ((c = A.zP), (d = A.Qt)),
                        (e !== A.ZT.GLOBAL && e !== A.ZT.GLOBAL_NIGHT) ||
                          ((c = A.yK), (d = A.$$));
                    else {
                      const u = (0, ee.jD)(localStorage.getItem(A.RX));
                      (c =
                        null ==
                        (n =
                          null ==
                          (r =
                            null ==
                            (a =
                              null == (t = null == u ? void 0 : u[e])
                                ? void 0
                                : t.settings)
                              ? void 0
                              : a.chartTypes)
                            ? void 0
                            : r["Candle/Bar"].up)
                          ? void 0
                          : n.color),
                        (d =
                          null ==
                          (s =
                            null ==
                            (l =
                              null ==
                              (o =
                                null == (i = null == u ? void 0 : u[e])
                                  ? void 0
                                  : i.settings)
                                ? void 0
                                : o.chartTypes)
                              ? void 0
                              : l["Candle/Bar"].down)
                            ? void 0
                            : s.color);
                    }
                    return { up: c, down: d };
                  })(e),
                  l = { "Up Volume": i, "Down Volume": o },
                  s =
                    null ==
                    (a = null == (t = r.CIQ.Studies) ? void 0 : t.studyLibrary)
                      ? void 0
                      : a.volume;
                if (
                  (s && "object" == typeof s && (s.outputs = l),
                  null == (n = null == R ? void 0 : R.layout)
                    ? void 0
                    : n.studies)
                ) {
                  const e = ta()(R.layout.studies, (e) => "volume" === e.type);
                  k()(e, (e) => {
                    e.outputs = l;
                  }),
                    R.draw();
                }
              }
            },
            [_, R]
          );
          (0, v.useEffect)(() => {
            j && le(j);
          }, [j]);
          const se = (0, v.useCallback)(
            (e) => {
              var t, r, n, i, o;
              if (
                _ &&
                a === A.dI.MINI &&
                (null == (t = null == e ? void 0 : e.detail)
                  ? void 0
                  : t.key) === A.gO &&
                (null == (r = null == e ? void 0 : e.detail)
                  ? void 0
                  : r.oldValue) !==
                  (null == (n = null == e ? void 0 : e.detail)
                    ? void 0
                    : n.newValue)
              ) {
                const t = JSON.parse(
                    null !=
                      (o =
                        null == (i = null == e ? void 0 : e.detail)
                          ? void 0
                          : i.newValue)
                      ? o
                      : "{}"
                  ),
                  a = null == t ? void 0 : t.theme;
                a && (_.loadTheme(a), le(a));
              }
            },
            [_, a]
          );
          (0, v.useEffect)(
            () => (
              document.addEventListener("ciqLocalStorage", se),
              () => {
                document.removeEventListener("ciqLocalStorage", se);
              }
            ),
            [se]
          ),
            (0, v.useEffect)(() => {
              if (_ && $()(A.ZT, j)) {
                const e = ae(H, B);
                r.CIQ.localStorageSetItem(A.gO, JSON.stringify({ theme: e })),
                  _.loadTheme(e);
              }
            }, [B, H]),
            (0, v.useEffect)(
              () => (
                re(),
                window.addEventListener("resize", re),
                () => {
                  window.removeEventListener("resize", re);
                }
              ),
              [L, F, a, Z, o]
            ),
            (0, v.useEffect)(() => {
              var e, t, a, r, n;
              "second" ===
              (null == (e = null == R ? void 0 : R.layout)
                ? void 0
                : e.timeUnit)
                ? (q.current = "second")
                : "month" ===
                    (null == (t = null == R ? void 0 : R.layout)
                      ? void 0
                      : t.interval) &&
                  12 ===
                    (null == (a = null == R ? void 0 : R.layout)
                      ? void 0
                      : a.periodicity)
                ? (q.current = "year")
                : (q.current =
                    null !=
                    (n =
                      null == (r = null == R ? void 0 : R.layout)
                        ? void 0
                        : r.interval)
                      ? n
                      : 1);
            }, [
              null == (c = null == R ? void 0 : R.layout) ? void 0 : c.interval,
              null == (d = null == R ? void 0 : R.layout) ? void 0 : d.timeUnit,
              null == (u = null == R ? void 0 : R.layout)
                ? void 0
                : u.periodicity,
            ]),
            (0, v.useEffect)(() => {
              "ciq" === g && V && V();
            }, [g, V]),
            (0, v.useEffect)(() => {
              "trade" === n && V && V();
            }, [n, V]);
          const ce = (0, v.useCallback)((e) => {
              x.current = (0, ha.lV)(e);
            }, []),
            de = (0, v.useRef)(
              ((e, t) => {
                const a = `${t.apiHosts.QUOTATION_API_HOST}/${da.BK}/crix/candles`;
                function n(e) {
                  var t, a;
                  let r = "";
                  switch (e.interval) {
                    case "second":
                      r = "/seconds";
                      break;
                    case "day":
                      r = "/days";
                      break;
                    case "week":
                      r = "/weeks";
                      break;
                    case "month":
                      r =
                        12 ===
                        (null ==
                        (a =
                          null == (t = null == e ? void 0 : e.stx)
                            ? void 0
                            : t.layout)
                          ? void 0
                          : a.periodicity)
                          ? "/years"
                          : "/months";
                      break;
                    default:
                      r = `/minutes/${e.period}`;
                  }
                  return r;
                }
                const i = (e) => {
                  const t = ra()(e) ? [] : JSON.parse(e);
                  return la()(
                    ca()(t, (e, t) => {
                      const a = new Date(e.candleDateTime);
                      return {
                        DT: new Date(a.getTime()),
                        Open: e.openingPrice,
                        High: e.highPrice,
                        Low: e.lowPrice,
                        Close: e.tradePrice,
                        Volume: e.candleAccTradeVolume,
                      };
                    })
                  );
                };
                return {
                  url: a,
                  fetchInitialData: (t, o, l, s, c) => {
                    const d = n(s),
                      u = a + d + "?code=" + t + "&count=200";
                    r.CIQ.postAjax(u, null, function (t, a) {
                      if (200 === t) {
                        const t = i(a);
                        if (t.length > 0) {
                          const t = ia()(JSON.parse(a), (e) => -e.timestamp)[0];
                          ua("QuoteFeedInitialData", t), t && e(t);
                        }
                        c({ quotes: t });
                      } else c(404 === t ? { quotes: [] } : { error: a || t });
                    });
                  },
                  fetchPaginationData: (e, t, o, l, s) => {
                    const c = n(l),
                      d =
                        a +
                        c +
                        "?code=" +
                        e +
                        "&count=100&to=" +
                        new Date(o.getTime()).toISOString();
                    r.CIQ.postAjax(d, null, function (e, t) {
                      if (200 === e) {
                        const e = i(t);
                        s({ quotes: e });
                      } else s({ error: t || e });
                    });
                  },
                  formatChartData: i,
                };
              })(ce, y)
            ),
            ue = (0, v.useCallback)(
              (e) => {
                R && R.attachQuoteFeed(e);
              },
              [R]
            ),
            me = (0, v.useCallback)(() => {
              if (a !== A.dI.MINI && R) {
                const e = JSON.stringify(R.exportLayout(!0));
                localStorage.setItem(A.P6, e);
              }
            }, [R, a]);
          (0, v.useEffect)(
            () => (
              window.addEventListener("beforeunload", me),
              () => {
                me(), window.removeEventListener("beforeunload", me);
              }
            ),
            [R, a]
          ),
            (0, v.useEffect)(() => {
              var e;
              (null == (e = x.current) ? void 0 : e.code) !== t &&
                (x.current = null);
            }, [t]),
            (0, v.useEffect)(() => {
              R &&
                ((R.chart.symbolDisplay = null != e ? e : "ETH/BTC"),
                R.loadChart(null != t ? t : "CRIX.UPBIT.KRW-BTC", null, () => {
                  oe(R, t);
                }),
                (0, s.A)("거래소", "차트", "심볼변경", {
                  category: "심볼변경",
                  pageDetail: t,
                }));
            }, [R, e, t, oe]),
            (0, v.useEffect)(() => {
              var e;
              const a =
                null == (e = null == R ? void 0 : R.layout)
                  ? void 0
                  : e.timeUnit;
              return (
                (I.current = setInterval(
                  () => {
                    var e;
                    if (t && q.current) {
                      const r = (0, Kt.cQ)(
                          null == (e = x.current) ? void 0 : e.timestamp
                        ),
                        n = (0, Jt.A)(r)
                          ? `${(0, Zt.A)(r, "yyyy-MM-dd'T'HH:mm:ss")}Z`
                          : void 0;
                      Ce(t, q.current, "second" === a ? A.lk : A.OG, n);
                    }
                  },
                  "second" === a ? A.ul : A.Z2
                )),
                () => {
                  I.current && clearInterval(I.current), (I.current = null);
                }
              );
            }, [
              null == (m = null == R ? void 0 : R.layout) ? void 0 : m.timeUnit,
              t,
            ]),
            (0, v.useEffect)(() => {
              ra()(C) || Te(C);
            }, [C, t]);
          const he = (0, v.useRef)(null);
          (0, v.useEffect)(
            () => (
              R &&
                (pe(),
                (O.current = setInterval(() => {
                  he.current && !$()(R.drawingObjects, he.current) && pe();
                }, 1e3))),
              () => {
                O.current && clearInterval(O.current), (O.current = null);
              }
            ),
            [R, e, t, S, D, f]
          );
          const pe = (0, v.useCallback)(() => {
              try {
                wa({
                  stx: R,
                  avgBuyPrice: f,
                  showAvgPrice: D,
                  country: S,
                  avgBuyPriceDrawing: he,
                });
              } catch (e) {
                console.warn(e);
              }
            }, [R, e, t, S, D, f]),
            ge = (0, v.useCallback)(
              (e) => {
                if (ra()(e)) return;
                const a = [];
                ia()(e, (e) => e.timestamp).forEach((e) => {
                  if (x.current) {
                    if (x.current.code === e.code && t === e.code) {
                      new Date(x.current.timestampMod) <=
                        new Date(e.candleDateTime) && ce(e);
                      const t = te(e);
                      Sa("synchronizeCandles", t), a.push(t);
                    }
                  } else if (t === e.code) {
                    ce(e);
                    const t = te(e);
                    Sa("synchronizeCandles without initialData", t), a.push(t);
                  }
                }),
                  ra()(a) ||
                    (Sa("newQuotes", a),
                    null == R ||
                      R.updateChartData(a, null, { allowReplaceOHL: !0 }));
              },
              [R, t]
            ),
            Ce = (0, v.useCallback)(
              (e, t, a, r) => {
                if (e && t && a)
                  switch (t) {
                    case 1:
                    case 3:
                    case 5:
                    case 10:
                    case 15:
                    case 30:
                    case 60:
                    case 240:
                      h((0, _t.QH)(t, e, a, r)).then((e) => {
                        ge(e.payload);
                      });
                      break;
                    case "second":
                      h((0, _t.aq)(e, a, r)).then((e) => {
                        ge(e.payload);
                      });
                      break;
                    case "day":
                      h((0, _t.IJ)(e, a, r)).then((e) => {
                        ge(e.payload);
                      });
                      break;
                    case "week":
                      h((0, _t.m6)(e, a, r)).then((e) => {
                        ge(e.payload);
                      });
                      break;
                    case "month":
                      h((0, _t.Ow)(e, a, r)).then((e) => {
                        ge(e.payload);
                      });
                      break;
                    case "year":
                      h((0, _t.Zd)(e, a, r)).then((e) => {
                        ge(e.payload);
                      });
                  }
              },
              [ge]
            ),
            Te = (0, v.useCallback)(
              (e) => {
                if (ra()(e)) return;
                const a = ia()(
                  e.filter((e) => e.code === t),
                  (e) => e.lastSequentialId
                );
                if (ra()(a)) return;
                const r = a[a.length - 1],
                  n = 1e3 * (0, Yt.Q)(`${q.current}`, r.candleTimestamp);
                if (r && x.current) {
                  const e = r.candleTimestamp,
                    a = x.current.timestampMod;
                  if (
                    (0, ha.QO)({
                      intervalMs: n,
                      intervalString: q.current,
                      currentCandle: x.current,
                      newCandle: r,
                    })
                  ) {
                    const r = e - a,
                      i = l()(r / n) + 1;
                    if ("second" !== q.current) return void Ce(t, q.current, i);
                  }
                }
                const i = (0, ha.zc)({
                  sortedCandles: a,
                  intervalMs: n,
                  intervalString: q.current,
                  currentCandle: x.current,
                  symbol: t,
                });
                ra()(i) ||
                  ((x.current = i[i.length - 1]),
                  Sa("newQuotes", i),
                  null == R ||
                    R.updateChartData((0, ha.HN)(i), null, {
                      allowReplaceOHL: !0,
                    }));
              },
              [R, t]
            );
          return null;
        },
        wa = ({
          stx: e,
          avgBuyPrice: t,
          showAvgPrice: a,
          country: r,
          avgBuyPriceDrawing: n,
        }) => {
          if (
            (va("updateAvgPriceLine values", {
              stx: e,
              avgBuyPrice: t,
              showAvgPrice: a,
            }),
            e &&
              (n &&
                (e.removeDrawing(n.current),
                (n.current = null),
                va("removeDrawing")),
              t && 0 !== t && a))
          ) {
            const a = e.createDrawing("horizontal", {
              pnl: "chart",
              lw: 1,
              col: "kr" === r ? A.ub : A.W1,
              al: !0,
              v0: t,
              d0: "19001126143000000",
            });
            va("createDrawing", { stx: e, drawing: a }),
              (a.permanent = !0),
              (n.current = a),
              va("createDrawing-check", [e.drawingObjects]);
          }
        };
      var Aa = Object.defineProperty,
        Ua = Object.defineProperties,
        Ma = Object.getOwnPropertyDescriptors,
        Da = Object.getOwnPropertySymbols,
        xa = Object.prototype.hasOwnProperty,
        Oa = Object.prototype.propertyIsEnumerable,
        Ia = (e, t, a) =>
          t in e
            ? Aa(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: a,
              })
            : (e[t] = a),
        Ba = (e, t) => {
          for (var a in t || (t = {})) xa.call(t, a) && Ia(e, a, t[a]);
          if (Da) for (var a of Da(t)) Oa.call(t, a) && Ia(e, a, t[a]);
          return e;
        },
        Ea = (e, t) => Ua(e, Ma(t)),
        Ra = (e, t, a) => (Ia(e, "symbol" != typeof t ? t + "" : t, a), a);
      a(859)("chartiq:AdvancedChart");
      const { observeProperty: La } = r.CIQ.UI;
      class Fa extends v.Component {
        constructor(e) {
          super(e),
            Ra(this, "chartContainer"),
            Ra(this, "chartContextEl"),
            Ra(this, "afterChartIntitalized", () => {
              const { stx: e, UIContext: t } = this.state,
                {
                  chartInitialized: a,
                  pluginsToLoadLazy: n = {},
                  pair: i,
                  symbol: o,
                } = this.props,
                l = this;
              window.addEventListener("resize", l.updateContainerSize),
                l.updateContainerSize(),
                e.addEventListener("layout", l.resizeScreen),
                La("uiLayout", t, l.resizeScreen),
                this.configureLoadedPlugins();
              setTimeout(function () {
                k()(n, (e, t) => {
                  r.CIQ.debug && console.log("loading " + t),
                    e()
                      .then(() => {
                        r.CIQ.debug && console.log("plugin " + t + " loaded"),
                          l.configureLoadedPlugins();
                      })
                      .catch((e) => {
                        r.CIQ.debug &&
                          console.warn("failed to load plugin " + t);
                      });
                });
              }, 100),
                r.CIQ.UI.begin(),
                a && a({ chartEngine: e, uiContext: this.state.UIContext });
            }),
            Ra(this, "updateContainerSize", () => {
              const e = this.chartContainer.current,
                t = this.props.container;
              if (!e) return void setTimeout(this.updateContainerSize, 10);
              const { clientWidth: a, clientHeight: r } = e,
                { UIContext: n } = this.state,
                { breakpoints: i, breakpointSymbolPlaceholders: o } =
                  this.state.config,
                l = ["sm", "md", "lg"],
                s = t === A.dI.MOBILE,
                c = t === A.dI.MINI,
                d = s || c ? l[0] : l[2],
                u = a < i[0] ? o[0] : a < i[1] ? o[1] : o[2];
              (n.uiLayout = Ea(Ba({}, n.uiLayout), {
                breakpointSize: d,
                containerWidth: a,
                containerHeight: r,
                symbolPlaceholder: u,
              })),
                this.resizeScreen();
            }),
            Ra(this, "resizeScreen", () => {
              const { chartArea: e, UIContext: t, stx: a } = this.state;
              if (!e || !t) return;
              const { PaletteDock: r, uiLayout: n } = t,
                { breakpointSize: i, sidepanelWidth: o = 0 } =
                  null != n ? n : {},
                l = "sm" === i;
              l || (a.layout.sidenav = "sidenavOff");
              const s = "sidenavOn" === a.layout.sidenav ? 40 : 0;
              this.setState(
                (e) => ({
                  breakpointSize: i,
                  sidenavAvailable: l,
                  chartAreaLeft: s,
                  chartAreaRight: o,
                }),
                () => {
                  r.handleResize(), a.resizeChart();
                }
              );
            }),
            (this.chartContainer = v.createRef()),
            (this.chartContextEl = v.createRef()),
            (this.state = {
              stx: null,
              UIContext: null,
              config: this.props.config || (0, qt.Y8)(),
              setContext: (e) => this.setState(e),
              components: {},
              registerComponent: (e) =>
                this.setState({
                  components: Ea(Ba({}, this.state.components), {
                    component: e,
                  }),
                }),
              resize: () => this.resizeScreen(),
              setChartEngine: (e) => {
                this.setState(() => ({ stx: e }), this.afterChartIntitalized);
              },
              height: null,
              chartContextEl: this.chartContextEl,
              updateContainerSize: () => this.updateContainerSize(),
              containerType: this.props.container,
              code: this.props.symbol,
            });
        }
        componentDidMount() {
          !document.querySelector("cq-ui-manager") &&
            document.body &&
            document.body.appendChild(document.createElement("cq-ui-manager"));
          const e = this.chartContextEl.current,
            t = new r.CIQ.UI.Context(null, e),
            a = new r.CIQ.UI.Layout(t);
          this.setState({ UIContext: t, UILayout: a });
        }
        componentDidUpdate(e, t) {
          t.height !== this.state.height && this.resizeScreen(),
            e.symbol !== this.props.symbol &&
              this.setState({ code: this.props.symbol });
        }
        configureLoadedPlugins() {
          const {
            stx: e,
            UIContext: t,
            pluginsInstalled: a = {},
            config: { plugins: n, marketDepth: i },
          } = this.state;
          if (n) {
            if (
              (n.cryptoiq &&
                r.CIQ.MarketDepth &&
                !a.cryptoiq &&
                (new r.CIQ.MarketDepth(
                  Ba(Ba({ stx: e }, i), n.cryptoiq.marketDepth)
                ),
                n.cryptoiq.simulateL2 && n.cryptoiq.simulateL2(e),
                (a.cryptoiq = !0)),
              n.tfc &&
                r.CIQ.TFC &&
                !a.tfc &&
                (new r.CIQ.TFC({ stx: e, account: n.tfc.account, context: t }),
                (a.tfc = !0)),
              n.timeSpanEvents && r.CIQ.TimeSpanEventPanel && !a.timeSpanEvents)
            ) {
              new r.CIQ.TimeSpanEventPanel({ stx: e, context: t });
              (new r.CIQ.UI.TimeSpanEvent(t, {
                menuItemSelector: ".stx-markers cq-item.span-event",
              }).implementation = new r.CIQ.TimeSpanEventSample(e)),
                (a.timeSpanEvents = !0);
            }
            this.setState({ pluginsInstalled: Ba({}, a) }),
              e.changeOccurred("layout");
          }
        }
        render() {
          const {
              config: e,
              config: {
                header: t,
                footer: a,
                chartConfig: r,
                addOns: n,
                quoteFeed: i,
                quoteFeedBehavior: o,
                marketFactory: l,
                headsUpDisplayTypes: s,
                plugins: c = {},
              },
              stx: d,
              UIContext: u,
              breakpointSize: m,
              chartAreaLeft: h,
              chartAreaRight: p,
            } = this.state,
            { pair: g, symbol: C, container: T, selectedTab: b } = this.props,
            f = `cq-chart-container break-${null != m ? m : ""}`,
            y = T === A.dI.MINI,
            S = T === A.dI.MOBILE,
            k = T === A.dI.FULL,
            U = S || k ? "100%" : y ? 490 : 990,
            M = y ? 258 : this.state.height;
          return v.createElement(
            P.u.Provider,
            { value: this.state },
            v.createElement(
              "div",
              {
                "cq-context": "true",
                ref: this.chartContextEl,
                style: { height: 0 },
              },
              u &&
                v.createElement(
                  v.Fragment,
                  null,
                  this.props.children,
                  v.createElement(Pa, {
                    pair: g,
                    symbol: C,
                    container: T,
                    selectedTab: b,
                    isForeignExist: this.props.isForeignExist,
                  }),
                  v.createElement(
                    "div",
                    {
                      className: f,
                      ref: this.chartContainer,
                      style: { width: U, height: M },
                    },
                    v.createElement(O, null),
                    v.createElement(je, { config: e }),
                    v.createElement(
                      D,
                      Ba({}, { header: t, footer: a, left: h, right: p }),
                      v.createElement(
                        xt,
                        Ba(
                          {},
                          {
                            chartConfig: r,
                            addOns: n,
                            quoteFeed: i,
                            quoteFeedBehavior: o,
                            marketFactory: l,
                            headsUpDisplayTypes: s,
                            container: T,
                          }
                        )
                      )
                    ),
                    v.createElement(
                      w,
                      null,
                      c.scriptIQ && v.createElement(zt, null)
                    ),
                    v.createElement(et, null),
                    !y && v.createElement(Vt, null),
                    a && v.createElement(q, null)
                  )
                )
            )
          );
        }
      }
    },
    98287: function (e, t, a) {
      "use strict";
      a.d(t, {
        D0: function () {
          return o;
        },
        N$: function () {
          return l;
        },
        u8: function () {
          return n;
        },
      });
      var r = a(71597);
      a(55327),
        a(25769),
        a(8348),
        a(20502),
        a(98625),
        a(43589),
        a(11072),
        a(97831),
        a(67201);
      const n = {};
      r.CIQ.UI.ensureComponentsRegistered();
      var i = a(53896);
      o();
      function o() {
        return (0, i.Y8)();
      }
      function l() {
        const e = (0, i.Y8)();
        return (
          (e.headsUpDisplayTypes = [null]),
          (e.menus = ["menuPeriodicity", "menuDisplay"]),
          (e.menuDisplay = [
            { label: "Locale", type: "heading" },
            { label: "Change Timezone", type: "timezone" },
            { type: "separator" },
            { label: "Themes", type: "heading" },
            { label: "New Theme", type: "themes" },
            [],
          ]),
          e
        );
      }
    },
    69785: function (e, t, a) {
      var r, n, i;
      (n = [a(59881)]),
        void 0 ===
          (i =
            "function" ==
            typeof (r = function (e) {
              "use strict";
              var t,
                a,
                r,
                n,
                i,
                o,
                l,
                s,
                c = e.Reader,
                d = e.Writer,
                u = e.util,
                m = e.roots.default || (e.roots.default = {});
              return (
                (m.com =
                  (((s = {}).dunamu =
                    (((l = {}).crix =
                      (((o = {}).front =
                        (((i = {}).protobuf =
                          (((n = {}).BaseCandle = (function () {
                            function t(e) {
                              if (e)
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.frontModelInfo = null),
                              (t.prototype.candleTimestamp = u.Long
                                ? u.Long.fromBits(0, 0, !0)
                                : 0),
                              (t.prototype.lastSequentialId = u.Long
                                ? u.Long.fromBits(0, 0, !0)
                                : 0),
                              (t.prototype.openingPrice = 0),
                              (t.prototype.highPrice = 0),
                              (t.prototype.lowPrice = 0),
                              (t.prototype.tradePrice = 0),
                              (t.prototype.tradeVolume = 0),
                              (t.prototype.accTradePrice = 0),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                return (
                                  t || (t = d.create()),
                                  null != e.frontModelInfo &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "frontModelInfo"
                                    ) &&
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.encode(
                                      e.frontModelInfo,
                                      t.uint32(10).fork()
                                    ).ldelim(),
                                  null != e.candleTimestamp &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "candleTimestamp"
                                    ) &&
                                    t.uint32(16).uint64(e.candleTimestamp),
                                  null != e.lastSequentialId &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "lastSequentialId"
                                    ) &&
                                    t.uint32(24).uint64(e.lastSequentialId),
                                  null != e.openingPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "openingPrice"
                                    ) &&
                                    t.uint32(33).double(e.openingPrice),
                                  null != e.highPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "highPrice"
                                    ) &&
                                    t.uint32(41).double(e.highPrice),
                                  null != e.lowPrice &&
                                    Object.hasOwnProperty.call(e, "lowPrice") &&
                                    t.uint32(49).double(e.lowPrice),
                                  null != e.tradePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradePrice"
                                    ) &&
                                    t.uint32(57).double(e.tradePrice),
                                  null != e.tradeVolume &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeVolume"
                                    ) &&
                                    t.uint32(65).double(e.tradeVolume),
                                  null != e.accTradePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "accTradePrice"
                                    ) &&
                                    t.uint32(73).double(e.accTradePrice),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.BaseCandle();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.frontModelInfo =
                                        m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 2:
                                      n.candleTimestamp = e.uint64();
                                      break;
                                    case 3:
                                      n.lastSequentialId = e.uint64();
                                      break;
                                    case 4:
                                      n.openingPrice = e.double();
                                      break;
                                    case 5:
                                      n.highPrice = e.double();
                                      break;
                                    case 6:
                                      n.lowPrice = e.double();
                                      break;
                                    case 7:
                                      n.tradePrice = e.double();
                                      break;
                                    case 8:
                                      n.tradeVolume = e.double();
                                      break;
                                    case 9:
                                      n.accTradePrice = e.double();
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                if ("object" != typeof e || null === e)
                                  return "object expected";
                                if (
                                  null != e.frontModelInfo &&
                                  e.hasOwnProperty("frontModelInfo")
                                ) {
                                  var t =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.verify(
                                      e.frontModelInfo
                                    );
                                  if (t) return "frontModelInfo." + t;
                                }
                                return null != e.candleTimestamp &&
                                  e.hasOwnProperty("candleTimestamp") &&
                                  !(
                                    u.isInteger(e.candleTimestamp) ||
                                    (e.candleTimestamp &&
                                      u.isInteger(e.candleTimestamp.low) &&
                                      u.isInteger(e.candleTimestamp.high))
                                  )
                                  ? "candleTimestamp: integer|Long expected"
                                  : null != e.lastSequentialId &&
                                    e.hasOwnProperty("lastSequentialId") &&
                                    !(
                                      u.isInteger(e.lastSequentialId) ||
                                      (e.lastSequentialId &&
                                        u.isInteger(e.lastSequentialId.low) &&
                                        u.isInteger(e.lastSequentialId.high))
                                    )
                                  ? "lastSequentialId: integer|Long expected"
                                  : null != e.openingPrice &&
                                    e.hasOwnProperty("openingPrice") &&
                                    "number" != typeof e.openingPrice
                                  ? "openingPrice: number expected"
                                  : null != e.highPrice &&
                                    e.hasOwnProperty("highPrice") &&
                                    "number" != typeof e.highPrice
                                  ? "highPrice: number expected"
                                  : null != e.lowPrice &&
                                    e.hasOwnProperty("lowPrice") &&
                                    "number" != typeof e.lowPrice
                                  ? "lowPrice: number expected"
                                  : null != e.tradePrice &&
                                    e.hasOwnProperty("tradePrice") &&
                                    "number" != typeof e.tradePrice
                                  ? "tradePrice: number expected"
                                  : null != e.tradeVolume &&
                                    e.hasOwnProperty("tradeVolume") &&
                                    "number" != typeof e.tradeVolume
                                  ? "tradeVolume: number expected"
                                  : null != e.accTradePrice &&
                                    e.hasOwnProperty("accTradePrice") &&
                                    "number" != typeof e.accTradePrice
                                  ? "accTradePrice: number expected"
                                  : null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf.BaseCandle
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.BaseCandle();
                                if (null != e.frontModelInfo) {
                                  if ("object" != typeof e.frontModelInfo)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.BaseCandle.frontModelInfo: object expected"
                                    );
                                  t.frontModelInfo =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.fromObject(
                                      e.frontModelInfo
                                    );
                                }
                                return (
                                  null != e.candleTimestamp &&
                                    (u.Long
                                      ? ((t.candleTimestamp = u.Long.fromValue(
                                          e.candleTimestamp
                                        )).unsigned = !0)
                                      : "string" == typeof e.candleTimestamp
                                      ? (t.candleTimestamp = parseInt(
                                          e.candleTimestamp,
                                          10
                                        ))
                                      : "number" == typeof e.candleTimestamp
                                      ? (t.candleTimestamp = e.candleTimestamp)
                                      : "object" == typeof e.candleTimestamp &&
                                        (t.candleTimestamp = new u.LongBits(
                                          e.candleTimestamp.low >>> 0,
                                          e.candleTimestamp.high >>> 0
                                        ).toNumber(!0))),
                                  null != e.lastSequentialId &&
                                    (u.Long
                                      ? ((t.lastSequentialId = u.Long.fromValue(
                                          e.lastSequentialId
                                        )).unsigned = !0)
                                      : "string" == typeof e.lastSequentialId
                                      ? (t.lastSequentialId = parseInt(
                                          e.lastSequentialId,
                                          10
                                        ))
                                      : "number" == typeof e.lastSequentialId
                                      ? (t.lastSequentialId =
                                          e.lastSequentialId)
                                      : "object" == typeof e.lastSequentialId &&
                                        (t.lastSequentialId = new u.LongBits(
                                          e.lastSequentialId.low >>> 0,
                                          e.lastSequentialId.high >>> 0
                                        ).toNumber(!0))),
                                  null != e.openingPrice &&
                                    (t.openingPrice = Number(e.openingPrice)),
                                  null != e.highPrice &&
                                    (t.highPrice = Number(e.highPrice)),
                                  null != e.lowPrice &&
                                    (t.lowPrice = Number(e.lowPrice)),
                                  null != e.tradePrice &&
                                    (t.tradePrice = Number(e.tradePrice)),
                                  null != e.tradeVolume &&
                                    (t.tradeVolume = Number(e.tradeVolume)),
                                  null != e.accTradePrice &&
                                    (t.accTradePrice = Number(e.accTradePrice)),
                                  t
                                );
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                if (t.defaults) {
                                  if (((a.frontModelInfo = null), u.Long)) {
                                    var r = new u.Long(0, 0, !0);
                                    a.candleTimestamp =
                                      t.longs === String
                                        ? r.toString()
                                        : t.longs === Number
                                        ? r.toNumber()
                                        : r;
                                  } else
                                    a.candleTimestamp =
                                      t.longs === String ? "0" : 0;
                                  u.Long
                                    ? ((r = new u.Long(0, 0, !0)),
                                      (a.lastSequentialId =
                                        t.longs === String
                                          ? r.toString()
                                          : t.longs === Number
                                          ? r.toNumber()
                                          : r))
                                    : (a.lastSequentialId =
                                        t.longs === String ? "0" : 0),
                                    (a.openingPrice = 0),
                                    (a.highPrice = 0),
                                    (a.lowPrice = 0),
                                    (a.tradePrice = 0),
                                    (a.tradeVolume = 0),
                                    (a.accTradePrice = 0);
                                }
                                return (
                                  null != e.frontModelInfo &&
                                    e.hasOwnProperty("frontModelInfo") &&
                                    (a.frontModelInfo =
                                      m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.toObject(
                                        e.frontModelInfo,
                                        t
                                      )),
                                  null != e.candleTimestamp &&
                                    e.hasOwnProperty("candleTimestamp") &&
                                    ("number" == typeof e.candleTimestamp
                                      ? (a.candleTimestamp =
                                          t.longs === String
                                            ? String(e.candleTimestamp)
                                            : e.candleTimestamp)
                                      : (a.candleTimestamp =
                                          t.longs === String
                                            ? u.Long.prototype.toString.call(
                                                e.candleTimestamp
                                              )
                                            : t.longs === Number
                                            ? new u.LongBits(
                                                e.candleTimestamp.low >>> 0,
                                                e.candleTimestamp.high >>> 0
                                              ).toNumber(!0)
                                            : e.candleTimestamp)),
                                  null != e.lastSequentialId &&
                                    e.hasOwnProperty("lastSequentialId") &&
                                    ("number" == typeof e.lastSequentialId
                                      ? (a.lastSequentialId =
                                          t.longs === String
                                            ? String(e.lastSequentialId)
                                            : e.lastSequentialId)
                                      : (a.lastSequentialId =
                                          t.longs === String
                                            ? u.Long.prototype.toString.call(
                                                e.lastSequentialId
                                              )
                                            : t.longs === Number
                                            ? new u.LongBits(
                                                e.lastSequentialId.low >>> 0,
                                                e.lastSequentialId.high >>> 0
                                              ).toNumber(!0)
                                            : e.lastSequentialId)),
                                  null != e.openingPrice &&
                                    e.hasOwnProperty("openingPrice") &&
                                    (a.openingPrice =
                                      t.json && !isFinite(e.openingPrice)
                                        ? String(e.openingPrice)
                                        : e.openingPrice),
                                  null != e.highPrice &&
                                    e.hasOwnProperty("highPrice") &&
                                    (a.highPrice =
                                      t.json && !isFinite(e.highPrice)
                                        ? String(e.highPrice)
                                        : e.highPrice),
                                  null != e.lowPrice &&
                                    e.hasOwnProperty("lowPrice") &&
                                    (a.lowPrice =
                                      t.json && !isFinite(e.lowPrice)
                                        ? String(e.lowPrice)
                                        : e.lowPrice),
                                  null != e.tradePrice &&
                                    e.hasOwnProperty("tradePrice") &&
                                    (a.tradePrice =
                                      t.json && !isFinite(e.tradePrice)
                                        ? String(e.tradePrice)
                                        : e.tradePrice),
                                  null != e.tradeVolume &&
                                    e.hasOwnProperty("tradeVolume") &&
                                    (a.tradeVolume =
                                      t.json && !isFinite(e.tradeVolume)
                                        ? String(e.tradeVolume)
                                        : e.tradeVolume),
                                  null != e.accTradePrice &&
                                    e.hasOwnProperty("accTradePrice") &&
                                    (a.accTradePrice =
                                      t.json && !isFinite(e.accTradePrice)
                                        ? String(e.accTradePrice)
                                        : e.accTradePrice),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.BaseCandle"
                                );
                              }),
                              t
                            );
                          })()),
                          (n.common =
                            (((r = {}).FrontModelInfo = (function () {
                              function t(e) {
                                if (e)
                                  for (
                                    var t = Object.keys(e), a = 0;
                                    a < t.length;
                                    ++a
                                  )
                                    null != e[t[a]] && (this[t[a]] = e[t[a]]);
                              }
                              return (
                                (t.prototype.code = ""),
                                (t.prototype.streamType = 0),
                                (t.prototype.timestamp = u.Long
                                  ? u.Long.fromBits(0, 0, !1)
                                  : 0),
                                (t.create = function (e) {
                                  return new t(e);
                                }),
                                (t.encode = function (e, t) {
                                  return (
                                    t || (t = d.create()),
                                    null != e.code &&
                                      Object.hasOwnProperty.call(e, "code") &&
                                      t.uint32(10).string(e.code),
                                    null != e.streamType &&
                                      Object.hasOwnProperty.call(
                                        e,
                                        "streamType"
                                      ) &&
                                      t.uint32(16).int32(e.streamType),
                                    null != e.timestamp &&
                                      Object.hasOwnProperty.call(
                                        e,
                                        "timestamp"
                                      ) &&
                                      t.uint32(24).int64(e.timestamp),
                                    t
                                  );
                                }),
                                (t.encodeDelimited = function (e, t) {
                                  return this.encode(e, t).ldelim();
                                }),
                                (t.decode = function (e, t, a) {
                                  e instanceof c || (e = c.create(e));
                                  for (
                                    var r = void 0 === t ? e.len : e.pos + t,
                                      n =
                                        new m.com.dunamu.crix.front.protobuf.common.FrontModelInfo();
                                    e.pos < r;

                                  ) {
                                    var i = e.uint32();
                                    if (i === a) break;
                                    switch (i >>> 3) {
                                      case 1:
                                        n.code = e.string();
                                        break;
                                      case 2:
                                        n.streamType = e.int32();
                                        break;
                                      case 3:
                                        n.timestamp = e.int64();
                                        break;
                                      default:
                                        e.skipType(7 & i);
                                    }
                                  }
                                  return n;
                                }),
                                (t.decodeDelimited = function (e) {
                                  return (
                                    e instanceof c || (e = new c(e)),
                                    this.decode(e, e.uint32())
                                  );
                                }),
                                (t.verify = function (e) {
                                  if ("object" != typeof e || null === e)
                                    return "object expected";
                                  if (
                                    null != e.code &&
                                    e.hasOwnProperty("code") &&
                                    !u.isString(e.code)
                                  )
                                    return "code: string expected";
                                  if (
                                    null != e.streamType &&
                                    e.hasOwnProperty("streamType")
                                  )
                                    switch (e.streamType) {
                                      default:
                                        return "streamType: enum value expected";
                                      case 0:
                                      case 1:
                                    }
                                  return null != e.timestamp &&
                                    e.hasOwnProperty("timestamp") &&
                                    !(
                                      u.isInteger(e.timestamp) ||
                                      (e.timestamp &&
                                        u.isInteger(e.timestamp.low) &&
                                        u.isInteger(e.timestamp.high))
                                    )
                                    ? "timestamp: integer|Long expected"
                                    : null;
                                }),
                                (t.fromObject = function (e) {
                                  if (
                                    e instanceof
                                    m.com.dunamu.crix.front.protobuf.common
                                      .FrontModelInfo
                                  )
                                    return e;
                                  var t =
                                    new m.com.dunamu.crix.front.protobuf.common.FrontModelInfo();
                                  switch (
                                    (null != e.code &&
                                      (t.code = String(e.code)),
                                    e.streamType)
                                  ) {
                                    default:
                                      if ("number" == typeof e.streamType) {
                                        t.streamType = e.streamType;
                                        break;
                                      }
                                      break;
                                    case "SNAPSHOT":
                                    case 0:
                                      t.streamType = 0;
                                      break;
                                    case "REALTIME":
                                    case 1:
                                      t.streamType = 1;
                                  }
                                  return (
                                    null != e.timestamp &&
                                      (u.Long
                                        ? ((t.timestamp = u.Long.fromValue(
                                            e.timestamp
                                          )).unsigned = !1)
                                        : "string" == typeof e.timestamp
                                        ? (t.timestamp = parseInt(
                                            e.timestamp,
                                            10
                                          ))
                                        : "number" == typeof e.timestamp
                                        ? (t.timestamp = e.timestamp)
                                        : "object" == typeof e.timestamp &&
                                          (t.timestamp = new u.LongBits(
                                            e.timestamp.low >>> 0,
                                            e.timestamp.high >>> 0
                                          ).toNumber())),
                                    t
                                  );
                                }),
                                (t.toObject = function (e, t) {
                                  t || (t = {});
                                  var a = {};
                                  if (t.defaults)
                                    if (
                                      ((a.code = ""),
                                      (a.streamType =
                                        t.enums === String ? "SNAPSHOT" : 0),
                                      u.Long)
                                    ) {
                                      var r = new u.Long(0, 0, !1);
                                      a.timestamp =
                                        t.longs === String
                                          ? r.toString()
                                          : t.longs === Number
                                          ? r.toNumber()
                                          : r;
                                    } else
                                      a.timestamp =
                                        t.longs === String ? "0" : 0;
                                  return (
                                    null != e.code &&
                                      e.hasOwnProperty("code") &&
                                      (a.code = e.code),
                                    null != e.streamType &&
                                      e.hasOwnProperty("streamType") &&
                                      (a.streamType =
                                        t.enums === String
                                          ? void 0 ===
                                            m.com.dunamu.crix.front.protobuf
                                              .common.StreamType[e.streamType]
                                            ? e.streamType
                                            : m.com.dunamu.crix.front.protobuf
                                                .common.StreamType[e.streamType]
                                          : e.streamType),
                                    null != e.timestamp &&
                                      e.hasOwnProperty("timestamp") &&
                                      ("number" == typeof e.timestamp
                                        ? (a.timestamp =
                                            t.longs === String
                                              ? String(e.timestamp)
                                              : e.timestamp)
                                        : (a.timestamp =
                                            t.longs === String
                                              ? u.Long.prototype.toString.call(
                                                  e.timestamp
                                                )
                                              : t.longs === Number
                                              ? new u.LongBits(
                                                  e.timestamp.low >>> 0,
                                                  e.timestamp.high >>> 0
                                                ).toNumber()
                                              : e.timestamp)),
                                    a
                                  );
                                }),
                                (t.prototype.toJSON = function () {
                                  return this.constructor.toObject(
                                    this,
                                    e.util.toJSONOptions
                                  );
                                }),
                                (t.getTypeUrl = function (e) {
                                  return (
                                    void 0 === e && (e = "type.googleapis.com"),
                                    e +
                                      "/com.dunamu.crix.front.protobuf.common.FrontModelInfo"
                                  );
                                }),
                                t
                              );
                            })()),
                            (r.PrivateFrontModelInfo = (function () {
                              function t(e) {
                                if (((this.accessKeys = []), e))
                                  for (
                                    var t = Object.keys(e), a = 0;
                                    a < t.length;
                                    ++a
                                  )
                                    null != e[t[a]] && (this[t[a]] = e[t[a]]);
                              }
                              return (
                                (t.prototype.frontModelInfo = null),
                                (t.prototype.accessKeys = u.emptyArray),
                                (t.create = function (e) {
                                  return new t(e);
                                }),
                                (t.encode = function (e, t) {
                                  if (
                                    (t || (t = d.create()),
                                    null != e.frontModelInfo &&
                                      Object.hasOwnProperty.call(
                                        e,
                                        "frontModelInfo"
                                      ) &&
                                      m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.encode(
                                        e.frontModelInfo,
                                        t.uint32(10).fork()
                                      ).ldelim(),
                                    null != e.accessKeys && e.accessKeys.length)
                                  )
                                    for (
                                      var a = 0;
                                      a < e.accessKeys.length;
                                      ++a
                                    )
                                      t.uint32(18).string(e.accessKeys[a]);
                                  return t;
                                }),
                                (t.encodeDelimited = function (e, t) {
                                  return this.encode(e, t).ldelim();
                                }),
                                (t.decode = function (e, t, a) {
                                  e instanceof c || (e = c.create(e));
                                  for (
                                    var r = void 0 === t ? e.len : e.pos + t,
                                      n =
                                        new m.com.dunamu.crix.front.protobuf.common.PrivateFrontModelInfo();
                                    e.pos < r;

                                  ) {
                                    var i = e.uint32();
                                    if (i === a) break;
                                    switch (i >>> 3) {
                                      case 1:
                                        n.frontModelInfo =
                                          m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.decode(
                                            e,
                                            e.uint32()
                                          );
                                        break;
                                      case 2:
                                        (n.accessKeys && n.accessKeys.length) ||
                                          (n.accessKeys = []),
                                          n.accessKeys.push(e.string());
                                        break;
                                      default:
                                        e.skipType(7 & i);
                                    }
                                  }
                                  return n;
                                }),
                                (t.decodeDelimited = function (e) {
                                  return (
                                    e instanceof c || (e = new c(e)),
                                    this.decode(e, e.uint32())
                                  );
                                }),
                                (t.verify = function (e) {
                                  if ("object" != typeof e || null === e)
                                    return "object expected";
                                  if (
                                    null != e.frontModelInfo &&
                                    e.hasOwnProperty("frontModelInfo")
                                  ) {
                                    var t =
                                      m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.verify(
                                        e.frontModelInfo
                                      );
                                    if (t) return "frontModelInfo." + t;
                                  }
                                  if (
                                    null != e.accessKeys &&
                                    e.hasOwnProperty("accessKeys")
                                  ) {
                                    if (!Array.isArray(e.accessKeys))
                                      return "accessKeys: array expected";
                                    for (
                                      var a = 0;
                                      a < e.accessKeys.length;
                                      ++a
                                    )
                                      if (!u.isString(e.accessKeys[a]))
                                        return "accessKeys: string[] expected";
                                  }
                                  return null;
                                }),
                                (t.fromObject = function (e) {
                                  if (
                                    e instanceof
                                    m.com.dunamu.crix.front.protobuf.common
                                      .PrivateFrontModelInfo
                                  )
                                    return e;
                                  var t =
                                    new m.com.dunamu.crix.front.protobuf.common.PrivateFrontModelInfo();
                                  if (null != e.frontModelInfo) {
                                    if ("object" != typeof e.frontModelInfo)
                                      throw TypeError(
                                        ".com.dunamu.crix.front.protobuf.common.PrivateFrontModelInfo.frontModelInfo: object expected"
                                      );
                                    t.frontModelInfo =
                                      m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.fromObject(
                                        e.frontModelInfo
                                      );
                                  }
                                  if (e.accessKeys) {
                                    if (!Array.isArray(e.accessKeys))
                                      throw TypeError(
                                        ".com.dunamu.crix.front.protobuf.common.PrivateFrontModelInfo.accessKeys: array expected"
                                      );
                                    t.accessKeys = [];
                                    for (
                                      var a = 0;
                                      a < e.accessKeys.length;
                                      ++a
                                    )
                                      t.accessKeys[a] = String(e.accessKeys[a]);
                                  }
                                  return t;
                                }),
                                (t.toObject = function (e, t) {
                                  t || (t = {});
                                  var a = {};
                                  if (
                                    ((t.arrays || t.defaults) &&
                                      (a.accessKeys = []),
                                    t.defaults && (a.frontModelInfo = null),
                                    null != e.frontModelInfo &&
                                      e.hasOwnProperty("frontModelInfo") &&
                                      (a.frontModelInfo =
                                        m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.toObject(
                                          e.frontModelInfo,
                                          t
                                        )),
                                    e.accessKeys && e.accessKeys.length)
                                  ) {
                                    a.accessKeys = [];
                                    for (
                                      var r = 0;
                                      r < e.accessKeys.length;
                                      ++r
                                    )
                                      a.accessKeys[r] = e.accessKeys[r];
                                  }
                                  return a;
                                }),
                                (t.prototype.toJSON = function () {
                                  return this.constructor.toObject(
                                    this,
                                    e.util.toJSONOptions
                                  );
                                }),
                                (t.getTypeUrl = function (e) {
                                  return (
                                    void 0 === e && (e = "type.googleapis.com"),
                                    e +
                                      "/com.dunamu.crix.front.protobuf.common.PrivateFrontModelInfo"
                                  );
                                }),
                                t
                              );
                            })()),
                            (r.AskBid =
                              ((t = {}),
                              ((a = Object.create(t))[
                                (t[0] = "ASKUNKNOWN")
                              ] = 0),
                              (a[(t[1] = "ASK")] = 1),
                              (a[(t[2] = "BID")] = 2),
                              a)),
                            (r.Change = (function () {
                              var e = {},
                                t = Object.create(e);
                              return (
                                (t[(e[0] = "CHANGEUNKNOWN")] = 0),
                                (t[(e[1] = "UPPER_LIMIT")] = 1),
                                (t[(e[2] = "RISE")] = 2),
                                (t[(e[3] = "EVEN")] = 3),
                                (t[(e[4] = "LOWER_LIMIT")] = 4),
                                (t[(e[5] = "FALL")] = 5),
                                t
                              );
                            })()),
                            (r.CrixMarketWarning = (function () {
                              var e = {},
                                t = Object.create(e);
                              return (
                                (t[(e[0] = "NONE")] = 0),
                                (t[(e[1] = "CAUTION")] = 1),
                                (t[(e[2] = "ALERT")] = 2),
                                (t[(e[3] = "RISK")] = 3),
                                t
                              );
                            })()),
                            (r.CrixMarketState = (function () {
                              var e = {},
                                t = Object.create(e);
                              return (
                                (t[(e[0] = "PREVIEW")] = 0),
                                (t[(e[1] = "ACTIVE")] = 1),
                                (t[(e[2] = "UNAVAILABLE")] = 2),
                                (t[(e[3] = "PREDELISTING")] = 3),
                                (t[(e[4] = "DELISTED")] = 4),
                                t
                              );
                            })()),
                            (r.CrixOrderState = (function () {
                              var e = {},
                                t = Object.create(e);
                              return (
                                (t[(e[0] = "WAIT")] = 0),
                                (t[(e[1] = "CANCEL")] = 1),
                                (t[(e[2] = "DONE")] = 2),
                                (t[(e[3] = "TRADE")] = 3),
                                (t[(e[4] = "WATCH")] = 4),
                                (t[(e[5] = "PREVENTED")] = 5),
                                t
                              );
                            })()),
                            (r.StreamType = (function () {
                              var e = {},
                                t = Object.create(e);
                              return (
                                (t[(e[0] = "SNAPSHOT")] = 0),
                                (t[(e[1] = "REALTIME")] = 1),
                                t
                              );
                            })()),
                            (r.MarketEventType = (function () {
                              var e = {},
                                t = Object.create(e);
                              return (
                                (t[(e[0] = "MARKET_WARNING")] = 0),
                                (t[(e[1] = "TRADING_SUSPENDED")] = 1),
                                (t[(e[2] = "PRICE_FLUCTUATIONS")] = 2),
                                (t[(e[3] = "TRADING_VOLUME_SOARING")] = 3),
                                (t[(e[4] = "DEPOSIT_AMOUNT_SOARING")] = 4),
                                (t[(e[5] = "GLOBAL_PRICE_DIFFERENCES")] = 5),
                                (t[
                                  (e[6] = "CONCENTRATION_OF_SMALL_ACCOUNTS")
                                ] = 6),
                                (t[(e[7] = "TRADE_FEE_STATE")] = 7),
                                (t[(e[8] = "MEME")] = 8),
                                t
                              );
                            })()),
                            r)),
                          (n.FrontError = (function () {
                            function t(e) {
                              if (e)
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.code = 0),
                              (t.prototype.message = ""),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                return (
                                  t || (t = d.create()),
                                  null != e.code &&
                                    Object.hasOwnProperty.call(e, "code") &&
                                    t.uint32(8).uint32(e.code),
                                  null != e.message &&
                                    Object.hasOwnProperty.call(e, "message") &&
                                    t.uint32(18).string(e.message),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.FrontError();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.code = e.uint32();
                                      break;
                                    case 2:
                                      n.message = e.string();
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                return "object" != typeof e || null === e
                                  ? "object expected"
                                  : null != e.code &&
                                    e.hasOwnProperty("code") &&
                                    !u.isInteger(e.code)
                                  ? "code: integer expected"
                                  : null != e.message &&
                                    e.hasOwnProperty("message") &&
                                    !u.isString(e.message)
                                  ? "message: string expected"
                                  : null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf.FrontError
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.FrontError();
                                return (
                                  null != e.code && (t.code = e.code >>> 0),
                                  null != e.message &&
                                    (t.message = String(e.message)),
                                  t
                                );
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                return (
                                  t.defaults &&
                                    ((a.code = 0), (a.message = "")),
                                  null != e.code &&
                                    e.hasOwnProperty("code") &&
                                    (a.code = e.code),
                                  null != e.message &&
                                    e.hasOwnProperty("message") &&
                                    (a.message = e.message),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.FrontError"
                                );
                              }),
                              t
                            );
                          })()),
                          (n.PingMessage = (function () {
                            function t(e) {
                              if (e)
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.status = ""),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                return (
                                  t || (t = d.create()),
                                  null != e.status &&
                                    Object.hasOwnProperty.call(e, "status") &&
                                    t.uint32(10).string(e.status),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.PingMessage();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  i >>> 3 == 1
                                    ? (n.status = e.string())
                                    : e.skipType(7 & i);
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                return "object" != typeof e || null === e
                                  ? "object expected"
                                  : null != e.status &&
                                    e.hasOwnProperty("status") &&
                                    !u.isString(e.status)
                                  ? "status: string expected"
                                  : null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf.PingMessage
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.PingMessage();
                                return (
                                  null != e.status &&
                                    (t.status = String(e.status)),
                                  t
                                );
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                return (
                                  t.defaults && (a.status = ""),
                                  null != e.status &&
                                    e.hasOwnProperty("status") &&
                                    (a.status = e.status),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.PingMessage"
                                );
                              }),
                              t
                            );
                          })()),
                          (n.CrixEvent = (function () {
                            function t(e) {
                              if (((this.marketEvents = []), e))
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.frontModelInfo = null),
                              (t.prototype.marketEvents = u.emptyArray),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                if (
                                  (t || (t = d.create()),
                                  null != e.frontModelInfo &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "frontModelInfo"
                                    ) &&
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.encode(
                                      e.frontModelInfo,
                                      t.uint32(10).fork()
                                    ).ldelim(),
                                  null != e.marketEvents &&
                                    e.marketEvents.length)
                                )
                                  for (
                                    var a = 0;
                                    a < e.marketEvents.length;
                                    ++a
                                  )
                                    m.com.dunamu.crix.front.protobuf.RecentMarketEvent.encode(
                                      e.marketEvents[a],
                                      t.uint32(18).fork()
                                    ).ldelim();
                                return t;
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.CrixEvent();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.frontModelInfo =
                                        m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 2:
                                      (n.marketEvents &&
                                        n.marketEvents.length) ||
                                        (n.marketEvents = []),
                                        n.marketEvents.push(
                                          m.com.dunamu.crix.front.protobuf.RecentMarketEvent.decode(
                                            e,
                                            e.uint32()
                                          )
                                        );
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                if ("object" != typeof e || null === e)
                                  return "object expected";
                                if (
                                  null != e.frontModelInfo &&
                                  e.hasOwnProperty("frontModelInfo") &&
                                  (a =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.verify(
                                      e.frontModelInfo
                                    ))
                                )
                                  return "frontModelInfo." + a;
                                if (
                                  null != e.marketEvents &&
                                  e.hasOwnProperty("marketEvents")
                                ) {
                                  if (!Array.isArray(e.marketEvents))
                                    return "marketEvents: array expected";
                                  for (
                                    var t = 0;
                                    t < e.marketEvents.length;
                                    ++t
                                  ) {
                                    var a;
                                    if (
                                      (a =
                                        m.com.dunamu.crix.front.protobuf.RecentMarketEvent.verify(
                                          e.marketEvents[t]
                                        ))
                                    )
                                      return "marketEvents." + a;
                                  }
                                }
                                return null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf.CrixEvent
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.CrixEvent();
                                if (null != e.frontModelInfo) {
                                  if ("object" != typeof e.frontModelInfo)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.CrixEvent.frontModelInfo: object expected"
                                    );
                                  t.frontModelInfo =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.fromObject(
                                      e.frontModelInfo
                                    );
                                }
                                if (e.marketEvents) {
                                  if (!Array.isArray(e.marketEvents))
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.CrixEvent.marketEvents: array expected"
                                    );
                                  t.marketEvents = [];
                                  for (
                                    var a = 0;
                                    a < e.marketEvents.length;
                                    ++a
                                  ) {
                                    if ("object" != typeof e.marketEvents[a])
                                      throw TypeError(
                                        ".com.dunamu.crix.front.protobuf.CrixEvent.marketEvents: object expected"
                                      );
                                    t.marketEvents[a] =
                                      m.com.dunamu.crix.front.protobuf.RecentMarketEvent.fromObject(
                                        e.marketEvents[a]
                                      );
                                  }
                                }
                                return t;
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                if (
                                  ((t.arrays || t.defaults) &&
                                    (a.marketEvents = []),
                                  t.defaults && (a.frontModelInfo = null),
                                  null != e.frontModelInfo &&
                                    e.hasOwnProperty("frontModelInfo") &&
                                    (a.frontModelInfo =
                                      m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.toObject(
                                        e.frontModelInfo,
                                        t
                                      )),
                                  e.marketEvents && e.marketEvents.length)
                                ) {
                                  a.marketEvents = [];
                                  for (
                                    var r = 0;
                                    r < e.marketEvents.length;
                                    ++r
                                  )
                                    a.marketEvents[r] =
                                      m.com.dunamu.crix.front.protobuf.RecentMarketEvent.toObject(
                                        e.marketEvents[r],
                                        t
                                      );
                                }
                                return a;
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.CrixEvent"
                                );
                              }),
                              t
                            );
                          })()),
                          (n.RecentMarketEvent = (function () {
                            function t(e) {
                              if (((this.details = []), e))
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.eventType = 0),
                              (t.prototype.message = ""),
                              (t.prototype.link = ""),
                              (t.prototype.triggerTimeUtc = ""),
                              (t.prototype.expirationTimeUtc = ""),
                              (t.prototype.triggerTimeKst = ""),
                              (t.prototype.expirationTimeKst = ""),
                              (t.prototype.details = u.emptyArray),
                              (t.prototype.timestamp = u.Long
                                ? u.Long.fromBits(0, 0, !0)
                                : 0),
                              (t.prototype.warningLevel = 0),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                if (
                                  (t || (t = d.create()),
                                  null != e.eventType &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "eventType"
                                    ) &&
                                    t.uint32(8).int32(e.eventType),
                                  null != e.message &&
                                    Object.hasOwnProperty.call(e, "message") &&
                                    t.uint32(18).string(e.message),
                                  null != e.link &&
                                    Object.hasOwnProperty.call(e, "link") &&
                                    t.uint32(26).string(e.link),
                                  null != e.triggerTimeUtc &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "triggerTimeUtc"
                                    ) &&
                                    t.uint32(34).string(e.triggerTimeUtc),
                                  null != e.expirationTimeUtc &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "expirationTimeUtc"
                                    ) &&
                                    t.uint32(42).string(e.expirationTimeUtc),
                                  null != e.triggerTimeKst &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "triggerTimeKst"
                                    ) &&
                                    t.uint32(50).string(e.triggerTimeKst),
                                  null != e.expirationTimeKst &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "expirationTimeKst"
                                    ) &&
                                    t.uint32(58).string(e.expirationTimeKst),
                                  null != e.details && e.details.length)
                                )
                                  for (var a = 0; a < e.details.length; ++a)
                                    m.com.dunamu.crix.front.protobuf.MarketEventDetail.encode(
                                      e.details[a],
                                      t.uint32(66).fork()
                                    ).ldelim();
                                return (
                                  null != e.timestamp &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "timestamp"
                                    ) &&
                                    t.uint32(72).uint64(e.timestamp),
                                  null != e.warningLevel &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "warningLevel"
                                    ) &&
                                    t.uint32(80).uint32(e.warningLevel),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.RecentMarketEvent();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.eventType = e.int32();
                                      break;
                                    case 2:
                                      n.message = e.string();
                                      break;
                                    case 3:
                                      n.link = e.string();
                                      break;
                                    case 4:
                                      n.triggerTimeUtc = e.string();
                                      break;
                                    case 5:
                                      n.expirationTimeUtc = e.string();
                                      break;
                                    case 6:
                                      n.triggerTimeKst = e.string();
                                      break;
                                    case 7:
                                      n.expirationTimeKst = e.string();
                                      break;
                                    case 8:
                                      (n.details && n.details.length) ||
                                        (n.details = []),
                                        n.details.push(
                                          m.com.dunamu.crix.front.protobuf.MarketEventDetail.decode(
                                            e,
                                            e.uint32()
                                          )
                                        );
                                      break;
                                    case 9:
                                      n.timestamp = e.uint64();
                                      break;
                                    case 10:
                                      n.warningLevel = e.uint32();
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                if ("object" != typeof e || null === e)
                                  return "object expected";
                                if (
                                  null != e.eventType &&
                                  e.hasOwnProperty("eventType")
                                )
                                  switch (e.eventType) {
                                    default:
                                      return "eventType: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                    case 7:
                                    case 8:
                                  }
                                if (
                                  null != e.message &&
                                  e.hasOwnProperty("message") &&
                                  !u.isString(e.message)
                                )
                                  return "message: string expected";
                                if (
                                  null != e.link &&
                                  e.hasOwnProperty("link") &&
                                  !u.isString(e.link)
                                )
                                  return "link: string expected";
                                if (
                                  null != e.triggerTimeUtc &&
                                  e.hasOwnProperty("triggerTimeUtc") &&
                                  !u.isString(e.triggerTimeUtc)
                                )
                                  return "triggerTimeUtc: string expected";
                                if (
                                  null != e.expirationTimeUtc &&
                                  e.hasOwnProperty("expirationTimeUtc") &&
                                  !u.isString(e.expirationTimeUtc)
                                )
                                  return "expirationTimeUtc: string expected";
                                if (
                                  null != e.triggerTimeKst &&
                                  e.hasOwnProperty("triggerTimeKst") &&
                                  !u.isString(e.triggerTimeKst)
                                )
                                  return "triggerTimeKst: string expected";
                                if (
                                  null != e.expirationTimeKst &&
                                  e.hasOwnProperty("expirationTimeKst") &&
                                  !u.isString(e.expirationTimeKst)
                                )
                                  return "expirationTimeKst: string expected";
                                if (
                                  null != e.details &&
                                  e.hasOwnProperty("details")
                                ) {
                                  if (!Array.isArray(e.details))
                                    return "details: array expected";
                                  for (var t = 0; t < e.details.length; ++t) {
                                    var a =
                                      m.com.dunamu.crix.front.protobuf.MarketEventDetail.verify(
                                        e.details[t]
                                      );
                                    if (a) return "details." + a;
                                  }
                                }
                                return null != e.timestamp &&
                                  e.hasOwnProperty("timestamp") &&
                                  !(
                                    u.isInteger(e.timestamp) ||
                                    (e.timestamp &&
                                      u.isInteger(e.timestamp.low) &&
                                      u.isInteger(e.timestamp.high))
                                  )
                                  ? "timestamp: integer|Long expected"
                                  : null != e.warningLevel &&
                                    e.hasOwnProperty("warningLevel") &&
                                    !u.isInteger(e.warningLevel)
                                  ? "warningLevel: integer expected"
                                  : null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf
                                    .RecentMarketEvent
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.RecentMarketEvent();
                                switch (e.eventType) {
                                  default:
                                    if ("number" == typeof e.eventType) {
                                      t.eventType = e.eventType;
                                      break;
                                    }
                                    break;
                                  case "MARKET_WARNING":
                                  case 0:
                                    t.eventType = 0;
                                    break;
                                  case "TRADING_SUSPENDED":
                                  case 1:
                                    t.eventType = 1;
                                    break;
                                  case "PRICE_FLUCTUATIONS":
                                  case 2:
                                    t.eventType = 2;
                                    break;
                                  case "TRADING_VOLUME_SOARING":
                                  case 3:
                                    t.eventType = 3;
                                    break;
                                  case "DEPOSIT_AMOUNT_SOARING":
                                  case 4:
                                    t.eventType = 4;
                                    break;
                                  case "GLOBAL_PRICE_DIFFERENCES":
                                  case 5:
                                    t.eventType = 5;
                                    break;
                                  case "CONCENTRATION_OF_SMALL_ACCOUNTS":
                                  case 6:
                                    t.eventType = 6;
                                    break;
                                  case "TRADE_FEE_STATE":
                                  case 7:
                                    t.eventType = 7;
                                    break;
                                  case "MEME":
                                  case 8:
                                    t.eventType = 8;
                                }
                                if (
                                  (null != e.message &&
                                    (t.message = String(e.message)),
                                  null != e.link && (t.link = String(e.link)),
                                  null != e.triggerTimeUtc &&
                                    (t.triggerTimeUtc = String(
                                      e.triggerTimeUtc
                                    )),
                                  null != e.expirationTimeUtc &&
                                    (t.expirationTimeUtc = String(
                                      e.expirationTimeUtc
                                    )),
                                  null != e.triggerTimeKst &&
                                    (t.triggerTimeKst = String(
                                      e.triggerTimeKst
                                    )),
                                  null != e.expirationTimeKst &&
                                    (t.expirationTimeKst = String(
                                      e.expirationTimeKst
                                    )),
                                  e.details)
                                ) {
                                  if (!Array.isArray(e.details))
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.RecentMarketEvent.details: array expected"
                                    );
                                  t.details = [];
                                  for (var a = 0; a < e.details.length; ++a) {
                                    if ("object" != typeof e.details[a])
                                      throw TypeError(
                                        ".com.dunamu.crix.front.protobuf.RecentMarketEvent.details: object expected"
                                      );
                                    t.details[a] =
                                      m.com.dunamu.crix.front.protobuf.MarketEventDetail.fromObject(
                                        e.details[a]
                                      );
                                  }
                                }
                                return (
                                  null != e.timestamp &&
                                    (u.Long
                                      ? ((t.timestamp = u.Long.fromValue(
                                          e.timestamp
                                        )).unsigned = !0)
                                      : "string" == typeof e.timestamp
                                      ? (t.timestamp = parseInt(
                                          e.timestamp,
                                          10
                                        ))
                                      : "number" == typeof e.timestamp
                                      ? (t.timestamp = e.timestamp)
                                      : "object" == typeof e.timestamp &&
                                        (t.timestamp = new u.LongBits(
                                          e.timestamp.low >>> 0,
                                          e.timestamp.high >>> 0
                                        ).toNumber(!0))),
                                  null != e.warningLevel &&
                                    (t.warningLevel = e.warningLevel >>> 0),
                                  t
                                );
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                if (
                                  ((t.arrays || t.defaults) && (a.details = []),
                                  t.defaults)
                                ) {
                                  if (
                                    ((a.eventType =
                                      t.enums === String
                                        ? "MARKET_WARNING"
                                        : 0),
                                    (a.message = ""),
                                    (a.link = ""),
                                    (a.triggerTimeUtc = ""),
                                    (a.expirationTimeUtc = ""),
                                    (a.triggerTimeKst = ""),
                                    (a.expirationTimeKst = ""),
                                    u.Long)
                                  ) {
                                    var r = new u.Long(0, 0, !0);
                                    a.timestamp =
                                      t.longs === String
                                        ? r.toString()
                                        : t.longs === Number
                                        ? r.toNumber()
                                        : r;
                                  } else
                                    a.timestamp = t.longs === String ? "0" : 0;
                                  a.warningLevel = 0;
                                }
                                if (
                                  (null != e.eventType &&
                                    e.hasOwnProperty("eventType") &&
                                    (a.eventType =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.MarketEventType[e.eventType]
                                          ? e.eventType
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.MarketEventType[
                                              e.eventType
                                            ]
                                        : e.eventType),
                                  null != e.message &&
                                    e.hasOwnProperty("message") &&
                                    (a.message = e.message),
                                  null != e.link &&
                                    e.hasOwnProperty("link") &&
                                    (a.link = e.link),
                                  null != e.triggerTimeUtc &&
                                    e.hasOwnProperty("triggerTimeUtc") &&
                                    (a.triggerTimeUtc = e.triggerTimeUtc),
                                  null != e.expirationTimeUtc &&
                                    e.hasOwnProperty("expirationTimeUtc") &&
                                    (a.expirationTimeUtc = e.expirationTimeUtc),
                                  null != e.triggerTimeKst &&
                                    e.hasOwnProperty("triggerTimeKst") &&
                                    (a.triggerTimeKst = e.triggerTimeKst),
                                  null != e.expirationTimeKst &&
                                    e.hasOwnProperty("expirationTimeKst") &&
                                    (a.expirationTimeKst = e.expirationTimeKst),
                                  e.details && e.details.length)
                                ) {
                                  a.details = [];
                                  for (var n = 0; n < e.details.length; ++n)
                                    a.details[n] =
                                      m.com.dunamu.crix.front.protobuf.MarketEventDetail.toObject(
                                        e.details[n],
                                        t
                                      );
                                }
                                return (
                                  null != e.timestamp &&
                                    e.hasOwnProperty("timestamp") &&
                                    ("number" == typeof e.timestamp
                                      ? (a.timestamp =
                                          t.longs === String
                                            ? String(e.timestamp)
                                            : e.timestamp)
                                      : (a.timestamp =
                                          t.longs === String
                                            ? u.Long.prototype.toString.call(
                                                e.timestamp
                                              )
                                            : t.longs === Number
                                            ? new u.LongBits(
                                                e.timestamp.low >>> 0,
                                                e.timestamp.high >>> 0
                                              ).toNumber(!0)
                                            : e.timestamp)),
                                  null != e.warningLevel &&
                                    e.hasOwnProperty("warningLevel") &&
                                    (a.warningLevel = e.warningLevel),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.RecentMarketEvent"
                                );
                              }),
                              t
                            );
                          })()),
                          (n.MarketEventDetail = (function () {
                            function t(e) {
                              if (e)
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.name = ""),
                              (t.prototype.value = ""),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                return (
                                  t || (t = d.create()),
                                  null != e.name &&
                                    Object.hasOwnProperty.call(e, "name") &&
                                    t.uint32(10).string(e.name),
                                  null != e.value &&
                                    Object.hasOwnProperty.call(e, "value") &&
                                    t.uint32(18).string(e.value),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.MarketEventDetail();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.name = e.string();
                                      break;
                                    case 2:
                                      n.value = e.string();
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                return "object" != typeof e || null === e
                                  ? "object expected"
                                  : null != e.name &&
                                    e.hasOwnProperty("name") &&
                                    !u.isString(e.name)
                                  ? "name: string expected"
                                  : null != e.value &&
                                    e.hasOwnProperty("value") &&
                                    !u.isString(e.value)
                                  ? "value: string expected"
                                  : null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf
                                    .MarketEventDetail
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.MarketEventDetail();
                                return (
                                  null != e.name && (t.name = String(e.name)),
                                  null != e.value &&
                                    (t.value = String(e.value)),
                                  t
                                );
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                return (
                                  t.defaults && ((a.name = ""), (a.value = "")),
                                  null != e.name &&
                                    e.hasOwnProperty("name") &&
                                    (a.name = e.name),
                                  null != e.value &&
                                    e.hasOwnProperty("value") &&
                                    (a.value = e.value),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.MarketEventDetail"
                                );
                              }),
                              t
                            );
                          })()),
                          (n.CrixOrder = (function () {
                            function t(e) {
                              if (e)
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.frontModelInfo = null),
                              (t.prototype.askBid = 0),
                              (t.prototype.price = 0),
                              (t.prototype.volume = 0),
                              (t.prototype.uuid = ""),
                              (t.prototype.orderType = ""),
                              (t.prototype.state = 0),
                              (t.prototype.orderTimestamp = u.Long
                                ? u.Long.fromBits(0, 0, !0)
                                : 0),
                              (t.prototype.tradeUuid = ""),
                              (t.prototype.tradeTimestamp = u.Long
                                ? u.Long.fromBits(0, 0, !0)
                                : 0),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                return (
                                  t || (t = d.create()),
                                  null != e.frontModelInfo &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "frontModelInfo"
                                    ) &&
                                    m.com.dunamu.crix.front.protobuf.common.PrivateFrontModelInfo.encode(
                                      e.frontModelInfo,
                                      t.uint32(10).fork()
                                    ).ldelim(),
                                  null != e.askBid &&
                                    Object.hasOwnProperty.call(e, "askBid") &&
                                    t.uint32(16).int32(e.askBid),
                                  null != e.price &&
                                    Object.hasOwnProperty.call(e, "price") &&
                                    t.uint32(25).double(e.price),
                                  null != e.volume &&
                                    Object.hasOwnProperty.call(e, "volume") &&
                                    t.uint32(33).double(e.volume),
                                  null != e.uuid &&
                                    Object.hasOwnProperty.call(e, "uuid") &&
                                    t.uint32(42).string(e.uuid),
                                  null != e.orderType &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "orderType"
                                    ) &&
                                    t.uint32(50).string(e.orderType),
                                  null != e.state &&
                                    Object.hasOwnProperty.call(e, "state") &&
                                    t.uint32(56).int32(e.state),
                                  null != e.orderTimestamp &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "orderTimestamp"
                                    ) &&
                                    t.uint32(64).uint64(e.orderTimestamp),
                                  null != e.tradeUuid &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeUuid"
                                    ) &&
                                    t.uint32(74).string(e.tradeUuid),
                                  null != e.tradeTimestamp &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeTimestamp"
                                    ) &&
                                    t.uint32(80).uint64(e.tradeTimestamp),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.CrixOrder();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.frontModelInfo =
                                        m.com.dunamu.crix.front.protobuf.common.PrivateFrontModelInfo.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 2:
                                      n.askBid = e.int32();
                                      break;
                                    case 3:
                                      n.price = e.double();
                                      break;
                                    case 4:
                                      n.volume = e.double();
                                      break;
                                    case 5:
                                      n.uuid = e.string();
                                      break;
                                    case 6:
                                      n.orderType = e.string();
                                      break;
                                    case 7:
                                      n.state = e.int32();
                                      break;
                                    case 8:
                                      n.orderTimestamp = e.uint64();
                                      break;
                                    case 9:
                                      n.tradeUuid = e.string();
                                      break;
                                    case 10:
                                      n.tradeTimestamp = e.uint64();
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                if ("object" != typeof e || null === e)
                                  return "object expected";
                                if (
                                  null != e.frontModelInfo &&
                                  e.hasOwnProperty("frontModelInfo")
                                ) {
                                  var t =
                                    m.com.dunamu.crix.front.protobuf.common.PrivateFrontModelInfo.verify(
                                      e.frontModelInfo
                                    );
                                  if (t) return "frontModelInfo." + t;
                                }
                                if (
                                  null != e.askBid &&
                                  e.hasOwnProperty("askBid")
                                )
                                  switch (e.askBid) {
                                    default:
                                      return "askBid: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                  }
                                if (
                                  null != e.price &&
                                  e.hasOwnProperty("price") &&
                                  "number" != typeof e.price
                                )
                                  return "price: number expected";
                                if (
                                  null != e.volume &&
                                  e.hasOwnProperty("volume") &&
                                  "number" != typeof e.volume
                                )
                                  return "volume: number expected";
                                if (
                                  null != e.uuid &&
                                  e.hasOwnProperty("uuid") &&
                                  !u.isString(e.uuid)
                                )
                                  return "uuid: string expected";
                                if (
                                  null != e.orderType &&
                                  e.hasOwnProperty("orderType") &&
                                  !u.isString(e.orderType)
                                )
                                  return "orderType: string expected";
                                if (
                                  null != e.state &&
                                  e.hasOwnProperty("state")
                                )
                                  switch (e.state) {
                                    default:
                                      return "state: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                  }
                                return null != e.orderTimestamp &&
                                  e.hasOwnProperty("orderTimestamp") &&
                                  !(
                                    u.isInteger(e.orderTimestamp) ||
                                    (e.orderTimestamp &&
                                      u.isInteger(e.orderTimestamp.low) &&
                                      u.isInteger(e.orderTimestamp.high))
                                  )
                                  ? "orderTimestamp: integer|Long expected"
                                  : null != e.tradeUuid &&
                                    e.hasOwnProperty("tradeUuid") &&
                                    !u.isString(e.tradeUuid)
                                  ? "tradeUuid: string expected"
                                  : null != e.tradeTimestamp &&
                                    e.hasOwnProperty("tradeTimestamp") &&
                                    !(
                                      u.isInteger(e.tradeTimestamp) ||
                                      (e.tradeTimestamp &&
                                        u.isInteger(e.tradeTimestamp.low) &&
                                        u.isInteger(e.tradeTimestamp.high))
                                    )
                                  ? "tradeTimestamp: integer|Long expected"
                                  : null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf.CrixOrder
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.CrixOrder();
                                if (null != e.frontModelInfo) {
                                  if ("object" != typeof e.frontModelInfo)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.CrixOrder.frontModelInfo: object expected"
                                    );
                                  t.frontModelInfo =
                                    m.com.dunamu.crix.front.protobuf.common.PrivateFrontModelInfo.fromObject(
                                      e.frontModelInfo
                                    );
                                }
                                switch (e.askBid) {
                                  default:
                                    if ("number" == typeof e.askBid) {
                                      t.askBid = e.askBid;
                                      break;
                                    }
                                    break;
                                  case "ASKUNKNOWN":
                                  case 0:
                                    t.askBid = 0;
                                    break;
                                  case "ASK":
                                  case 1:
                                    t.askBid = 1;
                                    break;
                                  case "BID":
                                  case 2:
                                    t.askBid = 2;
                                }
                                switch (
                                  (null != e.price &&
                                    (t.price = Number(e.price)),
                                  null != e.volume &&
                                    (t.volume = Number(e.volume)),
                                  null != e.uuid && (t.uuid = String(e.uuid)),
                                  null != e.orderType &&
                                    (t.orderType = String(e.orderType)),
                                  e.state)
                                ) {
                                  default:
                                    if ("number" == typeof e.state) {
                                      t.state = e.state;
                                      break;
                                    }
                                    break;
                                  case "WAIT":
                                  case 0:
                                    t.state = 0;
                                    break;
                                  case "CANCEL":
                                  case 1:
                                    t.state = 1;
                                    break;
                                  case "DONE":
                                  case 2:
                                    t.state = 2;
                                    break;
                                  case "TRADE":
                                  case 3:
                                    t.state = 3;
                                    break;
                                  case "WATCH":
                                  case 4:
                                    t.state = 4;
                                    break;
                                  case "PREVENTED":
                                  case 5:
                                    t.state = 5;
                                }
                                return (
                                  null != e.orderTimestamp &&
                                    (u.Long
                                      ? ((t.orderTimestamp = u.Long.fromValue(
                                          e.orderTimestamp
                                        )).unsigned = !0)
                                      : "string" == typeof e.orderTimestamp
                                      ? (t.orderTimestamp = parseInt(
                                          e.orderTimestamp,
                                          10
                                        ))
                                      : "number" == typeof e.orderTimestamp
                                      ? (t.orderTimestamp = e.orderTimestamp)
                                      : "object" == typeof e.orderTimestamp &&
                                        (t.orderTimestamp = new u.LongBits(
                                          e.orderTimestamp.low >>> 0,
                                          e.orderTimestamp.high >>> 0
                                        ).toNumber(!0))),
                                  null != e.tradeUuid &&
                                    (t.tradeUuid = String(e.tradeUuid)),
                                  null != e.tradeTimestamp &&
                                    (u.Long
                                      ? ((t.tradeTimestamp = u.Long.fromValue(
                                          e.tradeTimestamp
                                        )).unsigned = !0)
                                      : "string" == typeof e.tradeTimestamp
                                      ? (t.tradeTimestamp = parseInt(
                                          e.tradeTimestamp,
                                          10
                                        ))
                                      : "number" == typeof e.tradeTimestamp
                                      ? (t.tradeTimestamp = e.tradeTimestamp)
                                      : "object" == typeof e.tradeTimestamp &&
                                        (t.tradeTimestamp = new u.LongBits(
                                          e.tradeTimestamp.low >>> 0,
                                          e.tradeTimestamp.high >>> 0
                                        ).toNumber(!0))),
                                  t
                                );
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                if (t.defaults) {
                                  if (
                                    ((a.frontModelInfo = null),
                                    (a.askBid =
                                      t.enums === String ? "ASKUNKNOWN" : 0),
                                    (a.price = 0),
                                    (a.volume = 0),
                                    (a.uuid = ""),
                                    (a.orderType = ""),
                                    (a.state = t.enums === String ? "WAIT" : 0),
                                    u.Long)
                                  ) {
                                    var r = new u.Long(0, 0, !0);
                                    a.orderTimestamp =
                                      t.longs === String
                                        ? r.toString()
                                        : t.longs === Number
                                        ? r.toNumber()
                                        : r;
                                  } else
                                    a.orderTimestamp =
                                      t.longs === String ? "0" : 0;
                                  (a.tradeUuid = ""),
                                    u.Long
                                      ? ((r = new u.Long(0, 0, !0)),
                                        (a.tradeTimestamp =
                                          t.longs === String
                                            ? r.toString()
                                            : t.longs === Number
                                            ? r.toNumber()
                                            : r))
                                      : (a.tradeTimestamp =
                                          t.longs === String ? "0" : 0);
                                }
                                return (
                                  null != e.frontModelInfo &&
                                    e.hasOwnProperty("frontModelInfo") &&
                                    (a.frontModelInfo =
                                      m.com.dunamu.crix.front.protobuf.common.PrivateFrontModelInfo.toObject(
                                        e.frontModelInfo,
                                        t
                                      )),
                                  null != e.askBid &&
                                    e.hasOwnProperty("askBid") &&
                                    (a.askBid =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.AskBid[e.askBid]
                                          ? e.askBid
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.AskBid[e.askBid]
                                        : e.askBid),
                                  null != e.price &&
                                    e.hasOwnProperty("price") &&
                                    (a.price =
                                      t.json && !isFinite(e.price)
                                        ? String(e.price)
                                        : e.price),
                                  null != e.volume &&
                                    e.hasOwnProperty("volume") &&
                                    (a.volume =
                                      t.json && !isFinite(e.volume)
                                        ? String(e.volume)
                                        : e.volume),
                                  null != e.uuid &&
                                    e.hasOwnProperty("uuid") &&
                                    (a.uuid = e.uuid),
                                  null != e.orderType &&
                                    e.hasOwnProperty("orderType") &&
                                    (a.orderType = e.orderType),
                                  null != e.state &&
                                    e.hasOwnProperty("state") &&
                                    (a.state =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.CrixOrderState[e.state]
                                          ? e.state
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.CrixOrderState[e.state]
                                        : e.state),
                                  null != e.orderTimestamp &&
                                    e.hasOwnProperty("orderTimestamp") &&
                                    ("number" == typeof e.orderTimestamp
                                      ? (a.orderTimestamp =
                                          t.longs === String
                                            ? String(e.orderTimestamp)
                                            : e.orderTimestamp)
                                      : (a.orderTimestamp =
                                          t.longs === String
                                            ? u.Long.prototype.toString.call(
                                                e.orderTimestamp
                                              )
                                            : t.longs === Number
                                            ? new u.LongBits(
                                                e.orderTimestamp.low >>> 0,
                                                e.orderTimestamp.high >>> 0
                                              ).toNumber(!0)
                                            : e.orderTimestamp)),
                                  null != e.tradeUuid &&
                                    e.hasOwnProperty("tradeUuid") &&
                                    (a.tradeUuid = e.tradeUuid),
                                  null != e.tradeTimestamp &&
                                    e.hasOwnProperty("tradeTimestamp") &&
                                    ("number" == typeof e.tradeTimestamp
                                      ? (a.tradeTimestamp =
                                          t.longs === String
                                            ? String(e.tradeTimestamp)
                                            : e.tradeTimestamp)
                                      : (a.tradeTimestamp =
                                          t.longs === String
                                            ? u.Long.prototype.toString.call(
                                                e.tradeTimestamp
                                              )
                                            : t.longs === Number
                                            ? new u.LongBits(
                                                e.tradeTimestamp.low >>> 0,
                                                e.tradeTimestamp.high >>> 0
                                              ).toNumber(!0)
                                            : e.tradeTimestamp)),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.CrixOrder"
                                );
                              }),
                              t
                            );
                          })()),




                          (n.CrixOrderbook = (function () {
                            function t(e) {
                              if (((this.orderbookUnits = []), e))
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.frontModelInfo = null),
                              (t.prototype.totalAskSize = 0),
                              (t.prototype.totalBidSize = 0),
                              (t.prototype.orderbookUnits = u.emptyArray),
                              (t.prototype.totalAskPrice = 0),
                              (t.prototype.totalBidPrice = 0),
                              (t.prototype.level = 0),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                if (
                                  (t || (t = d.create()),
                                  null != e.frontModelInfo &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "frontModelInfo"
                                    ) &&
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.encode(
                                      e.frontModelInfo,
                                      t.uint32(10).fork()
                                    ).ldelim(),
                                  null != e.totalAskSize &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "totalAskSize"
                                    ) &&
                                    t.uint32(17).double(e.totalAskSize),
                                  null != e.totalBidSize &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "totalBidSize"
                                    ) &&
                                    t.uint32(25).double(e.totalBidSize),
                                  null != e.orderbookUnits &&
                                    e.orderbookUnits.length)
                                )
                                  for (
                                    var a = 0;
                                    a < e.orderbookUnits.length;
                                    ++a
                                  )
                                    m.com.dunamu.crix.front.protobuf.CrixOrderbookUnit.encode(
                                      e.orderbookUnits[a],
                                      t.uint32(34).fork()
                                    ).ldelim();
                                return (
                                  null != e.totalAskPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "totalAskPrice"
                                    ) &&
                                    t.uint32(41).double(e.totalAskPrice),
                                  null != e.totalBidPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "totalBidPrice"
                                    ) &&
                                    t.uint32(49).double(e.totalBidPrice),
                                  null != e.level &&
                                    Object.hasOwnProperty.call(e, "level") &&
                                    t.uint32(57).double(e.level),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.CrixOrderbook();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.frontModelInfo =
                                        m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 2:
                                      n.totalAskSize = e.double();
                                      break;
                                    case 3:
                                      n.totalBidSize = e.double();
                                      break;
                                    case 4:
                                      (n.orderbookUnits &&
                                        n.orderbookUnits.length) ||
                                        (n.orderbookUnits = []),
                                        n.orderbookUnits.push(
                                          m.com.dunamu.crix.front.protobuf.CrixOrderbookUnit.decode(
                                            e,
                                            e.uint32()
                                          )
                                        );
                                      break;
                                    case 5:
                                      n.totalAskPrice = e.double();
                                      break;
                                    case 6:
                                      n.totalBidPrice = e.double();
                                      break;
                                    case 7:
                                      n.level = e.double();
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                if ("object" != typeof e || null === e)
                                  return "object expected";
                                if (
                                  null != e.frontModelInfo &&
                                  e.hasOwnProperty("frontModelInfo") &&
                                  (a =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.verify(
                                      e.frontModelInfo
                                    ))
                                )
                                  return "frontModelInfo." + a;
                                if (
                                  null != e.totalAskSize &&
                                  e.hasOwnProperty("totalAskSize") &&
                                  "number" != typeof e.totalAskSize
                                )
                                  return "totalAskSize: number expected";
                                if (
                                  null != e.totalBidSize &&
                                  e.hasOwnProperty("totalBidSize") &&
                                  "number" != typeof e.totalBidSize
                                )
                                  return "totalBidSize: number expected";
                                if (
                                  null != e.orderbookUnits &&
                                  e.hasOwnProperty("orderbookUnits")
                                ) {
                                  if (!Array.isArray(e.orderbookUnits))
                                    return "orderbookUnits: array expected";
                                  for (
                                    var t = 0;
                                    t < e.orderbookUnits.length;
                                    ++t
                                  ) {
                                    var a;
                                    if (
                                      (a =
                                        m.com.dunamu.crix.front.protobuf.CrixOrderbookUnit.verify(
                                          e.orderbookUnits[t]
                                        ))
                                    )
                                      return "orderbookUnits." + a;
                                  }
                                }
                                return null != e.totalAskPrice &&
                                  e.hasOwnProperty("totalAskPrice") &&
                                  "number" != typeof e.totalAskPrice
                                  ? "totalAskPrice: number expected"
                                  : null != e.totalBidPrice &&
                                    e.hasOwnProperty("totalBidPrice") &&
                                    "number" != typeof e.totalBidPrice
                                  ? "totalBidPrice: number expected"
                                  : null != e.level &&
                                    e.hasOwnProperty("level") &&
                                    "number" != typeof e.level
                                  ? "level: number expected"
                                  : null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf.CrixOrderbook
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.CrixOrderbook();
                                if (null != e.frontModelInfo) {
                                  if ("object" != typeof e.frontModelInfo)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.CrixOrderbook.frontModelInfo: object expected"
                                    );
                                  t.frontModelInfo =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.fromObject(
                                      e.frontModelInfo
                                    );
                                }
                                if (
                                  (null != e.totalAskSize &&
                                    (t.totalAskSize = Number(e.totalAskSize)),
                                  null != e.totalBidSize &&
                                    (t.totalBidSize = Number(e.totalBidSize)),
                                  e.orderbookUnits)
                                ) {
                                  if (!Array.isArray(e.orderbookUnits))
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.CrixOrderbook.orderbookUnits: array expected"
                                    );
                                  t.orderbookUnits = [];
                                  for (
                                    var a = 0;
                                    a < e.orderbookUnits.length;
                                    ++a
                                  ) {
                                    if ("object" != typeof e.orderbookUnits[a])
                                      throw TypeError(
                                        ".com.dunamu.crix.front.protobuf.CrixOrderbook.orderbookUnits: object expected"
                                      );
                                    t.orderbookUnits[a] =
                                      m.com.dunamu.crix.front.protobuf.CrixOrderbookUnit.fromObject(
                                        e.orderbookUnits[a]
                                      );
                                  }
                                }
                                return (
                                  null != e.totalAskPrice &&
                                    (t.totalAskPrice = Number(e.totalAskPrice)),
                                  null != e.totalBidPrice &&
                                    (t.totalBidPrice = Number(e.totalBidPrice)),
                                  null != e.level &&
                                    (t.level = Number(e.level)),
                                  t
                                );
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                if (
                                  ((t.arrays || t.defaults) &&
                                    (a.orderbookUnits = []),
                                  t.defaults &&
                                    ((a.frontModelInfo = null),
                                    (a.totalAskSize = 0),
                                    (a.totalBidSize = 0),
                                    (a.totalAskPrice = 0),
                                    (a.totalBidPrice = 0),
                                    (a.level = 0)),
                                  null != e.frontModelInfo &&
                                    e.hasOwnProperty("frontModelInfo") &&
                                    (a.frontModelInfo =
                                      m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.toObject(
                                        e.frontModelInfo,
                                        t
                                      )),
                                  null != e.totalAskSize &&
                                    e.hasOwnProperty("totalAskSize") &&
                                    (a.totalAskSize =
                                      t.json && !isFinite(e.totalAskSize)
                                        ? String(e.totalAskSize)
                                        : e.totalAskSize),
                                  null != e.totalBidSize &&
                                    e.hasOwnProperty("totalBidSize") &&
                                    (a.totalBidSize =
                                      t.json && !isFinite(e.totalBidSize)
                                        ? String(e.totalBidSize)
                                        : e.totalBidSize),
                                  e.orderbookUnits && e.orderbookUnits.length)
                                ) {
                                  a.orderbookUnits = [];
                                  for (
                                    var r = 0;
                                    r < e.orderbookUnits.length;
                                    ++r
                                  )
                                    a.orderbookUnits[r] =
                                      m.com.dunamu.crix.front.protobuf.CrixOrderbookUnit.toObject(
                                        e.orderbookUnits[r],
                                        t
                                      );
                                }
                                return (
                                  null != e.totalAskPrice &&
                                    e.hasOwnProperty("totalAskPrice") &&
                                    (a.totalAskPrice =
                                      t.json && !isFinite(e.totalAskPrice)
                                        ? String(e.totalAskPrice)
                                        : e.totalAskPrice),
                                  null != e.totalBidPrice &&
                                    e.hasOwnProperty("totalBidPrice") &&
                                    (a.totalBidPrice =
                                      t.json && !isFinite(e.totalBidPrice)
                                        ? String(e.totalBidPrice)
                                        : e.totalBidPrice),
                                  null != e.level &&
                                    e.hasOwnProperty("level") &&
                                    (a.level =
                                      t.json && !isFinite(e.level)
                                        ? String(e.level)
                                        : e.level),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.CrixOrderbook"
                                );
                              }),
                              t
                            );
                          })()),



                          (n.CrixOrderbookUnit = (function () {
                            function t(e) {
                              if (e)
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.askPrice = null),
                              (t.prototype.bidPrice = null),
                              (t.prototype.askSize = null),
                              (t.prototype.bidSize = null),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                return (
                                  t || (t = d.create()),
                                  null != e.askPrice &&
                                    Object.hasOwnProperty.call(e, "askPrice") &&
                                    m.google.protobuf.DoubleValue.encode(
                                      e.askPrice,
                                      t.uint32(10).fork()
                                    ).ldelim(),
                                  null != e.bidPrice &&
                                    Object.hasOwnProperty.call(e, "bidPrice") &&
                                    m.google.protobuf.DoubleValue.encode(
                                      e.bidPrice,
                                      t.uint32(18).fork()
                                    ).ldelim(),
                                  null != e.askSize &&
                                    Object.hasOwnProperty.call(e, "askSize") &&
                                    m.google.protobuf.DoubleValue.encode(
                                      e.askSize,
                                      t.uint32(26).fork()
                                    ).ldelim(),
                                  null != e.bidSize &&
                                    Object.hasOwnProperty.call(e, "bidSize") &&
                                    m.google.protobuf.DoubleValue.encode(
                                      e.bidSize,
                                      t.uint32(34).fork()
                                    ).ldelim(),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.CrixOrderbookUnit();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.askPrice =
                                        m.google.protobuf.DoubleValue.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 2:
                                      n.bidPrice =
                                        m.google.protobuf.DoubleValue.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 3:
                                      n.askSize =
                                        m.google.protobuf.DoubleValue.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 4:
                                      n.bidSize =
                                        m.google.protobuf.DoubleValue.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                return "object" != typeof e || null === e
                                  ? "object expected"
                                  : null != e.askPrice &&
                                    e.hasOwnProperty("askPrice") &&
                                    (t = m.google.protobuf.DoubleValue.verify(
                                      e.askPrice
                                    ))
                                  ? "askPrice." + t
                                  : null != e.bidPrice &&
                                    e.hasOwnProperty("bidPrice") &&
                                    (t = m.google.protobuf.DoubleValue.verify(
                                      e.bidPrice
                                    ))
                                  ? "bidPrice." + t
                                  : null != e.askSize &&
                                    e.hasOwnProperty("askSize") &&
                                    (t = m.google.protobuf.DoubleValue.verify(
                                      e.askSize
                                    ))
                                  ? "askSize." + t
                                  : null != e.bidSize &&
                                    e.hasOwnProperty("bidSize") &&
                                    (t = m.google.protobuf.DoubleValue.verify(
                                      e.bidSize
                                    ))
                                  ? "bidSize." + t
                                  : null;
                                var t;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf
                                    .CrixOrderbookUnit
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.CrixOrderbookUnit();
                                if (null != e.askPrice) {
                                  if ("object" != typeof e.askPrice)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.CrixOrderbookUnit.askPrice: object expected"
                                    );
                                  t.askPrice =
                                    m.google.protobuf.DoubleValue.fromObject(
                                      e.askPrice
                                    );
                                }
                                if (null != e.bidPrice) {
                                  if ("object" != typeof e.bidPrice)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.CrixOrderbookUnit.bidPrice: object expected"
                                    );
                                  t.bidPrice =
                                    m.google.protobuf.DoubleValue.fromObject(
                                      e.bidPrice
                                    );
                                }
                                if (null != e.askSize) {
                                  if ("object" != typeof e.askSize)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.CrixOrderbookUnit.askSize: object expected"
                                    );
                                  t.askSize =
                                    m.google.protobuf.DoubleValue.fromObject(
                                      e.askSize
                                    );
                                }
                                if (null != e.bidSize) {
                                  if ("object" != typeof e.bidSize)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.CrixOrderbookUnit.bidSize: object expected"
                                    );
                                  t.bidSize =
                                    m.google.protobuf.DoubleValue.fromObject(
                                      e.bidSize
                                    );
                                }
                                return t;
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                return (
                                  t.defaults &&
                                    ((a.askPrice = null),
                                    (a.bidPrice = null),
                                    (a.askSize = null),
                                    (a.bidSize = null)),
                                  null != e.askPrice &&
                                    e.hasOwnProperty("askPrice") &&
                                    (a.askPrice =
                                      m.google.protobuf.DoubleValue.toObject(
                                        e.askPrice,
                                        t
                                      )),
                                  null != e.bidPrice &&
                                    e.hasOwnProperty("bidPrice") &&
                                    (a.bidPrice =
                                      m.google.protobuf.DoubleValue.toObject(
                                        e.bidPrice,
                                        t
                                      )),
                                  null != e.askSize &&
                                    e.hasOwnProperty("askSize") &&
                                    (a.askSize =
                                      m.google.protobuf.DoubleValue.toObject(
                                        e.askSize,
                                        t
                                      )),
                                  null != e.bidSize &&
                                    e.hasOwnProperty("bidSize") &&
                                    (a.bidSize =
                                      m.google.protobuf.DoubleValue.toObject(
                                        e.bidSize,
                                        t
                                      )),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.CrixOrderbookUnit"
                                );
                              }),
                              t
                            );
                          })()),


                          (n.CrixTrade = (function () {
                            function t(e) {
                              if (e)
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.frontModelInfo = null),
                              (t.prototype.tradeDate = 0),
                              (t.prototype.tradeTime = 0),
                              (t.prototype.tradeTimestamp = u.Long
                                ? u.Long.fromBits(0, 0, !0)
                                : 0),
                              (t.prototype.tradePrice = 0),
                              (t.prototype.tradeVolume = 0),
                              (t.prototype.askBid = 0),
                              (t.prototype.prevClosingPrice = 0),
                              (t.prototype.change = 0),
                              (t.prototype.changePrice = 0),
                              (t.prototype.sequentialId = u.Long
                                ? u.Long.fromBits(0, 0, !0)
                                : 0),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                return (
                                  t || (t = d.create()),
                                  null != e.frontModelInfo &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "frontModelInfo"
                                    ) &&
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.encode(
                                      e.frontModelInfo,
                                      t.uint32(10).fork()
                                    ).ldelim(),
                                  null != e.tradeDate &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeDate"
                                    ) &&
                                    t.uint32(16).uint32(e.tradeDate),
                                  null != e.tradeTime &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeTime"
                                    ) &&
                                    t.uint32(24).uint32(e.tradeTime),
                                  null != e.tradeTimestamp &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeTimestamp"
                                    ) &&
                                    t.uint32(32).uint64(e.tradeTimestamp),
                                  null != e.tradePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradePrice"
                                    ) &&
                                    t.uint32(41).double(e.tradePrice),
                                  null != e.tradeVolume &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeVolume"
                                    ) &&
                                    t.uint32(49).double(e.tradeVolume),
                                  null != e.askBid &&
                                    Object.hasOwnProperty.call(e, "askBid") &&
                                    t.uint32(56).int32(e.askBid),
                                  null != e.prevClosingPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "prevClosingPrice"
                                    ) &&
                                    t.uint32(65).double(e.prevClosingPrice),
                                  null != e.change &&
                                    Object.hasOwnProperty.call(e, "change") &&
                                    t.uint32(72).int32(e.change),
                                  null != e.changePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "changePrice"
                                    ) &&
                                    t.uint32(81).double(e.changePrice),
                                  null != e.sequentialId &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "sequentialId"
                                    ) &&
                                    t.uint32(88).uint64(e.sequentialId),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.CrixTrade();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.frontModelInfo =
                                        m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 2:
                                      n.tradeDate = e.uint32();
                                      break;
                                    case 3:
                                      n.tradeTime = e.uint32();
                                      break;
                                    case 4:
                                      n.tradeTimestamp = e.uint64();
                                      break;
                                    case 5:
                                      n.tradePrice = e.double();
                                      break;
                                    case 6:
                                      n.tradeVolume = e.double();
                                      break;
                                    case 7:
                                      n.askBid = e.int32();
                                      break;
                                    case 8:
                                      n.prevClosingPrice = e.double();
                                      break;
                                    case 9:
                                      n.change = e.int32();
                                      break;
                                    case 10:
                                      n.changePrice = e.double();
                                      break;
                                    case 11:
                                      n.sequentialId = e.uint64();
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                if ("object" != typeof e || null === e)
                                  return "object expected";
                                if (
                                  null != e.frontModelInfo &&
                                  e.hasOwnProperty("frontModelInfo")
                                ) {
                                  var t =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.verify(
                                      e.frontModelInfo
                                    );
                                  if (t) return "frontModelInfo." + t;
                                }
                                if (
                                  null != e.tradeDate &&
                                  e.hasOwnProperty("tradeDate") &&
                                  !u.isInteger(e.tradeDate)
                                )
                                  return "tradeDate: integer expected";
                                if (
                                  null != e.tradeTime &&
                                  e.hasOwnProperty("tradeTime") &&
                                  !u.isInteger(e.tradeTime)
                                )
                                  return "tradeTime: integer expected";
                                if (
                                  null != e.tradeTimestamp &&
                                  e.hasOwnProperty("tradeTimestamp") &&
                                  !(
                                    u.isInteger(e.tradeTimestamp) ||
                                    (e.tradeTimestamp &&
                                      u.isInteger(e.tradeTimestamp.low) &&
                                      u.isInteger(e.tradeTimestamp.high))
                                  )
                                )
                                  return "tradeTimestamp: integer|Long expected";
                                if (
                                  null != e.tradePrice &&
                                  e.hasOwnProperty("tradePrice") &&
                                  "number" != typeof e.tradePrice
                                )
                                  return "tradePrice: number expected";
                                if (
                                  null != e.tradeVolume &&
                                  e.hasOwnProperty("tradeVolume") &&
                                  "number" != typeof e.tradeVolume
                                )
                                  return "tradeVolume: number expected";
                                if (
                                  null != e.askBid &&
                                  e.hasOwnProperty("askBid")
                                )
                                  switch (e.askBid) {
                                    default:
                                      return "askBid: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                  }
                                if (
                                  null != e.prevClosingPrice &&
                                  e.hasOwnProperty("prevClosingPrice") &&
                                  "number" != typeof e.prevClosingPrice
                                )
                                  return "prevClosingPrice: number expected";
                                if (
                                  null != e.change &&
                                  e.hasOwnProperty("change")
                                )
                                  switch (e.change) {
                                    default:
                                      return "change: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                  }
                                return null != e.changePrice &&
                                  e.hasOwnProperty("changePrice") &&
                                  "number" != typeof e.changePrice
                                  ? "changePrice: number expected"
                                  : null != e.sequentialId &&
                                    e.hasOwnProperty("sequentialId") &&
                                    !(
                                      u.isInteger(e.sequentialId) ||
                                      (e.sequentialId &&
                                        u.isInteger(e.sequentialId.low) &&
                                        u.isInteger(e.sequentialId.high))
                                    )
                                  ? "sequentialId: integer|Long expected"
                                  : null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf.CrixTrade
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.CrixTrade();
                                if (null != e.frontModelInfo) {
                                  if ("object" != typeof e.frontModelInfo)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.CrixTrade.frontModelInfo: object expected"
                                    );
                                  t.frontModelInfo =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.fromObject(
                                      e.frontModelInfo
                                    );
                                }
                                switch (
                                  (null != e.tradeDate &&
                                    (t.tradeDate = e.tradeDate >>> 0),
                                  null != e.tradeTime &&
                                    (t.tradeTime = e.tradeTime >>> 0),
                                  null != e.tradeTimestamp &&
                                    (u.Long
                                      ? ((t.tradeTimestamp = u.Long.fromValue(
                                          e.tradeTimestamp
                                        )).unsigned = !0)
                                      : "string" == typeof e.tradeTimestamp
                                      ? (t.tradeTimestamp = parseInt(
                                          e.tradeTimestamp,
                                          10
                                        ))
                                      : "number" == typeof e.tradeTimestamp
                                      ? (t.tradeTimestamp = e.tradeTimestamp)
                                      : "object" == typeof e.tradeTimestamp &&
                                        (t.tradeTimestamp = new u.LongBits(
                                          e.tradeTimestamp.low >>> 0,
                                          e.tradeTimestamp.high >>> 0
                                        ).toNumber(!0))),
                                  null != e.tradePrice &&
                                    (t.tradePrice = Number(e.tradePrice)),
                                  null != e.tradeVolume &&
                                    (t.tradeVolume = Number(e.tradeVolume)),
                                  e.askBid)
                                ) {
                                  default:
                                    if ("number" == typeof e.askBid) {
                                      t.askBid = e.askBid;
                                      break;
                                    }
                                    break;
                                  case "ASKUNKNOWN":
                                  case 0:
                                    t.askBid = 0;
                                    break;
                                  case "ASK":
                                  case 1:
                                    t.askBid = 1;
                                    break;
                                  case "BID":
                                  case 2:
                                    t.askBid = 2;
                                }
                                switch (
                                  (null != e.prevClosingPrice &&
                                    (t.prevClosingPrice = Number(
                                      e.prevClosingPrice
                                    )),
                                  e.change)
                                ) {
                                  default:
                                    if ("number" == typeof e.change) {
                                      t.change = e.change;
                                      break;
                                    }
                                    break;
                                  case "CHANGEUNKNOWN":
                                  case 0:
                                    t.change = 0;
                                    break;
                                  case "UPPER_LIMIT":
                                  case 1:
                                    t.change = 1;
                                    break;
                                  case "RISE":
                                  case 2:
                                    t.change = 2;
                                    break;
                                  case "EVEN":
                                  case 3:
                                    t.change = 3;
                                    break;
                                  case "LOWER_LIMIT":
                                  case 4:
                                    t.change = 4;
                                    break;
                                  case "FALL":
                                  case 5:
                                    t.change = 5;
                                }
                                return (
                                  null != e.changePrice &&
                                    (t.changePrice = Number(e.changePrice)),
                                  null != e.sequentialId &&
                                    (u.Long
                                      ? ((t.sequentialId = u.Long.fromValue(
                                          e.sequentialId
                                        )).unsigned = !0)
                                      : "string" == typeof e.sequentialId
                                      ? (t.sequentialId = parseInt(
                                          e.sequentialId,
                                          10
                                        ))
                                      : "number" == typeof e.sequentialId
                                      ? (t.sequentialId = e.sequentialId)
                                      : "object" == typeof e.sequentialId &&
                                        (t.sequentialId = new u.LongBits(
                                          e.sequentialId.low >>> 0,
                                          e.sequentialId.high >>> 0
                                        ).toNumber(!0))),
                                  t
                                );
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                if (t.defaults) {
                                  if (
                                    ((a.frontModelInfo = null),
                                    (a.tradeDate = 0),
                                    (a.tradeTime = 0),
                                    u.Long)
                                  ) {
                                    var r = new u.Long(0, 0, !0);
                                    a.tradeTimestamp =
                                      t.longs === String
                                        ? r.toString()
                                        : t.longs === Number
                                        ? r.toNumber()
                                        : r;
                                  } else
                                    a.tradeTimestamp =
                                      t.longs === String ? "0" : 0;
                                  (a.tradePrice = 0),
                                    (a.tradeVolume = 0),
                                    (a.askBid =
                                      t.enums === String ? "ASKUNKNOWN" : 0),
                                    (a.prevClosingPrice = 0),
                                    (a.change =
                                      t.enums === String ? "CHANGEUNKNOWN" : 0),
                                    (a.changePrice = 0),
                                    u.Long
                                      ? ((r = new u.Long(0, 0, !0)),
                                        (a.sequentialId =
                                          t.longs === String
                                            ? r.toString()
                                            : t.longs === Number
                                            ? r.toNumber()
                                            : r))
                                      : (a.sequentialId =
                                          t.longs === String ? "0" : 0);
                                }
                                return (
                                  null != e.frontModelInfo &&
                                    e.hasOwnProperty("frontModelInfo") &&
                                    (a.frontModelInfo =
                                      m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.toObject(
                                        e.frontModelInfo,
                                        t
                                      )),
                                  null != e.tradeDate &&
                                    e.hasOwnProperty("tradeDate") &&
                                    (a.tradeDate = e.tradeDate),
                                  null != e.tradeTime &&
                                    e.hasOwnProperty("tradeTime") &&
                                    (a.tradeTime = e.tradeTime),
                                  null != e.tradeTimestamp &&
                                    e.hasOwnProperty("tradeTimestamp") &&
                                    ("number" == typeof e.tradeTimestamp
                                      ? (a.tradeTimestamp =
                                          t.longs === String
                                            ? String(e.tradeTimestamp)
                                            : e.tradeTimestamp)
                                      : (a.tradeTimestamp =
                                          t.longs === String
                                            ? u.Long.prototype.toString.call(
                                                e.tradeTimestamp
                                              )
                                            : t.longs === Number
                                            ? new u.LongBits(
                                                e.tradeTimestamp.low >>> 0,
                                                e.tradeTimestamp.high >>> 0
                                              ).toNumber(!0)
                                            : e.tradeTimestamp)),
                                  null != e.tradePrice &&
                                    e.hasOwnProperty("tradePrice") &&
                                    (a.tradePrice =
                                      t.json && !isFinite(e.tradePrice)
                                        ? String(e.tradePrice)
                                        : e.tradePrice),
                                  null != e.tradeVolume &&
                                    e.hasOwnProperty("tradeVolume") &&
                                    (a.tradeVolume =
                                      t.json && !isFinite(e.tradeVolume)
                                        ? String(e.tradeVolume)
                                        : e.tradeVolume),
                                  null != e.askBid &&
                                    e.hasOwnProperty("askBid") &&
                                    (a.askBid =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.AskBid[e.askBid]
                                          ? e.askBid
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.AskBid[e.askBid]
                                        : e.askBid),
                                  null != e.prevClosingPrice &&
                                    e.hasOwnProperty("prevClosingPrice") &&
                                    (a.prevClosingPrice =
                                      t.json && !isFinite(e.prevClosingPrice)
                                        ? String(e.prevClosingPrice)
                                        : e.prevClosingPrice),
                                  null != e.change &&
                                    e.hasOwnProperty("change") &&
                                    (a.change =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.Change[e.change]
                                          ? e.change
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.Change[e.change]
                                        : e.change),
                                  null != e.changePrice &&
                                    e.hasOwnProperty("changePrice") &&
                                    (a.changePrice =
                                      t.json && !isFinite(e.changePrice)
                                        ? String(e.changePrice)
                                        : e.changePrice),
                                  null != e.sequentialId &&
                                    e.hasOwnProperty("sequentialId") &&
                                    ("number" == typeof e.sequentialId
                                      ? (a.sequentialId =
                                          t.longs === String
                                            ? String(e.sequentialId)
                                            : e.sequentialId)
                                      : (a.sequentialId =
                                          t.longs === String
                                            ? u.Long.prototype.toString.call(
                                                e.sequentialId
                                              )
                                            : t.longs === Number
                                            ? new u.LongBits(
                                                e.sequentialId.low >>> 0,
                                                e.sequentialId.high >>> 0
                                              ).toNumber(!0)
                                            : e.sequentialId)),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.CrixTrade"
                                );
                              }),
                              t
                            );
                          })()),



                          (n.Forex = (function () {
                            function t(e) {
                              if (e)
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.frontModelInfo = null),
                              (t.prototype.date = 0),
                              (t.prototype.time = 0),
                              (t.prototype.recurrenceCount = 0),
                              (t.prototype.basePrice = 0),
                              (t.prototype.openingPrice = 0),
                              (t.prototype.highPrice = 0),
                              (t.prototype.lowPrice = 0),
                              (t.prototype.change = 0),
                              (t.prototype.changePrice = 0),
                              (t.prototype.high52wPrice = 0),
                              (t.prototype.high52wDate = 0),
                              (t.prototype.low52wPrice = 0),
                              (t.prototype.low52wDate = 0),
                              (t.prototype.usDollarRate = 0),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                return (
                                  t || (t = d.create()),
                                  null != e.frontModelInfo &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "frontModelInfo"
                                    ) &&
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.encode(
                                      e.frontModelInfo,
                                      t.uint32(10).fork()
                                    ).ldelim(),
                                  null != e.date &&
                                    Object.hasOwnProperty.call(e, "date") &&
                                    t.uint32(16).uint32(e.date),
                                  null != e.time &&
                                    Object.hasOwnProperty.call(e, "time") &&
                                    t.uint32(24).uint32(e.time),
                                  null != e.recurrenceCount &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "recurrenceCount"
                                    ) &&
                                    t.uint32(32).int32(e.recurrenceCount),
                                  null != e.basePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "basePrice"
                                    ) &&
                                    t.uint32(41).double(e.basePrice),
                                  null != e.openingPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "openingPrice"
                                    ) &&
                                    t.uint32(49).double(e.openingPrice),
                                  null != e.highPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "highPrice"
                                    ) &&
                                    t.uint32(57).double(e.highPrice),
                                  null != e.lowPrice &&
                                    Object.hasOwnProperty.call(e, "lowPrice") &&
                                    t.uint32(65).double(e.lowPrice),
                                  null != e.change &&
                                    Object.hasOwnProperty.call(e, "change") &&
                                    t.uint32(72).int32(e.change),
                                  null != e.changePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "changePrice"
                                    ) &&
                                    t.uint32(81).double(e.changePrice),
                                  null != e.high52wPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "high52wPrice"
                                    ) &&
                                    t.uint32(89).double(e.high52wPrice),
                                  null != e.high52wDate &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "high52wDate"
                                    ) &&
                                    t.uint32(96).uint32(e.high52wDate),
                                  null != e.low52wPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "low52wPrice"
                                    ) &&
                                    t.uint32(105).double(e.low52wPrice),
                                  null != e.low52wDate &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "low52wDate"
                                    ) &&
                                    t.uint32(112).uint32(e.low52wDate),
                                  null != e.usDollarRate &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "usDollarRate"
                                    ) &&
                                    t.uint32(121).double(e.usDollarRate),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.Forex();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.frontModelInfo =
                                        m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 2:
                                      n.date = e.uint32();
                                      break;
                                    case 3:
                                      n.time = e.uint32();
                                      break;
                                    case 4:
                                      n.recurrenceCount = e.int32();
                                      break;
                                    case 5:
                                      n.basePrice = e.double();
                                      break;
                                    case 6:
                                      n.openingPrice = e.double();
                                      break;
                                    case 7:
                                      n.highPrice = e.double();
                                      break;
                                    case 8:
                                      n.lowPrice = e.double();
                                      break;
                                    case 9:
                                      n.change = e.int32();
                                      break;
                                    case 10:
                                      n.changePrice = e.double();
                                      break;
                                    case 11:
                                      n.high52wPrice = e.double();
                                      break;
                                    case 12:
                                      n.high52wDate = e.uint32();
                                      break;
                                    case 13:
                                      n.low52wPrice = e.double();
                                      break;
                                    case 14:
                                      n.low52wDate = e.uint32();
                                      break;
                                    case 15:
                                      n.usDollarRate = e.double();
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                if ("object" != typeof e || null === e)
                                  return "object expected";
                                if (
                                  null != e.frontModelInfo &&
                                  e.hasOwnProperty("frontModelInfo")
                                ) {
                                  var t =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.verify(
                                      e.frontModelInfo
                                    );
                                  if (t) return "frontModelInfo." + t;
                                }
                                if (
                                  null != e.date &&
                                  e.hasOwnProperty("date") &&
                                  !u.isInteger(e.date)
                                )
                                  return "date: integer expected";
                                if (
                                  null != e.time &&
                                  e.hasOwnProperty("time") &&
                                  !u.isInteger(e.time)
                                )
                                  return "time: integer expected";
                                if (
                                  null != e.recurrenceCount &&
                                  e.hasOwnProperty("recurrenceCount") &&
                                  !u.isInteger(e.recurrenceCount)
                                )
                                  return "recurrenceCount: integer expected";
                                if (
                                  null != e.basePrice &&
                                  e.hasOwnProperty("basePrice") &&
                                  "number" != typeof e.basePrice
                                )
                                  return "basePrice: number expected";
                                if (
                                  null != e.openingPrice &&
                                  e.hasOwnProperty("openingPrice") &&
                                  "number" != typeof e.openingPrice
                                )
                                  return "openingPrice: number expected";
                                if (
                                  null != e.highPrice &&
                                  e.hasOwnProperty("highPrice") &&
                                  "number" != typeof e.highPrice
                                )
                                  return "highPrice: number expected";
                                if (
                                  null != e.lowPrice &&
                                  e.hasOwnProperty("lowPrice") &&
                                  "number" != typeof e.lowPrice
                                )
                                  return "lowPrice: number expected";
                                if (
                                  null != e.change &&
                                  e.hasOwnProperty("change")
                                )
                                  switch (e.change) {
                                    default:
                                      return "change: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                  }
                                return null != e.changePrice &&
                                  e.hasOwnProperty("changePrice") &&
                                  "number" != typeof e.changePrice
                                  ? "changePrice: number expected"
                                  : null != e.high52wPrice &&
                                    e.hasOwnProperty("high52wPrice") &&
                                    "number" != typeof e.high52wPrice
                                  ? "high52wPrice: number expected"
                                  : null != e.high52wDate &&
                                    e.hasOwnProperty("high52wDate") &&
                                    !u.isInteger(e.high52wDate)
                                  ? "high52wDate: integer expected"
                                  : null != e.low52wPrice &&
                                    e.hasOwnProperty("low52wPrice") &&
                                    "number" != typeof e.low52wPrice
                                  ? "low52wPrice: number expected"
                                  : null != e.low52wDate &&
                                    e.hasOwnProperty("low52wDate") &&
                                    !u.isInteger(e.low52wDate)
                                  ? "low52wDate: integer expected"
                                  : null != e.usDollarRate &&
                                    e.hasOwnProperty("usDollarRate") &&
                                    "number" != typeof e.usDollarRate
                                  ? "usDollarRate: number expected"
                                  : null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf.Forex
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.Forex();
                                if (null != e.frontModelInfo) {
                                  if ("object" != typeof e.frontModelInfo)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.Forex.frontModelInfo: object expected"
                                    );
                                  t.frontModelInfo =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.fromObject(
                                      e.frontModelInfo
                                    );
                                }
                                switch (
                                  (null != e.date && (t.date = e.date >>> 0),
                                  null != e.time && (t.time = e.time >>> 0),
                                  null != e.recurrenceCount &&
                                    (t.recurrenceCount = 0 | e.recurrenceCount),
                                  null != e.basePrice &&
                                    (t.basePrice = Number(e.basePrice)),
                                  null != e.openingPrice &&
                                    (t.openingPrice = Number(e.openingPrice)),
                                  null != e.highPrice &&
                                    (t.highPrice = Number(e.highPrice)),
                                  null != e.lowPrice &&
                                    (t.lowPrice = Number(e.lowPrice)),
                                  e.change)
                                ) {
                                  default:
                                    if ("number" == typeof e.change) {
                                      t.change = e.change;
                                      break;
                                    }
                                    break;
                                  case "CHANGEUNKNOWN":
                                  case 0:
                                    t.change = 0;
                                    break;
                                  case "UPPER_LIMIT":
                                  case 1:
                                    t.change = 1;
                                    break;
                                  case "RISE":
                                  case 2:
                                    t.change = 2;
                                    break;
                                  case "EVEN":
                                  case 3:
                                    t.change = 3;
                                    break;
                                  case "LOWER_LIMIT":
                                  case 4:
                                    t.change = 4;
                                    break;
                                  case "FALL":
                                  case 5:
                                    t.change = 5;
                                }
                                return (
                                  null != e.changePrice &&
                                    (t.changePrice = Number(e.changePrice)),
                                  null != e.high52wPrice &&
                                    (t.high52wPrice = Number(e.high52wPrice)),
                                  null != e.high52wDate &&
                                    (t.high52wDate = e.high52wDate >>> 0),
                                  null != e.low52wPrice &&
                                    (t.low52wPrice = Number(e.low52wPrice)),
                                  null != e.low52wDate &&
                                    (t.low52wDate = e.low52wDate >>> 0),
                                  null != e.usDollarRate &&
                                    (t.usDollarRate = Number(e.usDollarRate)),
                                  t
                                );
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                return (
                                  t.defaults &&
                                    ((a.frontModelInfo = null),
                                    (a.date = 0),
                                    (a.time = 0),
                                    (a.recurrenceCount = 0),
                                    (a.basePrice = 0),
                                    (a.openingPrice = 0),
                                    (a.highPrice = 0),
                                    (a.lowPrice = 0),
                                    (a.change =
                                      t.enums === String ? "CHANGEUNKNOWN" : 0),
                                    (a.changePrice = 0),
                                    (a.high52wPrice = 0),
                                    (a.high52wDate = 0),
                                    (a.low52wPrice = 0),
                                    (a.low52wDate = 0),
                                    (a.usDollarRate = 0)),
                                  null != e.frontModelInfo &&
                                    e.hasOwnProperty("frontModelInfo") &&
                                    (a.frontModelInfo =
                                      m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.toObject(
                                        e.frontModelInfo,
                                        t
                                      )),
                                  null != e.date &&
                                    e.hasOwnProperty("date") &&
                                    (a.date = e.date),
                                  null != e.time &&
                                    e.hasOwnProperty("time") &&
                                    (a.time = e.time),
                                  null != e.recurrenceCount &&
                                    e.hasOwnProperty("recurrenceCount") &&
                                    (a.recurrenceCount = e.recurrenceCount),
                                  null != e.basePrice &&
                                    e.hasOwnProperty("basePrice") &&
                                    (a.basePrice =
                                      t.json && !isFinite(e.basePrice)
                                        ? String(e.basePrice)
                                        : e.basePrice),
                                  null != e.openingPrice &&
                                    e.hasOwnProperty("openingPrice") &&
                                    (a.openingPrice =
                                      t.json && !isFinite(e.openingPrice)
                                        ? String(e.openingPrice)
                                        : e.openingPrice),
                                  null != e.highPrice &&
                                    e.hasOwnProperty("highPrice") &&
                                    (a.highPrice =
                                      t.json && !isFinite(e.highPrice)
                                        ? String(e.highPrice)
                                        : e.highPrice),
                                  null != e.lowPrice &&
                                    e.hasOwnProperty("lowPrice") &&
                                    (a.lowPrice =
                                      t.json && !isFinite(e.lowPrice)
                                        ? String(e.lowPrice)
                                        : e.lowPrice),
                                  null != e.change &&
                                    e.hasOwnProperty("change") &&
                                    (a.change =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.Change[e.change]
                                          ? e.change
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.Change[e.change]
                                        : e.change),
                                  null != e.changePrice &&
                                    e.hasOwnProperty("changePrice") &&
                                    (a.changePrice =
                                      t.json && !isFinite(e.changePrice)
                                        ? String(e.changePrice)
                                        : e.changePrice),
                                  null != e.high52wPrice &&
                                    e.hasOwnProperty("high52wPrice") &&
                                    (a.high52wPrice =
                                      t.json && !isFinite(e.high52wPrice)
                                        ? String(e.high52wPrice)
                                        : e.high52wPrice),
                                  null != e.high52wDate &&
                                    e.hasOwnProperty("high52wDate") &&
                                    (a.high52wDate = e.high52wDate),
                                  null != e.low52wPrice &&
                                    e.hasOwnProperty("low52wPrice") &&
                                    (a.low52wPrice =
                                      t.json && !isFinite(e.low52wPrice)
                                        ? String(e.low52wPrice)
                                        : e.low52wPrice),
                                  null != e.low52wDate &&
                                    e.hasOwnProperty("low52wDate") &&
                                    (a.low52wDate = e.low52wDate),
                                  null != e.usDollarRate &&
                                    e.hasOwnProperty("usDollarRate") &&
                                    (a.usDollarRate =
                                      t.json && !isFinite(e.usDollarRate)
                                        ? String(e.usDollarRate)
                                        : e.usDollarRate),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e + "/com.dunamu.crix.front.protobuf.Forex"
                                );
                              }),
                              t
                            );
                          })()),
                          (n.RecentCrix = (function () {
                            function t(e) {
                              if (e)
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.frontModelInfo = null),
                              (t.prototype.tradePrice = 0),
                              (t.prototype.openingPrice = 0),
                              (t.prototype.highPrice = 0),
                              (t.prototype.lowPrice = 0),
                              (t.prototype.accTradeVolume = 0),
                              (t.prototype.accTradeVolume24h = 0),
                              (t.prototype.accTradePrice = 0),
                              (t.prototype.accTradePrice24h = 0),
                              (t.prototype.tradeDate = 0),
                              (t.prototype.tradeTime = 0),
                              (t.prototype.askBid = 0),
                              (t.prototype.change = 0),
                              (t.prototype.tradeVolume = 0),
                              (t.prototype.tradeTimestamp = u.Long
                                ? u.Long.fromBits(0, 0, !1)
                                : 0),
                              (t.prototype.prevClosingPrice = 0),
                              (t.prototype.changeRate = 0),
                              (t.prototype.changePrice = 0),
                              (t.prototype.signedChangeRate = 0),
                              (t.prototype.signedChangePrice = 0),
                              (t.prototype.isTradingSuspended = !1),
                              (t.prototype.accAskVolume = 0),
                              (t.prototype.accBidVolume = 0),
                              (t.prototype.highest52WeekPrice = 0),
                              (t.prototype.highest52WeekDate = 0),
                              (t.prototype.lowest52WeekPrice = 0),
                              (t.prototype.lowest52WeekDate = 0),
                              (t.prototype.marketState = 0),
                              (t.prototype.marketStateForIOS = 0),
                              (t.prototype.delistingDate = 0),
                              (t.prototype.marketWarning = 0),
                              (t.prototype.delistingDateTime = ""),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                return (
                                  t || (t = d.create()),
                                  null != e.frontModelInfo &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "frontModelInfo"
                                    ) &&
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.encode(
                                      e.frontModelInfo,
                                      t.uint32(10).fork()
                                    ).ldelim(),
                                  null != e.tradePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradePrice"
                                    ) &&
                                    t.uint32(17).double(e.tradePrice),
                                  null != e.openingPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "openingPrice"
                                    ) &&
                                    t.uint32(25).double(e.openingPrice),
                                  null != e.highPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "highPrice"
                                    ) &&
                                    t.uint32(33).double(e.highPrice),
                                  null != e.lowPrice &&
                                    Object.hasOwnProperty.call(e, "lowPrice") &&
                                    t.uint32(41).double(e.lowPrice),
                                  null != e.accTradeVolume &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "accTradeVolume"
                                    ) &&
                                    t.uint32(49).double(e.accTradeVolume),
                                  null != e.accTradeVolume24h &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "accTradeVolume24h"
                                    ) &&
                                    t.uint32(57).double(e.accTradeVolume24h),
                                  null != e.accTradePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "accTradePrice"
                                    ) &&
                                    t.uint32(65).double(e.accTradePrice),
                                  null != e.accTradePrice24h &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "accTradePrice24h"
                                    ) &&
                                    t.uint32(73).double(e.accTradePrice24h),
                                  null != e.tradeDate &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeDate"
                                    ) &&
                                    t.uint32(80).uint32(e.tradeDate),
                                  null != e.tradeTime &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeTime"
                                    ) &&
                                    t.uint32(88).uint32(e.tradeTime),
                                  null != e.askBid &&
                                    Object.hasOwnProperty.call(e, "askBid") &&
                                    t.uint32(96).int32(e.askBid),
                                  null != e.change &&
                                    Object.hasOwnProperty.call(e, "change") &&
                                    t.uint32(104).int32(e.change),
                                  null != e.tradeVolume &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeVolume"
                                    ) &&
                                    t.uint32(113).double(e.tradeVolume),
                                  null != e.tradeTimestamp &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradeTimestamp"
                                    ) &&
                                    t.uint32(120).int64(e.tradeTimestamp),
                                  null != e.prevClosingPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "prevClosingPrice"
                                    ) &&
                                    t.uint32(129).double(e.prevClosingPrice),
                                  null != e.changeRate &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "changeRate"
                                    ) &&
                                    t.uint32(141).float(e.changeRate),
                                  null != e.changePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "changePrice"
                                    ) &&
                                    t.uint32(145).double(e.changePrice),
                                  null != e.signedChangeRate &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "signedChangeRate"
                                    ) &&
                                    t.uint32(157).float(e.signedChangeRate),
                                  null != e.signedChangePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "signedChangePrice"
                                    ) &&
                                    t.uint32(161).double(e.signedChangePrice),
                                  null != e.isTradingSuspended &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "isTradingSuspended"
                                    ) &&
                                    t.uint32(168).bool(e.isTradingSuspended),
                                  null != e.accAskVolume &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "accAskVolume"
                                    ) &&
                                    t.uint32(177).double(e.accAskVolume),
                                  null != e.accBidVolume &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "accBidVolume"
                                    ) &&
                                    t.uint32(185).double(e.accBidVolume),
                                  null != e.highest52WeekPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "highest52WeekPrice"
                                    ) &&
                                    t.uint32(193).double(e.highest52WeekPrice),
                                  null != e.highest52WeekDate &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "highest52WeekDate"
                                    ) &&
                                    t.uint32(200).uint32(e.highest52WeekDate),
                                  null != e.lowest52WeekPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "lowest52WeekPrice"
                                    ) &&
                                    t.uint32(209).double(e.lowest52WeekPrice),
                                  null != e.lowest52WeekDate &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "lowest52WeekDate"
                                    ) &&
                                    t.uint32(216).uint32(e.lowest52WeekDate),
                                  null != e.marketState &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "marketState"
                                    ) &&
                                    t.uint32(224).int32(e.marketState),
                                  null != e.marketStateForIOS &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "marketStateForIOS"
                                    ) &&
                                    t.uint32(232).int32(e.marketStateForIOS),
                                  null != e.delistingDate &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "delistingDate"
                                    ) &&
                                    t.uint32(240).uint32(e.delistingDate),
                                  null != e.marketWarning &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "marketWarning"
                                    ) &&
                                    t.uint32(248).int32(e.marketWarning),
                                  null != e.delistingDateTime &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "delistingDateTime"
                                    ) &&
                                    t.uint32(258).string(e.delistingDateTime),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.RecentCrix();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.frontModelInfo =
                                        m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 2:
                                      n.tradePrice = e.double();
                                      break;
                                    case 3:
                                      n.openingPrice = e.double();
                                      break;
                                    case 4:
                                      n.highPrice = e.double();
                                      break;
                                    case 5:
                                      n.lowPrice = e.double();
                                      break;
                                    case 6:
                                      n.accTradeVolume = e.double();
                                      break;
                                    case 7:
                                      n.accTradeVolume24h = e.double();
                                      break;
                                    case 8:
                                      n.accTradePrice = e.double();
                                      break;
                                    case 9:
                                      n.accTradePrice24h = e.double();
                                      break;
                                    case 10:
                                      n.tradeDate = e.uint32();
                                      break;
                                    case 11:
                                      n.tradeTime = e.uint32();
                                      break;
                                    case 12:
                                      n.askBid = e.int32();
                                      break;
                                    case 13:
                                      n.change = e.int32();
                                      break;
                                    case 14:
                                      n.tradeVolume = e.double();
                                      break;
                                    case 15:
                                      n.tradeTimestamp = e.int64();
                                      break;
                                    case 16:
                                      n.prevClosingPrice = e.double();
                                      break;
                                    case 17:
                                      n.changeRate = e.float();
                                      break;
                                    case 18:
                                      n.changePrice = e.double();
                                      break;
                                    case 19:
                                      n.signedChangeRate = e.float();
                                      break;
                                    case 20:
                                      n.signedChangePrice = e.double();
                                      break;
                                    case 21:
                                      n.isTradingSuspended = e.bool();
                                      break;
                                    case 22:
                                      n.accAskVolume = e.double();
                                      break;
                                    case 23:
                                      n.accBidVolume = e.double();
                                      break;
                                    case 24:
                                      n.highest52WeekPrice = e.double();
                                      break;
                                    case 25:
                                      n.highest52WeekDate = e.uint32();
                                      break;
                                    case 26:
                                      n.lowest52WeekPrice = e.double();
                                      break;
                                    case 27:
                                      n.lowest52WeekDate = e.uint32();
                                      break;
                                    case 28:
                                      n.marketState = e.int32();
                                      break;
                                    case 29:
                                      n.marketStateForIOS = e.int32();
                                      break;
                                    case 30:
                                      n.delistingDate = e.uint32();
                                      break;
                                    case 31:
                                      n.marketWarning = e.int32();
                                      break;
                                    case 32:
                                      n.delistingDateTime = e.string();
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                if ("object" != typeof e || null === e)
                                  return "object expected";
                                if (
                                  null != e.frontModelInfo &&
                                  e.hasOwnProperty("frontModelInfo")
                                ) {
                                  var t =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.verify(
                                      e.frontModelInfo
                                    );
                                  if (t) return "frontModelInfo." + t;
                                }
                                if (
                                  null != e.tradePrice &&
                                  e.hasOwnProperty("tradePrice") &&
                                  "number" != typeof e.tradePrice
                                )
                                  return "tradePrice: number expected";
                                if (
                                  null != e.openingPrice &&
                                  e.hasOwnProperty("openingPrice") &&
                                  "number" != typeof e.openingPrice
                                )
                                  return "openingPrice: number expected";
                                if (
                                  null != e.highPrice &&
                                  e.hasOwnProperty("highPrice") &&
                                  "number" != typeof e.highPrice
                                )
                                  return "highPrice: number expected";
                                if (
                                  null != e.lowPrice &&
                                  e.hasOwnProperty("lowPrice") &&
                                  "number" != typeof e.lowPrice
                                )
                                  return "lowPrice: number expected";
                                if (
                                  null != e.accTradeVolume &&
                                  e.hasOwnProperty("accTradeVolume") &&
                                  "number" != typeof e.accTradeVolume
                                )
                                  return "accTradeVolume: number expected";
                                if (
                                  null != e.accTradeVolume24h &&
                                  e.hasOwnProperty("accTradeVolume24h") &&
                                  "number" != typeof e.accTradeVolume24h
                                )
                                  return "accTradeVolume24h: number expected";
                                if (
                                  null != e.accTradePrice &&
                                  e.hasOwnProperty("accTradePrice") &&
                                  "number" != typeof e.accTradePrice
                                )
                                  return "accTradePrice: number expected";
                                if (
                                  null != e.accTradePrice24h &&
                                  e.hasOwnProperty("accTradePrice24h") &&
                                  "number" != typeof e.accTradePrice24h
                                )
                                  return "accTradePrice24h: number expected";
                                if (
                                  null != e.tradeDate &&
                                  e.hasOwnProperty("tradeDate") &&
                                  !u.isInteger(e.tradeDate)
                                )
                                  return "tradeDate: integer expected";
                                if (
                                  null != e.tradeTime &&
                                  e.hasOwnProperty("tradeTime") &&
                                  !u.isInteger(e.tradeTime)
                                )
                                  return "tradeTime: integer expected";
                                if (
                                  null != e.askBid &&
                                  e.hasOwnProperty("askBid")
                                )
                                  switch (e.askBid) {
                                    default:
                                      return "askBid: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                  }
                                if (
                                  null != e.change &&
                                  e.hasOwnProperty("change")
                                )
                                  switch (e.change) {
                                    default:
                                      return "change: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                  }
                                if (
                                  null != e.tradeVolume &&
                                  e.hasOwnProperty("tradeVolume") &&
                                  "number" != typeof e.tradeVolume
                                )
                                  return "tradeVolume: number expected";
                                if (
                                  null != e.tradeTimestamp &&
                                  e.hasOwnProperty("tradeTimestamp") &&
                                  !(
                                    u.isInteger(e.tradeTimestamp) ||
                                    (e.tradeTimestamp &&
                                      u.isInteger(e.tradeTimestamp.low) &&
                                      u.isInteger(e.tradeTimestamp.high))
                                  )
                                )
                                  return "tradeTimestamp: integer|Long expected";
                                if (
                                  null != e.prevClosingPrice &&
                                  e.hasOwnProperty("prevClosingPrice") &&
                                  "number" != typeof e.prevClosingPrice
                                )
                                  return "prevClosingPrice: number expected";
                                if (
                                  null != e.changeRate &&
                                  e.hasOwnProperty("changeRate") &&
                                  "number" != typeof e.changeRate
                                )
                                  return "changeRate: number expected";
                                if (
                                  null != e.changePrice &&
                                  e.hasOwnProperty("changePrice") &&
                                  "number" != typeof e.changePrice
                                )
                                  return "changePrice: number expected";
                                if (
                                  null != e.signedChangeRate &&
                                  e.hasOwnProperty("signedChangeRate") &&
                                  "number" != typeof e.signedChangeRate
                                )
                                  return "signedChangeRate: number expected";
                                if (
                                  null != e.signedChangePrice &&
                                  e.hasOwnProperty("signedChangePrice") &&
                                  "number" != typeof e.signedChangePrice
                                )
                                  return "signedChangePrice: number expected";
                                if (
                                  null != e.isTradingSuspended &&
                                  e.hasOwnProperty("isTradingSuspended") &&
                                  "boolean" != typeof e.isTradingSuspended
                                )
                                  return "isTradingSuspended: boolean expected";
                                if (
                                  null != e.accAskVolume &&
                                  e.hasOwnProperty("accAskVolume") &&
                                  "number" != typeof e.accAskVolume
                                )
                                  return "accAskVolume: number expected";
                                if (
                                  null != e.accBidVolume &&
                                  e.hasOwnProperty("accBidVolume") &&
                                  "number" != typeof e.accBidVolume
                                )
                                  return "accBidVolume: number expected";
                                if (
                                  null != e.highest52WeekPrice &&
                                  e.hasOwnProperty("highest52WeekPrice") &&
                                  "number" != typeof e.highest52WeekPrice
                                )
                                  return "highest52WeekPrice: number expected";
                                if (
                                  null != e.highest52WeekDate &&
                                  e.hasOwnProperty("highest52WeekDate") &&
                                  !u.isInteger(e.highest52WeekDate)
                                )
                                  return "highest52WeekDate: integer expected";
                                if (
                                  null != e.lowest52WeekPrice &&
                                  e.hasOwnProperty("lowest52WeekPrice") &&
                                  "number" != typeof e.lowest52WeekPrice
                                )
                                  return "lowest52WeekPrice: number expected";
                                if (
                                  null != e.lowest52WeekDate &&
                                  e.hasOwnProperty("lowest52WeekDate") &&
                                  !u.isInteger(e.lowest52WeekDate)
                                )
                                  return "lowest52WeekDate: integer expected";
                                if (
                                  null != e.marketState &&
                                  e.hasOwnProperty("marketState")
                                )
                                  switch (e.marketState) {
                                    default:
                                      return "marketState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                  }
                                if (
                                  null != e.marketStateForIOS &&
                                  e.hasOwnProperty("marketStateForIOS")
                                )
                                  switch (e.marketStateForIOS) {
                                    default:
                                      return "marketStateForIOS: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                  }
                                if (
                                  null != e.delistingDate &&
                                  e.hasOwnProperty("delistingDate") &&
                                  !u.isInteger(e.delistingDate)
                                )
                                  return "delistingDate: integer expected";
                                if (
                                  null != e.marketWarning &&
                                  e.hasOwnProperty("marketWarning")
                                )
                                  switch (e.marketWarning) {
                                    default:
                                      return "marketWarning: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                  }
                                return null != e.delistingDateTime &&
                                  e.hasOwnProperty("delistingDateTime") &&
                                  !u.isString(e.delistingDateTime)
                                  ? "delistingDateTime: string expected"
                                  : null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf.RecentCrix
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.RecentCrix();
                                if (null != e.frontModelInfo) {
                                  if ("object" != typeof e.frontModelInfo)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.RecentCrix.frontModelInfo: object expected"
                                    );
                                  t.frontModelInfo =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.fromObject(
                                      e.frontModelInfo
                                    );
                                }
                                switch (
                                  (null != e.tradePrice &&
                                    (t.tradePrice = Number(e.tradePrice)),
                                  null != e.openingPrice &&
                                    (t.openingPrice = Number(e.openingPrice)),
                                  null != e.highPrice &&
                                    (t.highPrice = Number(e.highPrice)),
                                  null != e.lowPrice &&
                                    (t.lowPrice = Number(e.lowPrice)),
                                  null != e.accTradeVolume &&
                                    (t.accTradeVolume = Number(
                                      e.accTradeVolume
                                    )),
                                  null != e.accTradeVolume24h &&
                                    (t.accTradeVolume24h = Number(
                                      e.accTradeVolume24h
                                    )),
                                  null != e.accTradePrice &&
                                    (t.accTradePrice = Number(e.accTradePrice)),
                                  null != e.accTradePrice24h &&
                                    (t.accTradePrice24h = Number(
                                      e.accTradePrice24h
                                    )),
                                  null != e.tradeDate &&
                                    (t.tradeDate = e.tradeDate >>> 0),
                                  null != e.tradeTime &&
                                    (t.tradeTime = e.tradeTime >>> 0),
                                  e.askBid)
                                ) {
                                  default:
                                    if ("number" == typeof e.askBid) {
                                      t.askBid = e.askBid;
                                      break;
                                    }
                                    break;
                                  case "ASKUNKNOWN":
                                  case 0:
                                    t.askBid = 0;
                                    break;
                                  case "ASK":
                                  case 1:
                                    t.askBid = 1;
                                    break;
                                  case "BID":
                                  case 2:
                                    t.askBid = 2;
                                }
                                switch (e.change) {
                                  default:
                                    if ("number" == typeof e.change) {
                                      t.change = e.change;
                                      break;
                                    }
                                    break;
                                  case "CHANGEUNKNOWN":
                                  case 0:
                                    t.change = 0;
                                    break;
                                  case "UPPER_LIMIT":
                                  case 1:
                                    t.change = 1;
                                    break;
                                  case "RISE":
                                  case 2:
                                    t.change = 2;
                                    break;
                                  case "EVEN":
                                  case 3:
                                    t.change = 3;
                                    break;
                                  case "LOWER_LIMIT":
                                  case 4:
                                    t.change = 4;
                                    break;
                                  case "FALL":
                                  case 5:
                                    t.change = 5;
                                }
                                switch (
                                  (null != e.tradeVolume &&
                                    (t.tradeVolume = Number(e.tradeVolume)),
                                  null != e.tradeTimestamp &&
                                    (u.Long
                                      ? ((t.tradeTimestamp = u.Long.fromValue(
                                          e.tradeTimestamp
                                        )).unsigned = !1)
                                      : "string" == typeof e.tradeTimestamp
                                      ? (t.tradeTimestamp = parseInt(
                                          e.tradeTimestamp,
                                          10
                                        ))
                                      : "number" == typeof e.tradeTimestamp
                                      ? (t.tradeTimestamp = e.tradeTimestamp)
                                      : "object" == typeof e.tradeTimestamp &&
                                        (t.tradeTimestamp = new u.LongBits(
                                          e.tradeTimestamp.low >>> 0,
                                          e.tradeTimestamp.high >>> 0
                                        ).toNumber())),
                                  null != e.prevClosingPrice &&
                                    (t.prevClosingPrice = Number(
                                      e.prevClosingPrice
                                    )),
                                  null != e.changeRate &&
                                    (t.changeRate = Number(e.changeRate)),
                                  null != e.changePrice &&
                                    (t.changePrice = Number(e.changePrice)),
                                  null != e.signedChangeRate &&
                                    (t.signedChangeRate = Number(
                                      e.signedChangeRate
                                    )),
                                  null != e.signedChangePrice &&
                                    (t.signedChangePrice = Number(
                                      e.signedChangePrice
                                    )),
                                  null != e.isTradingSuspended &&
                                    (t.isTradingSuspended = Boolean(
                                      e.isTradingSuspended
                                    )),
                                  null != e.accAskVolume &&
                                    (t.accAskVolume = Number(e.accAskVolume)),
                                  null != e.accBidVolume &&
                                    (t.accBidVolume = Number(e.accBidVolume)),
                                  null != e.highest52WeekPrice &&
                                    (t.highest52WeekPrice = Number(
                                      e.highest52WeekPrice
                                    )),
                                  null != e.highest52WeekDate &&
                                    (t.highest52WeekDate =
                                      e.highest52WeekDate >>> 0),
                                  null != e.lowest52WeekPrice &&
                                    (t.lowest52WeekPrice = Number(
                                      e.lowest52WeekPrice
                                    )),
                                  null != e.lowest52WeekDate &&
                                    (t.lowest52WeekDate =
                                      e.lowest52WeekDate >>> 0),
                                  e.marketState)
                                ) {
                                  default:
                                    if ("number" == typeof e.marketState) {
                                      t.marketState = e.marketState;
                                      break;
                                    }
                                    break;
                                  case "PREVIEW":
                                  case 0:
                                    t.marketState = 0;
                                    break;
                                  case "ACTIVE":
                                  case 1:
                                    t.marketState = 1;
                                    break;
                                  case "UNAVAILABLE":
                                  case 2:
                                    t.marketState = 2;
                                    break;
                                  case "PREDELISTING":
                                  case 3:
                                    t.marketState = 3;
                                    break;
                                  case "DELISTED":
                                  case 4:
                                    t.marketState = 4;
                                }
                                switch (e.marketStateForIOS) {
                                  default:
                                    if (
                                      "number" == typeof e.marketStateForIOS
                                    ) {
                                      t.marketStateForIOS = e.marketStateForIOS;
                                      break;
                                    }
                                    break;
                                  case "PREVIEW":
                                  case 0:
                                    t.marketStateForIOS = 0;
                                    break;
                                  case "ACTIVE":
                                  case 1:
                                    t.marketStateForIOS = 1;
                                    break;
                                  case "UNAVAILABLE":
                                  case 2:
                                    t.marketStateForIOS = 2;
                                    break;
                                  case "PREDELISTING":
                                  case 3:
                                    t.marketStateForIOS = 3;
                                    break;
                                  case "DELISTED":
                                  case 4:
                                    t.marketStateForIOS = 4;
                                }
                                switch (
                                  (null != e.delistingDate &&
                                    (t.delistingDate = e.delistingDate >>> 0),
                                  e.marketWarning)
                                ) {
                                  default:
                                    if ("number" == typeof e.marketWarning) {
                                      t.marketWarning = e.marketWarning;
                                      break;
                                    }
                                    break;
                                  case "NONE":
                                  case 0:
                                    t.marketWarning = 0;
                                    break;
                                  case "CAUTION":
                                  case 1:
                                    t.marketWarning = 1;
                                    break;
                                  case "ALERT":
                                  case 2:
                                    t.marketWarning = 2;
                                    break;
                                  case "RISK":
                                  case 3:
                                    t.marketWarning = 3;
                                }
                                return (
                                  null != e.delistingDateTime &&
                                    (t.delistingDateTime = String(
                                      e.delistingDateTime
                                    )),
                                  t
                                );
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                if (t.defaults) {
                                  if (
                                    ((a.frontModelInfo = null),
                                    (a.tradePrice = 0),
                                    (a.openingPrice = 0),
                                    (a.highPrice = 0),
                                    (a.lowPrice = 0),
                                    (a.accTradeVolume = 0),
                                    (a.accTradeVolume24h = 0),
                                    (a.accTradePrice = 0),
                                    (a.accTradePrice24h = 0),
                                    (a.tradeDate = 0),
                                    (a.tradeTime = 0),
                                    (a.askBid =
                                      t.enums === String ? "ASKUNKNOWN" : 0),
                                    (a.change =
                                      t.enums === String ? "CHANGEUNKNOWN" : 0),
                                    (a.tradeVolume = 0),
                                    u.Long)
                                  ) {
                                    var r = new u.Long(0, 0, !1);
                                    a.tradeTimestamp =
                                      t.longs === String
                                        ? r.toString()
                                        : t.longs === Number
                                        ? r.toNumber()
                                        : r;
                                  } else
                                    a.tradeTimestamp =
                                      t.longs === String ? "0" : 0;
                                  (a.prevClosingPrice = 0),
                                    (a.changeRate = 0),
                                    (a.changePrice = 0),
                                    (a.signedChangeRate = 0),
                                    (a.signedChangePrice = 0),
                                    (a.isTradingSuspended = !1),
                                    (a.accAskVolume = 0),
                                    (a.accBidVolume = 0),
                                    (a.highest52WeekPrice = 0),
                                    (a.highest52WeekDate = 0),
                                    (a.lowest52WeekPrice = 0),
                                    (a.lowest52WeekDate = 0),
                                    (a.marketState =
                                      t.enums === String ? "PREVIEW" : 0),
                                    (a.marketStateForIOS =
                                      t.enums === String ? "PREVIEW" : 0),
                                    (a.delistingDate = 0),
                                    (a.marketWarning =
                                      t.enums === String ? "NONE" : 0),
                                    (a.delistingDateTime = "");
                                }
                                return (
                                  null != e.frontModelInfo &&
                                    e.hasOwnProperty("frontModelInfo") &&
                                    (a.frontModelInfo =
                                      m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.toObject(
                                        e.frontModelInfo,
                                        t
                                      )),
                                  null != e.tradePrice &&
                                    e.hasOwnProperty("tradePrice") &&
                                    (a.tradePrice =
                                      t.json && !isFinite(e.tradePrice)
                                        ? String(e.tradePrice)
                                        : e.tradePrice),
                                  null != e.openingPrice &&
                                    e.hasOwnProperty("openingPrice") &&
                                    (a.openingPrice =
                                      t.json && !isFinite(e.openingPrice)
                                        ? String(e.openingPrice)
                                        : e.openingPrice),
                                  null != e.highPrice &&
                                    e.hasOwnProperty("highPrice") &&
                                    (a.highPrice =
                                      t.json && !isFinite(e.highPrice)
                                        ? String(e.highPrice)
                                        : e.highPrice),
                                  null != e.lowPrice &&
                                    e.hasOwnProperty("lowPrice") &&
                                    (a.lowPrice =
                                      t.json && !isFinite(e.lowPrice)
                                        ? String(e.lowPrice)
                                        : e.lowPrice),
                                  null != e.accTradeVolume &&
                                    e.hasOwnProperty("accTradeVolume") &&
                                    (a.accTradeVolume =
                                      t.json && !isFinite(e.accTradeVolume)
                                        ? String(e.accTradeVolume)
                                        : e.accTradeVolume),
                                  null != e.accTradeVolume24h &&
                                    e.hasOwnProperty("accTradeVolume24h") &&
                                    (a.accTradeVolume24h =
                                      t.json && !isFinite(e.accTradeVolume24h)
                                        ? String(e.accTradeVolume24h)
                                        : e.accTradeVolume24h),
                                  null != e.accTradePrice &&
                                    e.hasOwnProperty("accTradePrice") &&
                                    (a.accTradePrice =
                                      t.json && !isFinite(e.accTradePrice)
                                        ? String(e.accTradePrice)
                                        : e.accTradePrice),
                                  null != e.accTradePrice24h &&
                                    e.hasOwnProperty("accTradePrice24h") &&
                                    (a.accTradePrice24h =
                                      t.json && !isFinite(e.accTradePrice24h)
                                        ? String(e.accTradePrice24h)
                                        : e.accTradePrice24h),
                                  null != e.tradeDate &&
                                    e.hasOwnProperty("tradeDate") &&
                                    (a.tradeDate = e.tradeDate),
                                  null != e.tradeTime &&
                                    e.hasOwnProperty("tradeTime") &&
                                    (a.tradeTime = e.tradeTime),
                                  null != e.askBid &&
                                    e.hasOwnProperty("askBid") &&
                                    (a.askBid =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.AskBid[e.askBid]
                                          ? e.askBid
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.AskBid[e.askBid]
                                        : e.askBid),
                                  null != e.change &&
                                    e.hasOwnProperty("change") &&
                                    (a.change =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.Change[e.change]
                                          ? e.change
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.Change[e.change]
                                        : e.change),
                                  null != e.tradeVolume &&
                                    e.hasOwnProperty("tradeVolume") &&
                                    (a.tradeVolume =
                                      t.json && !isFinite(e.tradeVolume)
                                        ? String(e.tradeVolume)
                                        : e.tradeVolume),
                                  null != e.tradeTimestamp &&
                                    e.hasOwnProperty("tradeTimestamp") &&
                                    ("number" == typeof e.tradeTimestamp
                                      ? (a.tradeTimestamp =
                                          t.longs === String
                                            ? String(e.tradeTimestamp)
                                            : e.tradeTimestamp)
                                      : (a.tradeTimestamp =
                                          t.longs === String
                                            ? u.Long.prototype.toString.call(
                                                e.tradeTimestamp
                                              )
                                            : t.longs === Number
                                            ? new u.LongBits(
                                                e.tradeTimestamp.low >>> 0,
                                                e.tradeTimestamp.high >>> 0
                                              ).toNumber()
                                            : e.tradeTimestamp)),
                                  null != e.prevClosingPrice &&
                                    e.hasOwnProperty("prevClosingPrice") &&
                                    (a.prevClosingPrice =
                                      t.json && !isFinite(e.prevClosingPrice)
                                        ? String(e.prevClosingPrice)
                                        : e.prevClosingPrice),
                                  null != e.changeRate &&
                                    e.hasOwnProperty("changeRate") &&
                                    (a.changeRate =
                                      t.json && !isFinite(e.changeRate)
                                        ? String(e.changeRate)
                                        : e.changeRate),
                                  null != e.changePrice &&
                                    e.hasOwnProperty("changePrice") &&
                                    (a.changePrice =
                                      t.json && !isFinite(e.changePrice)
                                        ? String(e.changePrice)
                                        : e.changePrice),
                                  null != e.signedChangeRate &&
                                    e.hasOwnProperty("signedChangeRate") &&
                                    (a.signedChangeRate =
                                      t.json && !isFinite(e.signedChangeRate)
                                        ? String(e.signedChangeRate)
                                        : e.signedChangeRate),
                                  null != e.signedChangePrice &&
                                    e.hasOwnProperty("signedChangePrice") &&
                                    (a.signedChangePrice =
                                      t.json && !isFinite(e.signedChangePrice)
                                        ? String(e.signedChangePrice)
                                        : e.signedChangePrice),
                                  null != e.isTradingSuspended &&
                                    e.hasOwnProperty("isTradingSuspended") &&
                                    (a.isTradingSuspended =
                                      e.isTradingSuspended),
                                  null != e.accAskVolume &&
                                    e.hasOwnProperty("accAskVolume") &&
                                    (a.accAskVolume =
                                      t.json && !isFinite(e.accAskVolume)
                                        ? String(e.accAskVolume)
                                        : e.accAskVolume),
                                  null != e.accBidVolume &&
                                    e.hasOwnProperty("accBidVolume") &&
                                    (a.accBidVolume =
                                      t.json && !isFinite(e.accBidVolume)
                                        ? String(e.accBidVolume)
                                        : e.accBidVolume),
                                  null != e.highest52WeekPrice &&
                                    e.hasOwnProperty("highest52WeekPrice") &&
                                    (a.highest52WeekPrice =
                                      t.json && !isFinite(e.highest52WeekPrice)
                                        ? String(e.highest52WeekPrice)
                                        : e.highest52WeekPrice),
                                  null != e.highest52WeekDate &&
                                    e.hasOwnProperty("highest52WeekDate") &&
                                    (a.highest52WeekDate = e.highest52WeekDate),
                                  null != e.lowest52WeekPrice &&
                                    e.hasOwnProperty("lowest52WeekPrice") &&
                                    (a.lowest52WeekPrice =
                                      t.json && !isFinite(e.lowest52WeekPrice)
                                        ? String(e.lowest52WeekPrice)
                                        : e.lowest52WeekPrice),
                                  null != e.lowest52WeekDate &&
                                    e.hasOwnProperty("lowest52WeekDate") &&
                                    (a.lowest52WeekDate = e.lowest52WeekDate),
                                  null != e.marketState &&
                                    e.hasOwnProperty("marketState") &&
                                    (a.marketState =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.CrixMarketState[
                                            e.marketState
                                          ]
                                          ? e.marketState
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.CrixMarketState[
                                              e.marketState
                                            ]
                                        : e.marketState),
                                  null != e.marketStateForIOS &&
                                    e.hasOwnProperty("marketStateForIOS") &&
                                    (a.marketStateForIOS =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.CrixMarketState[
                                            e.marketStateForIOS
                                          ]
                                          ? e.marketStateForIOS
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.CrixMarketState[
                                              e.marketStateForIOS
                                            ]
                                        : e.marketStateForIOS),
                                  null != e.delistingDate &&
                                    e.hasOwnProperty("delistingDate") &&
                                    (a.delistingDate = e.delistingDate),
                                  null != e.marketWarning &&
                                    e.hasOwnProperty("marketWarning") &&
                                    (a.marketWarning =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.CrixMarketWarning[
                                            e.marketWarning
                                          ]
                                          ? e.marketWarning
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.CrixMarketWarning[
                                              e.marketWarning
                                            ]
                                        : e.marketWarning),
                                  null != e.delistingDateTime &&
                                    e.hasOwnProperty("delistingDateTime") &&
                                    (a.delistingDateTime = e.delistingDateTime),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.RecentCrix"
                                );
                              }),
                              t
                            );
                          })()),
                          (n.ShortRecentCrix = (function () {
                            function t(e) {
                              if (e)
                                for (
                                  var t = Object.keys(e), a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  null != e[t[a]] && (this[t[a]] = e[t[a]]);
                            }
                            return (
                              (t.prototype.frontModelInfo = null),
                              (t.prototype.tradePrice = 0),
                              (t.prototype.openingPrice = 0),
                              (t.prototype.highPrice = 0),
                              (t.prototype.lowPrice = 0),
                              (t.prototype.prevClosingPrice = 0),
                              (t.prototype.accTradePrice24h = 0),
                              (t.prototype.isTradingSuspended = !1),
                              (t.prototype.marketState = 0),
                              (t.prototype.marketWarning = 0),
                              (t.prototype.askBid = 0),
                              (t.create = function (e) {
                                return new t(e);
                              }),
                              (t.encode = function (e, t) {
                                return (
                                  t || (t = d.create()),
                                  null != e.frontModelInfo &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "frontModelInfo"
                                    ) &&
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.encode(
                                      e.frontModelInfo,
                                      t.uint32(10).fork()
                                    ).ldelim(),
                                  null != e.tradePrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "tradePrice"
                                    ) &&
                                    t.uint32(17).double(e.tradePrice),
                                  null != e.openingPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "openingPrice"
                                    ) &&
                                    t.uint32(25).double(e.openingPrice),
                                  null != e.highPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "highPrice"
                                    ) &&
                                    t.uint32(33).double(e.highPrice),
                                  null != e.lowPrice &&
                                    Object.hasOwnProperty.call(e, "lowPrice") &&
                                    t.uint32(41).double(e.lowPrice),
                                  null != e.prevClosingPrice &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "prevClosingPrice"
                                    ) &&
                                    t.uint32(49).double(e.prevClosingPrice),
                                  null != e.accTradePrice24h &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "accTradePrice24h"
                                    ) &&
                                    t.uint32(57).double(e.accTradePrice24h),
                                  null != e.isTradingSuspended &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "isTradingSuspended"
                                    ) &&
                                    t.uint32(64).bool(e.isTradingSuspended),
                                  null != e.marketState &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "marketState"
                                    ) &&
                                    t.uint32(72).int32(e.marketState),
                                  null != e.marketWarning &&
                                    Object.hasOwnProperty.call(
                                      e,
                                      "marketWarning"
                                    ) &&
                                    t.uint32(80).int32(e.marketWarning),
                                  null != e.askBid &&
                                    Object.hasOwnProperty.call(e, "askBid") &&
                                    t.uint32(88).int32(e.askBid),
                                  t
                                );
                              }),
                              (t.encodeDelimited = function (e, t) {
                                return this.encode(e, t).ldelim();
                              }),
                              (t.decode = function (e, t, a) {
                                e instanceof c || (e = c.create(e));
                                for (
                                  var r = void 0 === t ? e.len : e.pos + t,
                                    n =
                                      new m.com.dunamu.crix.front.protobuf.ShortRecentCrix();
                                  e.pos < r;

                                ) {
                                  var i = e.uint32();
                                  if (i === a) break;
                                  switch (i >>> 3) {
                                    case 1:
                                      n.frontModelInfo =
                                        m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.decode(
                                          e,
                                          e.uint32()
                                        );
                                      break;
                                    case 2:
                                      n.tradePrice = e.double();
                                      break;
                                    case 3:
                                      n.openingPrice = e.double();
                                      break;
                                    case 4:
                                      n.highPrice = e.double();
                                      break;
                                    case 5:
                                      n.lowPrice = e.double();
                                      break;
                                    case 6:
                                      n.prevClosingPrice = e.double();
                                      break;
                                    case 7:
                                      n.accTradePrice24h = e.double();
                                      break;
                                    case 8:
                                      n.isTradingSuspended = e.bool();
                                      break;
                                    case 9:
                                      n.marketState = e.int32();
                                      break;
                                    case 10:
                                      n.marketWarning = e.int32();
                                      break;
                                    case 11:
                                      n.askBid = e.int32();
                                      break;
                                    default:
                                      e.skipType(7 & i);
                                  }
                                }
                                return n;
                              }),
                              (t.decodeDelimited = function (e) {
                                return (
                                  e instanceof c || (e = new c(e)),
                                  this.decode(e, e.uint32())
                                );
                              }),
                              (t.verify = function (e) {
                                if ("object" != typeof e || null === e)
                                  return "object expected";
                                if (
                                  null != e.frontModelInfo &&
                                  e.hasOwnProperty("frontModelInfo")
                                ) {
                                  var t =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.verify(
                                      e.frontModelInfo
                                    );
                                  if (t) return "frontModelInfo." + t;
                                }
                                if (
                                  null != e.tradePrice &&
                                  e.hasOwnProperty("tradePrice") &&
                                  "number" != typeof e.tradePrice
                                )
                                  return "tradePrice: number expected";
                                if (
                                  null != e.openingPrice &&
                                  e.hasOwnProperty("openingPrice") &&
                                  "number" != typeof e.openingPrice
                                )
                                  return "openingPrice: number expected";
                                if (
                                  null != e.highPrice &&
                                  e.hasOwnProperty("highPrice") &&
                                  "number" != typeof e.highPrice
                                )
                                  return "highPrice: number expected";
                                if (
                                  null != e.lowPrice &&
                                  e.hasOwnProperty("lowPrice") &&
                                  "number" != typeof e.lowPrice
                                )
                                  return "lowPrice: number expected";
                                if (
                                  null != e.prevClosingPrice &&
                                  e.hasOwnProperty("prevClosingPrice") &&
                                  "number" != typeof e.prevClosingPrice
                                )
                                  return "prevClosingPrice: number expected";
                                if (
                                  null != e.accTradePrice24h &&
                                  e.hasOwnProperty("accTradePrice24h") &&
                                  "number" != typeof e.accTradePrice24h
                                )
                                  return "accTradePrice24h: number expected";
                                if (
                                  null != e.isTradingSuspended &&
                                  e.hasOwnProperty("isTradingSuspended") &&
                                  "boolean" != typeof e.isTradingSuspended
                                )
                                  return "isTradingSuspended: boolean expected";
                                if (
                                  null != e.marketState &&
                                  e.hasOwnProperty("marketState")
                                )
                                  switch (e.marketState) {
                                    default:
                                      return "marketState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                  }
                                if (
                                  null != e.marketWarning &&
                                  e.hasOwnProperty("marketWarning")
                                )
                                  switch (e.marketWarning) {
                                    default:
                                      return "marketWarning: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                  }
                                if (
                                  null != e.askBid &&
                                  e.hasOwnProperty("askBid")
                                )
                                  switch (e.askBid) {
                                    default:
                                      return "askBid: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                  }
                                return null;
                              }),
                              (t.fromObject = function (e) {
                                if (
                                  e instanceof
                                  m.com.dunamu.crix.front.protobuf
                                    .ShortRecentCrix
                                )
                                  return e;
                                var t =
                                  new m.com.dunamu.crix.front.protobuf.ShortRecentCrix();
                                if (null != e.frontModelInfo) {
                                  if ("object" != typeof e.frontModelInfo)
                                    throw TypeError(
                                      ".com.dunamu.crix.front.protobuf.ShortRecentCrix.frontModelInfo: object expected"
                                    );
                                  t.frontModelInfo =
                                    m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.fromObject(
                                      e.frontModelInfo
                                    );
                                }
                                switch (
                                  (null != e.tradePrice &&
                                    (t.tradePrice = Number(e.tradePrice)),
                                  null != e.openingPrice &&
                                    (t.openingPrice = Number(e.openingPrice)),
                                  null != e.highPrice &&
                                    (t.highPrice = Number(e.highPrice)),
                                  null != e.lowPrice &&
                                    (t.lowPrice = Number(e.lowPrice)),
                                  null != e.prevClosingPrice &&
                                    (t.prevClosingPrice = Number(
                                      e.prevClosingPrice
                                    )),
                                  null != e.accTradePrice24h &&
                                    (t.accTradePrice24h = Number(
                                      e.accTradePrice24h
                                    )),
                                  null != e.isTradingSuspended &&
                                    (t.isTradingSuspended = Boolean(
                                      e.isTradingSuspended
                                    )),
                                  e.marketState)
                                ) {
                                  default:
                                    if ("number" == typeof e.marketState) {
                                      t.marketState = e.marketState;
                                      break;
                                    }
                                    break;
                                  case "PREVIEW":
                                  case 0:
                                    t.marketState = 0;
                                    break;
                                  case "ACTIVE":
                                  case 1:
                                    t.marketState = 1;
                                    break;
                                  case "UNAVAILABLE":
                                  case 2:
                                    t.marketState = 2;
                                    break;
                                  case "PREDELISTING":
                                  case 3:
                                    t.marketState = 3;
                                    break;
                                  case "DELISTED":
                                  case 4:
                                    t.marketState = 4;
                                }
                                switch (e.marketWarning) {
                                  default:
                                    if ("number" == typeof e.marketWarning) {
                                      t.marketWarning = e.marketWarning;
                                      break;
                                    }
                                    break;
                                  case "NONE":
                                  case 0:
                                    t.marketWarning = 0;
                                    break;
                                  case "CAUTION":
                                  case 1:
                                    t.marketWarning = 1;
                                    break;
                                  case "ALERT":
                                  case 2:
                                    t.marketWarning = 2;
                                    break;
                                  case "RISK":
                                  case 3:
                                    t.marketWarning = 3;
                                }
                                switch (e.askBid) {
                                  default:
                                    if ("number" == typeof e.askBid) {
                                      t.askBid = e.askBid;
                                      break;
                                    }
                                    break;
                                  case "ASKUNKNOWN":
                                  case 0:
                                    t.askBid = 0;
                                    break;
                                  case "ASK":
                                  case 1:
                                    t.askBid = 1;
                                    break;
                                  case "BID":
                                  case 2:
                                    t.askBid = 2;
                                }
                                return t;
                              }),
                              (t.toObject = function (e, t) {
                                t || (t = {});
                                var a = {};
                                return (
                                  t.defaults &&
                                    ((a.frontModelInfo = null),
                                    (a.tradePrice = 0),
                                    (a.openingPrice = 0),
                                    (a.highPrice = 0),
                                    (a.lowPrice = 0),
                                    (a.prevClosingPrice = 0),
                                    (a.accTradePrice24h = 0),
                                    (a.isTradingSuspended = !1),
                                    (a.marketState =
                                      t.enums === String ? "PREVIEW" : 0),
                                    (a.marketWarning =
                                      t.enums === String ? "NONE" : 0),
                                    (a.askBid =
                                      t.enums === String ? "ASKUNKNOWN" : 0)),
                                  null != e.frontModelInfo &&
                                    e.hasOwnProperty("frontModelInfo") &&
                                    (a.frontModelInfo =
                                      m.com.dunamu.crix.front.protobuf.common.FrontModelInfo.toObject(
                                        e.frontModelInfo,
                                        t
                                      )),
                                  null != e.tradePrice &&
                                    e.hasOwnProperty("tradePrice") &&
                                    (a.tradePrice =
                                      t.json && !isFinite(e.tradePrice)
                                        ? String(e.tradePrice)
                                        : e.tradePrice),
                                  null != e.openingPrice &&
                                    e.hasOwnProperty("openingPrice") &&
                                    (a.openingPrice =
                                      t.json && !isFinite(e.openingPrice)
                                        ? String(e.openingPrice)
                                        : e.openingPrice),
                                  null != e.highPrice &&
                                    e.hasOwnProperty("highPrice") &&
                                    (a.highPrice =
                                      t.json && !isFinite(e.highPrice)
                                        ? String(e.highPrice)
                                        : e.highPrice),
                                  null != e.lowPrice &&
                                    e.hasOwnProperty("lowPrice") &&
                                    (a.lowPrice =
                                      t.json && !isFinite(e.lowPrice)
                                        ? String(e.lowPrice)
                                        : e.lowPrice),
                                  null != e.prevClosingPrice &&
                                    e.hasOwnProperty("prevClosingPrice") &&
                                    (a.prevClosingPrice =
                                      t.json && !isFinite(e.prevClosingPrice)
                                        ? String(e.prevClosingPrice)
                                        : e.prevClosingPrice),
                                  null != e.accTradePrice24h &&
                                    e.hasOwnProperty("accTradePrice24h") &&
                                    (a.accTradePrice24h =
                                      t.json && !isFinite(e.accTradePrice24h)
                                        ? String(e.accTradePrice24h)
                                        : e.accTradePrice24h),
                                  null != e.isTradingSuspended &&
                                    e.hasOwnProperty("isTradingSuspended") &&
                                    (a.isTradingSuspended =
                                      e.isTradingSuspended),
                                  null != e.marketState &&
                                    e.hasOwnProperty("marketState") &&
                                    (a.marketState =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.CrixMarketState[
                                            e.marketState
                                          ]
                                          ? e.marketState
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.CrixMarketState[
                                              e.marketState
                                            ]
                                        : e.marketState),
                                  null != e.marketWarning &&
                                    e.hasOwnProperty("marketWarning") &&
                                    (a.marketWarning =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.CrixMarketWarning[
                                            e.marketWarning
                                          ]
                                          ? e.marketWarning
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.CrixMarketWarning[
                                              e.marketWarning
                                            ]
                                        : e.marketWarning),
                                  null != e.askBid &&
                                    e.hasOwnProperty("askBid") &&
                                    (a.askBid =
                                      t.enums === String
                                        ? void 0 ===
                                          m.com.dunamu.crix.front.protobuf
                                            .common.AskBid[e.askBid]
                                          ? e.askBid
                                          : m.com.dunamu.crix.front.protobuf
                                              .common.AskBid[e.askBid]
                                        : e.askBid),
                                  a
                                );
                              }),
                              (t.prototype.toJSON = function () {
                                return this.constructor.toObject(
                                  this,
                                  e.util.toJSONOptions
                                );
                              }),
                              (t.getTypeUrl = function (e) {
                                return (
                                  void 0 === e && (e = "type.googleapis.com"),
                                  e +
                                    "/com.dunamu.crix.front.protobuf.ShortRecentCrix"
                                );
                              }),
                              t
                            );
                          })()),
                          n)),
                        i)),
                      o)),
                    l)),
                  s)),
                (m.google = (function () {
                  var t,
                    a = {};
                  return (
                    (a.protobuf =
                      (((t = {}).DoubleValue = (function () {
                        function t(e) {
                          if (e)
                            for (
                              var t = Object.keys(e), a = 0;
                              a < t.length;
                              ++a
                            )
                              null != e[t[a]] && (this[t[a]] = e[t[a]]);
                        }
                        return (
                          (t.prototype.value = 0),
                          (t.create = function (e) {
                            return new t(e);
                          }),
                          (t.encode = function (e, t) {
                            return (
                              t || (t = d.create()),
                              null != e.value &&
                                Object.hasOwnProperty.call(e, "value") &&
                                t.uint32(9).double(e.value),
                              t
                            );
                          }),
                          (t.encodeDelimited = function (e, t) {
                            return this.encode(e, t).ldelim();
                          }),
                          (t.decode = function (e, t, a) {
                            e instanceof c || (e = c.create(e));
                            for (
                              var r = void 0 === t ? e.len : e.pos + t,
                                n = new m.google.protobuf.DoubleValue();
                              e.pos < r;

                            ) {
                              var i = e.uint32();
                              if (i === a) break;
                              i >>> 3 == 1
                                ? (n.value = e.double())
                                : e.skipType(7 & i);
                            }
                            return n;
                          }),
                          (t.decodeDelimited = function (e) {
                            return (
                              e instanceof c || (e = new c(e)),
                              this.decode(e, e.uint32())
                            );
                          }),
                          (t.verify = function (e) {
                            return "object" != typeof e || null === e
                              ? "object expected"
                              : null != e.value &&
                                e.hasOwnProperty("value") &&
                                "number" != typeof e.value
                              ? "value: number expected"
                              : null;
                          }),
                          (t.fromObject = function (e) {
                            if (e instanceof m.google.protobuf.DoubleValue)
                              return e;
                            var t = new m.google.protobuf.DoubleValue();
                            return (
                              null != e.value && (t.value = Number(e.value)), t
                            );
                          }),
                          (t.toObject = function (e, t) {
                            t || (t = {});
                            var a = {};
                            return (
                              t.defaults && (a.value = 0),
                              null != e.value &&
                                e.hasOwnProperty("value") &&
                                (a.value =
                                  t.json && !isFinite(e.value)
                                    ? String(e.value)
                                    : e.value),
                              a
                            );
                          }),
                          (t.prototype.toJSON = function () {
                            return this.constructor.toObject(
                              this,
                              e.util.toJSONOptions
                            );
                          }),
                          (t.getTypeUrl = function (e) {
                            return (
                              void 0 === e && (e = "type.googleapis.com"),
                              e + "/google.protobuf.DoubleValue"
                            );
                          }),
                          t
                        );
                      })()),
                      (t.FloatValue = (function () {
                        function t(e) {
                          if (e)
                            for (
                              var t = Object.keys(e), a = 0;
                              a < t.length;
                              ++a
                            )
                              null != e[t[a]] && (this[t[a]] = e[t[a]]);
                        }
                        return (
                          (t.prototype.value = 0),
                          (t.create = function (e) {
                            return new t(e);
                          }),
                          (t.encode = function (e, t) {
                            return (
                              t || (t = d.create()),
                              null != e.value &&
                                Object.hasOwnProperty.call(e, "value") &&
                                t.uint32(13).float(e.value),
                              t
                            );
                          }),
                          (t.encodeDelimited = function (e, t) {
                            return this.encode(e, t).ldelim();
                          }),
                          (t.decode = function (e, t, a) {
                            e instanceof c || (e = c.create(e));
                            for (
                              var r = void 0 === t ? e.len : e.pos + t,
                                n = new m.google.protobuf.FloatValue();
                              e.pos < r;

                            ) {
                              var i = e.uint32();
                              if (i === a) break;
                              i >>> 3 == 1
                                ? (n.value = e.float())
                                : e.skipType(7 & i);
                            }
                            return n;
                          }),
                          (t.decodeDelimited = function (e) {
                            return (
                              e instanceof c || (e = new c(e)),
                              this.decode(e, e.uint32())
                            );
                          }),
                          (t.verify = function (e) {
                            return "object" != typeof e || null === e
                              ? "object expected"
                              : null != e.value &&
                                e.hasOwnProperty("value") &&
                                "number" != typeof e.value
                              ? "value: number expected"
                              : null;
                          }),
                          (t.fromObject = function (e) {
                            if (e instanceof m.google.protobuf.FloatValue)
                              return e;
                            var t = new m.google.protobuf.FloatValue();
                            return (
                              null != e.value && (t.value = Number(e.value)), t
                            );
                          }),
                          (t.toObject = function (e, t) {
                            t || (t = {});
                            var a = {};
                            return (
                              t.defaults && (a.value = 0),
                              null != e.value &&
                                e.hasOwnProperty("value") &&
                                (a.value =
                                  t.json && !isFinite(e.value)
                                    ? String(e.value)
                                    : e.value),
                              a
                            );
                          }),
                          (t.prototype.toJSON = function () {
                            return this.constructor.toObject(
                              this,
                              e.util.toJSONOptions
                            );
                          }),
                          (t.getTypeUrl = function (e) {
                            return (
                              void 0 === e && (e = "type.googleapis.com"),
                              e + "/google.protobuf.FloatValue"
                            );
                          }),
                          t
                        );
                      })()),
                      (t.Int64Value = (function () {
                        function t(e) {
                          if (e)
                            for (
                              var t = Object.keys(e), a = 0;
                              a < t.length;
                              ++a
                            )
                              null != e[t[a]] && (this[t[a]] = e[t[a]]);
                        }
                        return (
                          (t.prototype.value = u.Long
                            ? u.Long.fromBits(0, 0, !1)
                            : 0),
                          (t.create = function (e) {
                            return new t(e);
                          }),
                          (t.encode = function (e, t) {
                            return (
                              t || (t = d.create()),
                              null != e.value &&
                                Object.hasOwnProperty.call(e, "value") &&
                                t.uint32(8).int64(e.value),
                              t
                            );
                          }),
                          (t.encodeDelimited = function (e, t) {
                            return this.encode(e, t).ldelim();
                          }),
                          (t.decode = function (e, t, a) {
                            e instanceof c || (e = c.create(e));
                            for (
                              var r = void 0 === t ? e.len : e.pos + t,
                                n = new m.google.protobuf.Int64Value();
                              e.pos < r;

                            ) {
                              var i = e.uint32();
                              if (i === a) break;
                              i >>> 3 == 1
                                ? (n.value = e.int64())
                                : e.skipType(7 & i);
                            }
                            return n;
                          }),
                          (t.decodeDelimited = function (e) {
                            return (
                              e instanceof c || (e = new c(e)),
                              this.decode(e, e.uint32())
                            );
                          }),
                          (t.verify = function (e) {
                            return "object" != typeof e || null === e
                              ? "object expected"
                              : null != e.value &&
                                e.hasOwnProperty("value") &&
                                !(
                                  u.isInteger(e.value) ||
                                  (e.value &&
                                    u.isInteger(e.value.low) &&
                                    u.isInteger(e.value.high))
                                )
                              ? "value: integer|Long expected"
                              : null;
                          }),
                          (t.fromObject = function (e) {
                            if (e instanceof m.google.protobuf.Int64Value)
                              return e;
                            var t = new m.google.protobuf.Int64Value();
                            return (
                              null != e.value &&
                                (u.Long
                                  ? ((t.value = u.Long.fromValue(
                                      e.value
                                    )).unsigned = !1)
                                  : "string" == typeof e.value
                                  ? (t.value = parseInt(e.value, 10))
                                  : "number" == typeof e.value
                                  ? (t.value = e.value)
                                  : "object" == typeof e.value &&
                                    (t.value = new u.LongBits(
                                      e.value.low >>> 0,
                                      e.value.high >>> 0
                                    ).toNumber())),
                              t
                            );
                          }),
                          (t.toObject = function (e, t) {
                            t || (t = {});
                            var a = {};
                            if (t.defaults)
                              if (u.Long) {
                                var r = new u.Long(0, 0, !1);
                                a.value =
                                  t.longs === String
                                    ? r.toString()
                                    : t.longs === Number
                                    ? r.toNumber()
                                    : r;
                              } else a.value = t.longs === String ? "0" : 0;
                            return (
                              null != e.value &&
                                e.hasOwnProperty("value") &&
                                ("number" == typeof e.value
                                  ? (a.value =
                                      t.longs === String
                                        ? String(e.value)
                                        : e.value)
                                  : (a.value =
                                      t.longs === String
                                        ? u.Long.prototype.toString.call(
                                            e.value
                                          )
                                        : t.longs === Number
                                        ? new u.LongBits(
                                            e.value.low >>> 0,
                                            e.value.high >>> 0
                                          ).toNumber()
                                        : e.value)),
                              a
                            );
                          }),
                          (t.prototype.toJSON = function () {
                            return this.constructor.toObject(
                              this,
                              e.util.toJSONOptions
                            );
                          }),
                          (t.getTypeUrl = function (e) {
                            return (
                              void 0 === e && (e = "type.googleapis.com"),
                              e + "/google.protobuf.Int64Value"
                            );
                          }),
                          t
                        );
                      })()),
                      (t.UInt64Value = (function () {
                        function t(e) {
                          if (e)
                            for (
                              var t = Object.keys(e), a = 0;
                              a < t.length;
                              ++a
                            )
                              null != e[t[a]] && (this[t[a]] = e[t[a]]);
                        }
                        return (
                          (t.prototype.value = u.Long
                            ? u.Long.fromBits(0, 0, !0)
                            : 0),
                          (t.create = function (e) {
                            return new t(e);
                          }),
                          (t.encode = function (e, t) {
                            return (
                              t || (t = d.create()),
                              null != e.value &&
                                Object.hasOwnProperty.call(e, "value") &&
                                t.uint32(8).uint64(e.value),
                              t
                            );
                          }),
                          (t.encodeDelimited = function (e, t) {
                            return this.encode(e, t).ldelim();
                          }),
                          (t.decode = function (e, t, a) {
                            e instanceof c || (e = c.create(e));
                            for (
                              var r = void 0 === t ? e.len : e.pos + t,
                                n = new m.google.protobuf.UInt64Value();
                              e.pos < r;

                            ) {
                              var i = e.uint32();
                              if (i === a) break;
                              i >>> 3 == 1
                                ? (n.value = e.uint64())
                                : e.skipType(7 & i);
                            }
                            return n;
                          }),
                          (t.decodeDelimited = function (e) {
                            return (
                              e instanceof c || (e = new c(e)),
                              this.decode(e, e.uint32())
                            );
                          }),
                          (t.verify = function (e) {
                            return "object" != typeof e || null === e
                              ? "object expected"
                              : null != e.value &&
                                e.hasOwnProperty("value") &&
                                !(
                                  u.isInteger(e.value) ||
                                  (e.value &&
                                    u.isInteger(e.value.low) &&
                                    u.isInteger(e.value.high))
                                )
                              ? "value: integer|Long expected"
                              : null;
                          }),
                          (t.fromObject = function (e) {
                            if (e instanceof m.google.protobuf.UInt64Value)
                              return e;
                            var t = new m.google.protobuf.UInt64Value();
                            return (
                              null != e.value &&
                                (u.Long
                                  ? ((t.value = u.Long.fromValue(
                                      e.value
                                    )).unsigned = !0)
                                  : "string" == typeof e.value
                                  ? (t.value = parseInt(e.value, 10))
                                  : "number" == typeof e.value
                                  ? (t.value = e.value)
                                  : "object" == typeof e.value &&
                                    (t.value = new u.LongBits(
                                      e.value.low >>> 0,
                                      e.value.high >>> 0
                                    ).toNumber(!0))),
                              t
                            );
                          }),
                          (t.toObject = function (e, t) {
                            t || (t = {});
                            var a = {};
                            if (t.defaults)
                              if (u.Long) {
                                var r = new u.Long(0, 0, !0);
                                a.value =
                                  t.longs === String
                                    ? r.toString()
                                    : t.longs === Number
                                    ? r.toNumber()
                                    : r;
                              } else a.value = t.longs === String ? "0" : 0;
                            return (
                              null != e.value &&
                                e.hasOwnProperty("value") &&
                                ("number" == typeof e.value
                                  ? (a.value =
                                      t.longs === String
                                        ? String(e.value)
                                        : e.value)
                                  : (a.value =
                                      t.longs === String
                                        ? u.Long.prototype.toString.call(
                                            e.value
                                          )
                                        : t.longs === Number
                                        ? new u.LongBits(
                                            e.value.low >>> 0,
                                            e.value.high >>> 0
                                          ).toNumber(!0)
                                        : e.value)),
                              a
                            );
                          }),
                          (t.prototype.toJSON = function () {
                            return this.constructor.toObject(
                              this,
                              e.util.toJSONOptions
                            );
                          }),
                          (t.getTypeUrl = function (e) {
                            return (
                              void 0 === e && (e = "type.googleapis.com"),
                              e + "/google.protobuf.UInt64Value"
                            );
                          }),
                          t
                        );
                      })()),
                      (t.Int32Value = (function () {
                        function t(e) {
                          if (e)
                            for (
                              var t = Object.keys(e), a = 0;
                              a < t.length;
                              ++a
                            )
                              null != e[t[a]] && (this[t[a]] = e[t[a]]);
                        }
                        return (
                          (t.prototype.value = 0),
                          (t.create = function (e) {
                            return new t(e);
                          }),
                          (t.encode = function (e, t) {
                            return (
                              t || (t = d.create()),
                              null != e.value &&
                                Object.hasOwnProperty.call(e, "value") &&
                                t.uint32(8).int32(e.value),
                              t
                            );
                          }),
                          (t.encodeDelimited = function (e, t) {
                            return this.encode(e, t).ldelim();
                          }),
                          (t.decode = function (e, t, a) {
                            e instanceof c || (e = c.create(e));
                            for (
                              var r = void 0 === t ? e.len : e.pos + t,
                                n = new m.google.protobuf.Int32Value();
                              e.pos < r;

                            ) {
                              var i = e.uint32();
                              if (i === a) break;
                              i >>> 3 == 1
                                ? (n.value = e.int32())
                                : e.skipType(7 & i);
                            }
                            return n;
                          }),
                          (t.decodeDelimited = function (e) {
                            return (
                              e instanceof c || (e = new c(e)),
                              this.decode(e, e.uint32())
                            );
                          }),
                          (t.verify = function (e) {
                            return "object" != typeof e || null === e
                              ? "object expected"
                              : null != e.value &&
                                e.hasOwnProperty("value") &&
                                !u.isInteger(e.value)
                              ? "value: integer expected"
                              : null;
                          }),
                          (t.fromObject = function (e) {
                            if (e instanceof m.google.protobuf.Int32Value)
                              return e;
                            var t = new m.google.protobuf.Int32Value();
                            return (
                              null != e.value && (t.value = 0 | e.value), t
                            );
                          }),
                          (t.toObject = function (e, t) {
                            t || (t = {});
                            var a = {};
                            return (
                              t.defaults && (a.value = 0),
                              null != e.value &&
                                e.hasOwnProperty("value") &&
                                (a.value = e.value),
                              a
                            );
                          }),
                          (t.prototype.toJSON = function () {
                            return this.constructor.toObject(
                              this,
                              e.util.toJSONOptions
                            );
                          }),
                          (t.getTypeUrl = function (e) {
                            return (
                              void 0 === e && (e = "type.googleapis.com"),
                              e + "/google.protobuf.Int32Value"
                            );
                          }),
                          t
                        );
                      })()),
                      (t.UInt32Value = (function () {
                        function t(e) {
                          if (e)
                            for (
                              var t = Object.keys(e), a = 0;
                              a < t.length;
                              ++a
                            )
                              null != e[t[a]] && (this[t[a]] = e[t[a]]);
                        }
                        return (
                          (t.prototype.value = 0),
                          (t.create = function (e) {
                            return new t(e);
                          }),
                          (t.encode = function (e, t) {
                            return (
                              t || (t = d.create()),
                              null != e.value &&
                                Object.hasOwnProperty.call(e, "value") &&
                                t.uint32(8).uint32(e.value),
                              t
                            );
                          }),
                          (t.encodeDelimited = function (e, t) {
                            return this.encode(e, t).ldelim();
                          }),
                          (t.decode = function (e, t, a) {
                            e instanceof c || (e = c.create(e));
                            for (
                              var r = void 0 === t ? e.len : e.pos + t,
                                n = new m.google.protobuf.UInt32Value();
                              e.pos < r;

                            ) {
                              var i = e.uint32();
                              if (i === a) break;
                              i >>> 3 == 1
                                ? (n.value = e.uint32())
                                : e.skipType(7 & i);
                            }
                            return n;
                          }),
                          (t.decodeDelimited = function (e) {
                            return (
                              e instanceof c || (e = new c(e)),
                              this.decode(e, e.uint32())
                            );
                          }),
                          (t.verify = function (e) {
                            return "object" != typeof e || null === e
                              ? "object expected"
                              : null != e.value &&
                                e.hasOwnProperty("value") &&
                                !u.isInteger(e.value)
                              ? "value: integer expected"
                              : null;
                          }),
                          (t.fromObject = function (e) {
                            if (e instanceof m.google.protobuf.UInt32Value)
                              return e;
                            var t = new m.google.protobuf.UInt32Value();
                            return (
                              null != e.value && (t.value = e.value >>> 0), t
                            );
                          }),
                          (t.toObject = function (e, t) {
                            t || (t = {});
                            var a = {};
                            return (
                              t.defaults && (a.value = 0),
                              null != e.value &&
                                e.hasOwnProperty("value") &&
                                (a.value = e.value),
                              a
                            );
                          }),
                          (t.prototype.toJSON = function () {
                            return this.constructor.toObject(
                              this,
                              e.util.toJSONOptions
                            );
                          }),
                          (t.getTypeUrl = function (e) {
                            return (
                              void 0 === e && (e = "type.googleapis.com"),
                              e + "/google.protobuf.UInt32Value"
                            );
                          }),
                          t
                        );
                      })()),
                      (t.BoolValue = (function () {
                        function t(e) {
                          if (e)
                            for (
                              var t = Object.keys(e), a = 0;
                              a < t.length;
                              ++a
                            )
                              null != e[t[a]] && (this[t[a]] = e[t[a]]);
                        }
                        return (
                          (t.prototype.value = !1),
                          (t.create = function (e) {
                            return new t(e);
                          }),
                          (t.encode = function (e, t) {
                            return (
                              t || (t = d.create()),
                              null != e.value &&
                                Object.hasOwnProperty.call(e, "value") &&
                                t.uint32(8).bool(e.value),
                              t
                            );
                          }),
                          (t.encodeDelimited = function (e, t) {
                            return this.encode(e, t).ldelim();
                          }),
                          (t.decode = function (e, t, a) {
                            e instanceof c || (e = c.create(e));
                            for (
                              var r = void 0 === t ? e.len : e.pos + t,
                                n = new m.google.protobuf.BoolValue();
                              e.pos < r;

                            ) {
                              var i = e.uint32();
                              if (i === a) break;
                              i >>> 3 == 1
                                ? (n.value = e.bool())
                                : e.skipType(7 & i);
                            }
                            return n;
                          }),
                          (t.decodeDelimited = function (e) {
                            return (
                              e instanceof c || (e = new c(e)),
                              this.decode(e, e.uint32())
                            );
                          }),
                          (t.verify = function (e) {
                            return "object" != typeof e || null === e
                              ? "object expected"
                              : null != e.value &&
                                e.hasOwnProperty("value") &&
                                "boolean" != typeof e.value
                              ? "value: boolean expected"
                              : null;
                          }),
                          (t.fromObject = function (e) {
                            if (e instanceof m.google.protobuf.BoolValue)
                              return e;
                            var t = new m.google.protobuf.BoolValue();
                            return (
                              null != e.value && (t.value = Boolean(e.value)), t
                            );
                          }),
                          (t.toObject = function (e, t) {
                            t || (t = {});
                            var a = {};
                            return (
                              t.defaults && (a.value = !1),
                              null != e.value &&
                                e.hasOwnProperty("value") &&
                                (a.value = e.value),
                              a
                            );
                          }),
                          (t.prototype.toJSON = function () {
                            return this.constructor.toObject(
                              this,
                              e.util.toJSONOptions
                            );
                          }),
                          (t.getTypeUrl = function (e) {
                            return (
                              void 0 === e && (e = "type.googleapis.com"),
                              e + "/google.protobuf.BoolValue"
                            );
                          }),
                          t
                        );
                      })()),
                      (t.StringValue = (function () {
                        function t(e) {
                          if (e)
                            for (
                              var t = Object.keys(e), a = 0;
                              a < t.length;
                              ++a
                            )
                              null != e[t[a]] && (this[t[a]] = e[t[a]]);
                        }
                        return (
                          (t.prototype.value = ""),
                          (t.create = function (e) {
                            return new t(e);
                          }),
                          (t.encode = function (e, t) {
                            return (
                              t || (t = d.create()),
                              null != e.value &&
                                Object.hasOwnProperty.call(e, "value") &&
                                t.uint32(10).string(e.value),
                              t
                            );
                          }),
                          (t.encodeDelimited = function (e, t) {
                            return this.encode(e, t).ldelim();
                          }),
                          (t.decode = function (e, t, a) {
                            e instanceof c || (e = c.create(e));
                            for (
                              var r = void 0 === t ? e.len : e.pos + t,
                                n = new m.google.protobuf.StringValue();
                              e.pos < r;

                            ) {
                              var i = e.uint32();
                              if (i === a) break;
                              i >>> 3 == 1
                                ? (n.value = e.string())
                                : e.skipType(7 & i);
                            }
                            return n;
                          }),
                          (t.decodeDelimited = function (e) {
                            return (
                              e instanceof c || (e = new c(e)),
                              this.decode(e, e.uint32())
                            );
                          }),
                          (t.verify = function (e) {
                            return "object" != typeof e || null === e
                              ? "object expected"
                              : null != e.value &&
                                e.hasOwnProperty("value") &&
                                !u.isString(e.value)
                              ? "value: string expected"
                              : null;
                          }),
                          (t.fromObject = function (e) {
                            if (e instanceof m.google.protobuf.StringValue)
                              return e;
                            var t = new m.google.protobuf.StringValue();
                            return (
                              null != e.value && (t.value = String(e.value)), t
                            );
                          }),
                          (t.toObject = function (e, t) {
                            t || (t = {});
                            var a = {};
                            return (
                              t.defaults && (a.value = ""),
                              null != e.value &&
                                e.hasOwnProperty("value") &&
                                (a.value = e.value),
                              a
                            );
                          }),
                          (t.prototype.toJSON = function () {
                            return this.constructor.toObject(
                              this,
                              e.util.toJSONOptions
                            );
                          }),
                          (t.getTypeUrl = function (e) {
                            return (
                              void 0 === e && (e = "type.googleapis.com"),
                              e + "/google.protobuf.StringValue"
                            );
                          }),
                          t
                        );
                      })()),
                      (t.BytesValue = (function () {
                        function t(e) {
                          if (e)
                            for (
                              var t = Object.keys(e), a = 0;
                              a < t.length;
                              ++a
                            )
                              null != e[t[a]] && (this[t[a]] = e[t[a]]);
                        }
                        return (
                          (t.prototype.value = u.newBuffer([])),
                          (t.create = function (e) {
                            return new t(e);
                          }),
                          (t.encode = function (e, t) {
                            return (
                              t || (t = d.create()),
                              null != e.value &&
                                Object.hasOwnProperty.call(e, "value") &&
                                t.uint32(10).bytes(e.value),
                              t
                            );
                          }),
                          (t.encodeDelimited = function (e, t) {
                            return this.encode(e, t).ldelim();
                          }),
                          (t.decode = function (e, t, a) {
                            e instanceof c || (e = c.create(e));
                            for (
                              var r = void 0 === t ? e.len : e.pos + t,
                                n = new m.google.protobuf.BytesValue();
                              e.pos < r;

                            ) {
                              var i = e.uint32();
                              if (i === a) break;
                              i >>> 3 == 1
                                ? (n.value = e.bytes())
                                : e.skipType(7 & i);
                            }
                            return n;
                          }),
                          (t.decodeDelimited = function (e) {
                            return (
                              e instanceof c || (e = new c(e)),
                              this.decode(e, e.uint32())
                            );
                          }),
                          (t.verify = function (e) {
                            return "object" != typeof e || null === e
                              ? "object expected"
                              : null != e.value &&
                                e.hasOwnProperty("value") &&
                                !(
                                  (e.value &&
                                    "number" == typeof e.value.length) ||
                                  u.isString(e.value)
                                )
                              ? "value: buffer expected"
                              : null;
                          }),
                          (t.fromObject = function (e) {
                            if (e instanceof m.google.protobuf.BytesValue)
                              return e;
                            var t = new m.google.protobuf.BytesValue();
                            return (
                              null != e.value &&
                                ("string" == typeof e.value
                                  ? u.base64.decode(
                                      e.value,
                                      (t.value = u.newBuffer(
                                        u.base64.length(e.value)
                                      )),
                                      0
                                    )
                                  : e.value.length >= 0 && (t.value = e.value)),
                              t
                            );
                          }),
                          (t.toObject = function (e, t) {
                            t || (t = {});
                            var a = {};
                            return (
                              t.defaults &&
                                (t.bytes === String
                                  ? (a.value = "")
                                  : ((a.value = []),
                                    t.bytes !== Array &&
                                      (a.value = u.newBuffer(a.value)))),
                              null != e.value &&
                                e.hasOwnProperty("value") &&
                                (a.value =
                                  t.bytes === String
                                    ? u.base64.encode(
                                        e.value,
                                        0,
                                        e.value.length
                                      )
                                    : t.bytes === Array
                                    ? Array.prototype.slice.call(e.value)
                                    : e.value),
                              a
                            );
                          }),
                          (t.prototype.toJSON = function () {
                            return this.constructor.toObject(
                              this,
                              e.util.toJSONOptions
                            );
                          }),
                          (t.getTypeUrl = function (e) {
                            return (
                              void 0 === e && (e = "type.googleapis.com"),
                              e + "/google.protobuf.BytesValue"
                            );
                          }),
                          t
                        );
                      })()),
                      t)),
                    a
                  );
                })()),
                m
              );
            })
              ? r.apply(t, n)
              : r) || (e.exports = i);
    },
  },
]);
//# sourceMappingURL=sri-v2-commons-7fff9fb1-bundle-75df8eaf3aaae6eb1a04.js.map
